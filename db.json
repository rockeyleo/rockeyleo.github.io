{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/back.png","path":"img/back.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/background.jpg","path":"img/background.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/categories/index.md","hash":"c6ae248baebc3ac9333e2ccf9dac74cff0232d03","modified":1690001710537},{"_id":"source/_posts/csp-noip备战日志0-5-CSP-S初试知识点梳理.md","hash":"6e0a9a62dbd269cccc225636e04f7c1b63d0edb4","modified":1689872223605},{"_id":"source/_posts/csp-noip备战日志0-前言.md","hash":"2ff91de744840b0c003c7ed5cc21d54de35089b3","modified":1689870172380},{"_id":"source/_posts/csp-noip备战日志1-小寄巧.md","hash":"b3206bfa02953208515456849359eba43079e480","modified":1689958706319},{"_id":"source/_posts/csp-noip备战日志10-写在最后之后.md","hash":"5266935bfed522d51e386f4fc47fbd714566eae6","modified":1689871553707},{"_id":"source/_posts/csp-noip备战日志2-基础算法.md","hash":"a1a00ca10153edd817c3b9d0f5a665e1bec17259","modified":1689945792940},{"_id":"source/_posts/csp-noip备战日志3-搜索.md","hash":"f489d9ec9b5cc07800b8e611a5ac35268dbe92d1","modified":1689945918158},{"_id":"source/_posts/csp-noip备战日志4-字符串.md","hash":"e65cf6e6ceff2759ed2368f612b55294d9abdf35","modified":1689945934783},{"_id":"source/_posts/csp-noip备战日志5-数据结构.md","hash":"b2c2614ec0ac958d17cc887a10e037144f841ee7","modified":1689945943987},{"_id":"source/_posts/csp-noip备战日志6-图论.md","hash":"a5174301c80e6bc9e63f3217e2c977bf3fbe82fc","modified":1689945955019},{"_id":"source/_posts/csp-noip备战日志7-动态规划.md","hash":"295949214d7f0ab07126ac63cb5ed2403d43a347","modified":1689945983899},{"_id":"source/_posts/csp-noip备战日志8-数学.md","hash":"070b3ba7ead22fe882b10b0007b0adf059821436","modified":1689945995920},{"_id":"source/_posts/csp-noip备战日志9-杂项.md","hash":"7e60c2410ee3aa88c924fe0a1aaa504983fe5082","modified":1689946010564},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1689531303597},{"_id":"source/_posts/【音mad101】1.1-AE快速上手.md","hash":"499fb324f4a7677bb906283532a0767a6ef073bc","modified":1689855427895},{"_id":"source/_posts/【音mad101】第0节：前言.md","hash":"7dd13719e5d28fc0763f39425dbba722b1cdc544","modified":1689856864533},{"_id":"source/_posts/【音mad101】第1节：AfterEffects.md","hash":"35169bddf2ab8c61e0651b72268f89ce7200a682","modified":1689857666108},{"_id":"source/_posts/无折腾，不linux：关于Ventoy-Linux，Kubuntu和系统配置的心得.md","hash":"678d4a4ce65f76b7eb8c5266abab2136262104c9","modified":1689854484963},{"_id":"source/tags/index.md","hash":"574097da34e00c498f5871e2378de45996345f5b","modified":1690001696296},{"_id":"source/_posts/无折腾，不linux：关于Ventoy-Linux，Kubuntu和系统配置的心得/test.png","hash":"03ee87ec768022fd1e98a7ac8726706f3de1b0c9","modified":1689256601898},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1689566287198},{"_id":"themes/butterfly/README.md","hash":"b5d6e7271b88d1a63755386442663af03e36a428","modified":1689566287198},{"_id":"themes/butterfly/README_CN.md","hash":"86569b94949392e9b981608433495f0941d20b0c","modified":1689566287198},{"_id":"themes/butterfly/_config.yml","hash":"eae39df87b86d1df6345627754af77727a6a92bf","modified":1690009914481},{"_id":"themes/butterfly/package.json","hash":"1646604798f745ef068852772eb22239985ba731","modified":1689566287210},{"_id":"themes/butterfly/plugins.yml","hash":"d0e179ae31cdc62037062432b0ee7a9008155a73","modified":1689566287210},{"_id":"themes/butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1689566287198},{"_id":"themes/butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1689566287198},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":1689566287202},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1689566287202},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1689566287202},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1689566287202},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1689566287210},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1689566287210},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1689566287210},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1689566287210},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1689566287198},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1689566287198},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1689566287198},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1689566287198},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1689566287198},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"d15124c488273ea0801a042888feadc9261d0b2f","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1689566287202},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1689566287210},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1689566287210},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1689566287210},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1689566287210},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1689566287210},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1689566287210},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1689566287210},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1689566287210},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1689566287210},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1689566287210},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1689566287210},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1689566287210},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1689566287210},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1689566287210},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1689566287210},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1689566287210},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1689566287210},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1689566287210},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1689566287210},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1689566287210},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1689566287210},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1689566287210},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1689566287210},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1689566287210},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1689566287210},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1689566287214},{"_id":"themes/butterfly/source/css/my.css","hash":"6017fdd7d83cbafbc1717b764e7b44a75f5ea910","modified":1690008970662},{"_id":"themes/butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1689566287214},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1689566287214},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1689566287214},{"_id":"themes/butterfly/source/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1689566287218},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1689566287218},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1689566287218},{"_id":"themes/butterfly/source/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1689566287218},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"1ed873db25eec869beebb6873f04e19f0b0f4134","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"cde142861edfc7aab435b8a0ebb84d9ba450fb5b","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1689566287210},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1689566287210},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1689566287210},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1689566287210},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"e0de61a059b5e6c7b8ebc7149b4650bdcd69af5e","modified":1689566287210},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"51868d861c94a9f1ad7c0dbd66d2f475c5d4ea62","modified":1689566287210},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":1689566287210},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1689566287210},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1689566287210},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1689566287210},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1689566287210},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1689566287210},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"8cd2aaa32cd68cd1908c9001444a811c3d0f9267","modified":1689566287210},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1689566287210},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1689566287214},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"fc9424d9c5def2201ec1d04dc79d0beedc1d2175","modified":1689566287214},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1689566287214},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1689566287214},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1689566287214},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1689566287214},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1689566287214},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"e4f948b0d4eb5483b2b360e56cbfe3359751b438","modified":1689566287214},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"c481d1f689a4e6d7ee492a03751bda47a30225ce","modified":1689566287214},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1689566287214},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1689566287214},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1689566287214},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1689566287214},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1689566287214},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"b3ea08d9460122751144a3ca835e009a460d6ad3","modified":1689566287214},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1689566287214},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1689566287214},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1689566287214},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1689566287214},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1689566287214},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1689566287214},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1689566287214},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1689566287214},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1689566287214},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1689566287214},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1689566287214},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1689566287214},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1689566287214},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1689566287214},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1689566287218},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1689566287218},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"d02f3cc9e6183e7d05c7e90e9ae1dee5ce21f297","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1689566287202},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5d8a0a3a7690d6d01e3feb91c2a36a5cd651b1","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"35ae7980f658a349c5956c5699efd435b604b836","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d0ce1891b042dcc2c93cacc866e38721b94aa4c4","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"8c0d9a45bd2d83cc6d0e7bbfe172a09ff33c0178","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ae1ccd78926cc19399d396b237d5161d7cde44a8","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1689566287206},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1689566287206},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1689566287210},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1689566287210},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1689566287210},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1689566287210},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1689566287210},{"_id":"source/_posts/无折腾，不linux：关于Ventoy-Linux，Kubuntu和系统配置的心得/cover.jpg","hash":"08cefb5b456979e442feb0d3532e13315e83f316","modified":1689698581909},{"_id":"themes/butterfly/source/img/background.jpg","hash":"0033fc73519de008f06096e6286c941883bd0a80","modified":1689694776014},{"_id":"themes/butterfly/source/img/back.png","hash":"06ee20f1297deff572b9375eb2b1d68985211afd","modified":1690008590259},{"_id":"public/categories/index.html","hash":"bfba8d48a40c6baf5b0b640d0bfebc5b290ffd57","modified":1690010502766},{"_id":"public/tags/index.html","hash":"77273bdb91e58d8526681b18515190397cf4684d","modified":1690010502766},{"_id":"public/2023/07/21/csp-noip备战日志9-杂项/index.html","hash":"a07d72460af425554e9bca1c0cd3af75465e15e7","modified":1690010502766},{"_id":"public/2023/07/21/csp-noip备战日志8-数学/index.html","hash":"f1cabbd4d448b3a24f6f15d6b721494959e44e33","modified":1690010502766},{"_id":"public/2023/07/21/csp-noip备战日志7-动态规划/index.html","hash":"c9bc9325e72269b1a256bd485f8c26c658392e9c","modified":1690010502766},{"_id":"public/2023/07/21/csp-noip备战日志6-图论/index.html","hash":"c3741dbc5284d758ab67c2aea9cd0bed69439562","modified":1690010502766},{"_id":"public/2023/07/21/csp-noip备战日志5-数据结构/index.html","hash":"80be99fd83e397d603eff1e6756c36fabde8fe43","modified":1690010502766},{"_id":"public/2023/07/21/csp-noip备战日志4-字符串/index.html","hash":"dc804c5b3f8c1e0457928f45d64395dda921b096","modified":1690010502766},{"_id":"public/2023/07/21/csp-noip备战日志3-搜索/index.html","hash":"4dd0189bf02d179a2f392f3b03f584b51670bfc6","modified":1690010502766},{"_id":"public/2023/07/21/csp-noip备战日志2-基础算法/index.html","hash":"2aa1a77b72399e0967e959b855f6a62ab73b8b60","modified":1690010502766},{"_id":"public/2023/07/21/csp-noip备战日志1-小寄巧/index.html","hash":"7f18d60fdc8b845a5addba554daae3f9ad8e7e02","modified":1690010502766},{"_id":"public/2023/07/20/csp-noip备战日志10-写在最后之后/index.html","hash":"b64cdf63d69cb026380e1fcdc14dc6e1e19990bd","modified":1690010502766},{"_id":"public/2023/07/20/csp-noip备战日志0-5-CSP-S初试知识点梳理/index.html","hash":"126dd9030f29842325cb7f259d44fb851e61eee2","modified":1690010502766},{"_id":"public/2023/07/20/csp-noip备战日志0-前言/index.html","hash":"f01c3cdc2ed26e4de5daa6ed16f3f6f67bd8c53a","modified":1690010502766},{"_id":"public/2023/07/20/【音mad101】1.1-AE快速上手/index.html","hash":"5ffcf1a9ae36433ae0f6c4b7d49b84d671ed514e","modified":1690010502766},{"_id":"public/2023/07/20/【音mad101】第1节：AfterEffects/index.html","hash":"b4417cca2e1ceea17ce5adbc5277528c121271fa","modified":1690010502766},{"_id":"public/2023/07/20/【音mad101】第0节：前言/index.html","hash":"d5da1a8cf04383de3fb3200b43a60dabc46e5cf1","modified":1690010502766},{"_id":"public/2023/07/17/无折腾，不linux：关于Ventoy-Linux，Kubuntu和系统配置的心得/index.html","hash":"db64ef2e7cf87e5930e616286eb674213c71bc91","modified":1690010502766},{"_id":"public/2023/07/17/hello-world/index.html","hash":"b4addbdf94a3674ec3206059e382471856182b74","modified":1690010502766},{"_id":"public/archives/index.html","hash":"cbc172f053053e47150f06d14b9dafb55439c025","modified":1690010502766},{"_id":"public/archives/page/2/index.html","hash":"4a53e591614cb1af45b82f593c1d7790f0d911c0","modified":1690010502766},{"_id":"public/archives/2023/index.html","hash":"6b2ab691d5ad2d5efbbc077b0250a2ad0eb97496","modified":1690010502766},{"_id":"public/archives/2023/page/2/index.html","hash":"69257c6c4f50c5ae37d08f3bf119df8079fa2f1f","modified":1690010502766},{"_id":"public/archives/2023/07/index.html","hash":"a9851f7081087dd6c16296afe9a92c02425e5ba7","modified":1690010502766},{"_id":"public/archives/2023/07/page/2/index.html","hash":"e754486a1bd008cda14087a7c7793480b7a2781b","modified":1690010502766},{"_id":"public/index.html","hash":"bb12bb66fe25f9450d8a066bf9158388ee0ba442","modified":1690010502766},{"_id":"public/page/2/index.html","hash":"e48c1509afca8a48315bba3bcacfbb0abe3a9afa","modified":1690010502766},{"_id":"public/tags/csp-noip备战日志/index.html","hash":"d1731a1bc2750959120105674824172ac402a297","modified":1690010502766},{"_id":"public/tags/学习手记/index.html","hash":"8493bcc96cc9d51c281b3bb7332ac10b742ab22e","modified":1690010502766},{"_id":"public/tags/OI/index.html","hash":"d41f6f5da983da78eb577efa2fd80ef2e6267c4b","modified":1690010502766},{"_id":"public/tags/时隙随思/index.html","hash":"7e162937c5fe0c0059d788203c8f145a370d02f1","modified":1690010502766},{"_id":"public/tags/音mad101/index.html","hash":"cdcf524b641b8e6f7c840cad98719ea36bb82f44","modified":1690010502766},{"_id":"public/tags/音mad101第一节/index.html","hash":"7f688a045fdb081938d6f1ac86094ed5a04f00b7","modified":1690010502766},{"_id":"public/tags/AE/index.html","hash":"7db2ba627a6b71170919af8ed82d2446ff4e9e65","modified":1690010502766},{"_id":"public/tags/音mad101第1节/index.html","hash":"3e7f8ab0b57a821801de52dfc61dd7009d188ee7","modified":1690010502766},{"_id":"public/tags/折腾不止/index.html","hash":"8445314eb5431d3a97b87158e19274863c8c7068","modified":1690010502766},{"_id":"public/tags/ubuntu/index.html","hash":"3599b76969d9bd825b41ecf9521fb1960368bdb7","modified":1690010502766},{"_id":"public/tags/kubuntu/index.html","hash":"8b85e860310b38e0522adadb7dd5ba10e2f0665e","modified":1690010502766},{"_id":"public/tags/linux-to-go/index.html","hash":"946b971160ac06e213c1a20af4de028b86d07086","modified":1690010502766},{"_id":"public/tags/ventoy/index.html","hash":"068f6b2440d0aa2ca115e6253ab72e69903e738a","modified":1690010502766},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1690010502766},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1690010502766},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1690010502766},{"_id":"public/2023/07/17/无折腾，不linux：关于Ventoy-Linux，Kubuntu和系统配置的心得/test.png","hash":"03ee87ec768022fd1e98a7ac8726706f3de1b0c9","modified":1690010502766},{"_id":"public/css/my.css","hash":"6017fdd7d83cbafbc1717b764e7b44a75f5ea910","modified":1690010502766},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690010502766},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1690010502766},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1690010502766},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1690010502766},{"_id":"public/css/index.css","hash":"0a9ec432f5febcd34ef3b03b20d646d188962b6b","modified":1690010502766},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1690010502766},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1690010502766},{"_id":"public/2023/07/17/无折腾，不linux：关于Ventoy-Linux，Kubuntu和系统配置的心得/cover.jpg","hash":"08cefb5b456979e442feb0d3532e13315e83f316","modified":1690010502766},{"_id":"public/img/background.jpg","hash":"0033fc73519de008f06096e6286c941883bd0a80","modified":1690010502766},{"_id":"public/img/back.png","hash":"06ee20f1297deff572b9375eb2b1d68985211afd","modified":1690010502766}],"Category":[],"Data":[],"Page":[{"title":"categories","date":"2023-07-22T04:55:10.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-07-22 12:55:10\n---\n","updated":"2023-07-22T04:55:10.537Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clkdom9va00002agw2nx487qn","content":"\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"\n"},{"title":"tags","date":"2023-07-22T04:54:56.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-07-22 12:54:56\n---\n","updated":"2023-07-22T04:54:56.296Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clkdom9ve00022agw95m8hz4f","content":"\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"\n"}],"Post":[{"title":"csp-noip备战日志0.5-CSP/S初试知识点梳理","date":"2023-07-20T14:54:25.000Z","_content":"\n### *[本文未完成，绝赞摆烂中]*\n\n# CSP-S 初试知识点梳理\n\n## 一 数制转换\n\n#### K进制转十进制\n\n将原数字的每一位与其位权相乘后相加即可\n\n#### 十进制转K进制\n\n- 整数部分：将原数短除[^1]K，**倒取**余数\n\n- 小数部分：循坏*K并不断取产生的整数部分，**顺取**余数\n\n###### eg.1.  173转二进制\n\n![图片](https://www.runoob.com/wp-content/uploads/2018/11/210-2.png)\n\n[^1]: 此处除法指整数除法（可以认为是去掉了余数）\n\n###### eg.2.  0.125转二进制\n\n$0.125\\times 2 = 0.25$ ·········0\n\n$0.25\\times 2 = 0.5$ ·············0\n\n$0.5\\times2 = 1$ ··················1\n\n故$(0.125)_{10}=(0.001)_{2}$\n\n#### 二进制转八进制、十六进制\n\n以小数点为界，整数部分从右向左，小数部分从左到右，以三位为一组转换为八进制，以四位为一组转换为16进制\n\n###### eg.\n\n$(1,111,010,101,101)_2 = (17255)_8$\n\n$(1,101,110.101,1)_2 = (156.54)_8$ ^2fc7d2\n\n$(1,1110,1010,1101)_2 = (1EAD)_{16}$\n\n$(1,1110,1001.1011,1)_2 = (1E9.B8)_{16}$\n\n## 二 信息编码\n\n#### ASCII码\n\nASCII码可对英文字母，数字，控制符（如换行符），通用符（如=/+）进行编码。基本ASCII码占一个字节，最高位保持为0，其余位可编码$2^7=128$种字符（对应编码0和127个正数[^2][^3]）。\n\n另外还有一种扩展ASCII码，置于第一个字节之后，最高位为1，表示范围为128-255。\n\n`A`的ASCII编码为$(65)_{10}$，`0`则为$(48)_{10}$。\n\n[^2]: 仔细看好，$(1111111)_2=(127)_{10}=2^7-1，(10000000)_2=(128)_{10}=2^7$\n[^3]: ASCII码为0的符号是null，的确存在\n\n#### 中文的编码表示\n\n汉字使用GB码进行编码，一个汉字占两个字节，存储时两个字节最高位均置为1，可表示$2^7 \\times 2^7 = 16384$种字符。\n\n中文在输出时，需要通过一种字形码进行点阵绘图。一个16\\*16的点阵汉字需要$16 \\times 16 \\div8=32$个字节来储存。表示顺序为：从上到下，从左到右，8个为一字节。\n\n#### 哈夫曼编码\n\n1. 哈夫曼编码的结构基础是哈夫曼树。\n\n   建树原理：每次取权值最小的两棵子树合并成一棵子树，直到最终所有的元素合并成一棵树。这棵树就是哈夫曼树\n\n   （子树的权值是其叶子结点的权值之和，在哈夫曼编码中，这个权值是字符的出现次数）\n\n![哈夫曼树](https://pic3.zhimg.com/80/v2-48e3cdd3fbd1e25ce40a4205a753e24e_720w.jpg)\n\n2. 哈夫曼编码利用了贪心的思想，总的来说就是将出现多的字符用尽量短的编码来表示。建好树以后，要获取每个字符的哈夫曼编码，就通过根节点遍历到对应的子节点，所经历的路径就是这个字符的编码\n\n![encoded](https://pic4.zhimg.com/80/v2-82b9db088f6babb04754a98f22978433_720w.jpg)\n\n| 字符 | e    | d    | b    | a    | ' '  | c    |\n| :--- | ---- | ---- | ---- | ---- | ---- | ---- |\n| 编码 | 1110 | 1111 | 110  | 00   | 01   | 10   |\n\n## 三 位运算和布尔运算\n\n#### 原码，反码，补码\n\n1. 机器数和真值\n\n   机器数是数字在计算机中的二进制表示形式，一般最高位表示正负（1表示负，0表示正），故8位二进制数只有7位用于存储数据。\n\n   真值就是去掉最高位符号位后机器存储的真实值。如10000011的真值为3而非131（$(10000011)_2=(131)_{10}$）\n\n2. 原码和反码\n\n   原码指的就是符号位加上真值的绝对值，也就是数字的机器储存形式。\n\n   整数的反码就是其本身，负数的反码是**符号位不变**，其余各个数取反。\n\n   ###### e.g.\n\n   $(-1)_{10} = [1,0000001]_原$ -> $[1,1111110]_反$\n\n3. 补码\n\n   正数的补码还是其本身。\n\n   负数的补码是其反码+1（**会进位，但是新增的位数会被忽略**）\n\n   ###### e.g.\n\n   $(-127)_{10} = [1,1111111]_原$ -> $[1,0000000]_反$ -> $[1,0000001]_补$\n\n   $(-0)_{10} = [1,0000000]_原$ -> $[1,1111111]_反$ -> $[0,0000000]_补$（**我们规定0和-0的补码是一样的**）\n\n   - 注意一点，计算机使用补码存储数据，-0的补码和0的补码一样，也就相当于不存在-0了，而$[10000000]$这个补码没有数字占用。所以我们规定$[10000000]$表示-128（-128的二进制有8位，原本需要9位来表示）。因此，如果有一个占一字节的数组，那么它的实际存储范围会是$[-10000000,1111111]$，即$[-128,127]$。int类型（用4个字节存储）的范围为$[-2^{31},2^{31}-1]$，也是如此。\n\n#### 位运算\n\n1. 常见的位运算主要用与，或，非，异或四种运算。\n\n   将1视为true，0视为false，前三者和普通逻辑运算没有太大差别。\n\n   异或就是找不同，两个值不同时结果为1,相同则为0。\n\n   C++中，使用&表示按位或，|表示按位与，^表示异或。\n\n2. 移位\n\n   C++中的按位操作符只对于数字的最低位进行，所以要配合移位来使用。\n   左移运算符会将最左位丢弃，在最右位置补0。因此有：$n<<1=2n$\n\n   右移运算则分为有符号（如在C++中对int类型右移）和无符号（如对unsigned int右移）两种情况；右移的规则和左移类似，位于最高位的符号位不会参与右移。\n\n   因此有：$n>>1=\\lfloor n/2 \\rfloor$[^4]。\n\n   [^4]: 需要注意的是，在C++中，对负数使用右移运算，答案**向偏小的方向取整**（而整除是向0的方向——也即**绝对值**小的方向——取整），如$-3>>1=-2，-3/2=-1$\n\n#### 布尔运算\n\n在布尔运算里，用$\\vee$来表示或，用$\\land$表示与，用$\\oplus$表示异或，用$\\neg$表示取反，规则类似集合运算\n\n在其他场合，可能还会遇到使用a xor b来表示a与b异或的情况。\n\n\n\n补充：符号运算顺序一览\n\n![](https://img-blog.csdnimg.cn/9e6d8a9983e5430081e74994eddeafe3.png#pic_center)\n\n## 四 算法及复杂度分析a sd\n\n#### 排序算法\n\n| 算法           | 桶排序 | 基数排序 | 归并排序   | 快速排序   | 堆排序     | 希尔排序                   | 冒泡排序     | 选择排序 | 插入排序     |\n| -------------- | ------ | -------- | ---------- | ---------- | ---------- | -------------------------- | ------------ | -------- | ------------ |\n| 平均时间复杂度 | $O(n)$ | $O(n)$   | $O(nlogn)$ | $O(nlogn)$ | $O(nlogn)$ | $O(n^{\\frac{3}{2}})$（？） | $O(n^2)$[^5] | $O(n^2)$ | $O(n^2)$[^5] |\n| 最差时间复杂度 | $O(n)$ | $O(n)$   | $O(nlogn)$ | $O(n^2)$   | $O(nlogn)$ | $O(n^2)$                   | $O(n^2)$     | $O(n^2)$ | $O(n^2)$     |\n| 稳定性         | 不稳定 | 稳定     | 稳定       | 不稳定     | 不稳定     | 不稳定                     | 稳定         | 不稳定   | 稳定         |\n\n[^5]: 冒泡排序和插入排序的最佳复杂度可达到$O(n)$\n\n#### 其它常见数据结构的复杂度\n\n![](https://pic1.zhimg.com/v2-05c78d4c4c3e4e5b1303435fc0800238_r.jpg)\n\n## 五 树与图论\n\n#### 树\n\n1. 基本概念\n\n   - 深度：一个节点向上连到根节点的的路径上的边数\n\n   - 树的高：一棵树的深度的最大值\n\n   - 叶节点：没有子节点的节点\n   - 节点的度：\n\n2. 二叉树\n\n   - 二叉树的遍历\n\n     前/中/后序遍历都指根节点的遍历先后，除了根节点，先左后右。\n\n   - 完全二叉树\n\n     只有最下面两层结点的度数可以小于 22，且最下面一层的结点都集中在该层的最左侧\n\n     ![](https://oi-wiki.org/graph/images/tree-binary-complete.svg)\n\n   - 满二叉树\n\n     即满的二叉树（\n\n     一颗深度为h的二叉树的节点数$\\le2^n-1$，当且仅当是满二叉树时取等\n\n   - 一颗二叉树的叶子结点树一定为度为2的点的个数+1（$n_2=n_0-1$）\n\n   - 具有n个节点的完全二叉树的深度为$[log_2n]+1$\n\n#### 图论\n\n1. 基本概念\n\n   - 图分有向图和无向图两种\n   - 与一个顶点相关联的边的条数称为该顶点的度，有向图还分入度和出度\n   - 简单图：若一个图中没有自环和重边，它被称为简单图。[^6]\n   - 具有至少两个顶点的简单无向图中一定存在度相同的结点。\n   - 完全图：图中任意两点均有连边的图。\n   - 一个有n个节点的无向完全图中有$\\frac{n(n-1)}{2}$条边。\n   - 欧拉路和欧拉回路\n     - 欧拉路中有且只有两个奇点\n     - 欧拉回路中没有奇点\n\n\n[^6]: 在有向图中，a->b和a<-b不算重边\n\n2. 图的存储\n\n   - 邻接矩阵\n\n     用一个二维数组`j[a][b]`来表示从a到b的连边长（无边设为一个极大值）\n\n     空间复杂度$O(n^2)$，遍历全图复杂度$O(n^2)$，遍历一个点的出边$O(n)$。\n\n   - 邻接表\n\n     简单来说就是用一个链表把一个点指向的所有节点连在一起\n\n     ![](https://www.dotcpp.com/oj/ueditor/php/upload/image/20191211/1576070228570316.png)\n\n     ![](https://www.dotcpp.com/oj/ueditor/php/upload/image/20191211/1576070307448389.png)\n\n     空间复杂度$O(e)$，遍历全图复杂度$O(n+e)$，遍历点$u$的出边$O(d^+(u))$\n\n3. 图的最短路\n\n   - 常用求解方法：Dijkstra\n\n     - 基本原理\n\n       将结点分成两个集合：已确定最短路长度的点集（记为$S$集合）的和未确定最短路长度的点集（记为$T$集合）。一开始所有的点都属于$T$集合。\n\n       初始化$dis(s)=0$，其他点的$dis$均为$+\\infty$。\n\n       然后重复这些操作：\n\n       从$T$集合中，选取一个最短路长度最小的结点，移到$S$集合中。\n       对那些刚刚被加入$S$集合的结点的所有出边执行松弛操作。\n       直到  集合为空，算法结束。\n\n     - 时间复杂度\n\n       - 在无堆优化时，复杂度为$O(n^2+m)$\n       - 优先队列优化后，复杂度为$O(mlogm)$\n\n4. 二分图\n\n   - 二分图的一些性质\n     - 如果两个集合中的点分别染成黑色和白色，可以发现二分图中的每一条边都一定是连接一个黑色点和一个白色点；\n     - 二分图无奇环\n\n   - 二分图判定：DFS/BFS染色\n\n## 六 其它数据结构\n\n#### 栈\n\n1. 前/中/后缀表达式\n\n   - 前缀表达式\n\n     从右至左扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对他们做相应的计算，并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果。\n\n     ###### e.g.\n\n     `- * + 3 4 5 6`\n\n     1. 从右至左扫描，将6、5、4、3压入堆栈；\n       2. 遇到 + 运算符，因此弹出3和4（3为栈顶元素，4为次顶元素），计算 3+4 的值，得7，再将7入栈；\n       3. 接下来是 * 运算符，因此弹出7和5，计算 7*5=35 ，将35入栈。\n       4. 最后是 - 运算符，计算 35-6 的值，即29，得最终结果29.\n\n   - 后缀表达式\n\n     又称逆波兰表达式，和前缀表达式类似，但是将算符位于操作数之后。\n\n     求值时，从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算。并将结果入栈；重复上述过程直到表达式最右端，最后运算出的值即为表达式的结果。\n\n     ###### e.g.\n\n     `3 4 + 5 * 6 -`\n\n            1. 从左至右扫描，将3和4入栈；\n            2. 遇到运算符 + ，因此弹出4和3，计算 3+4 的值，再将7入栈；\n            3. 将5入栈；\n            4. 接下来是 * 运算符，因此弹出5和7，计算出 7*5=35，将35入栈；\n            5. 将6入栈；\n            6. 最后是 - 运算符，计算 35-6 的值，即29，由此得出最终结果。\n\n## 七 数学\n\n#### 组合数学\n\n1. 基本公式\n\n   - 排列公式：$P_n^m = A_n^m = n(n-1)(n-2)...(n-m+1) = \\frac{n!}{(n-m)!}$\n\n     特别的，$A_n^n=n!$（注意0!=1）\n\n     （为方便计算，也可记为$\\prod^m_{i=n}i$）\n\n     ###### e.g.\n\n     $A_7^4=7 \\times 6 \\times 5 \\times 4 = 840$\n\n   - 组合公式：$C_n^m = \\frac{A_n^m}{m!} = \\frac{n!}{(n-m)!}$\n\n     （为方便计算，也可记为$\\frac{\\prod^{m}_{i=n}i}{m!}$）\n\n     ###### e.g.\n\n     $C^4_7 = \\frac{7 \\times 6 \\times 5 \\times 4}{4 \\times 3 \\times 2 \\times 1} = 35$\n\n2. 计算技巧\n\n   - 特殊情况优先分类\n\n   - 插板法\n   - 隔板法\n\n   ~~高中数学学完以后再回来看觉得排列组合有意思的地方真不少，有机会把这一块做成番外~~\n\n   \n","source":"_posts/csp-noip备战日志0-5-CSP-S初试知识点梳理.md","raw":"---\ntitle: csp-noip备战日志0.5-CSP/S初试知识点梳理\ndate: 2023-07-20 22:54:25\ntags: [csp-noip备战日志,学习手记,OI]\n---\n\n### *[本文未完成，绝赞摆烂中]*\n\n# CSP-S 初试知识点梳理\n\n## 一 数制转换\n\n#### K进制转十进制\n\n将原数字的每一位与其位权相乘后相加即可\n\n#### 十进制转K进制\n\n- 整数部分：将原数短除[^1]K，**倒取**余数\n\n- 小数部分：循坏*K并不断取产生的整数部分，**顺取**余数\n\n###### eg.1.  173转二进制\n\n![图片](https://www.runoob.com/wp-content/uploads/2018/11/210-2.png)\n\n[^1]: 此处除法指整数除法（可以认为是去掉了余数）\n\n###### eg.2.  0.125转二进制\n\n$0.125\\times 2 = 0.25$ ·········0\n\n$0.25\\times 2 = 0.5$ ·············0\n\n$0.5\\times2 = 1$ ··················1\n\n故$(0.125)_{10}=(0.001)_{2}$\n\n#### 二进制转八进制、十六进制\n\n以小数点为界，整数部分从右向左，小数部分从左到右，以三位为一组转换为八进制，以四位为一组转换为16进制\n\n###### eg.\n\n$(1,111,010,101,101)_2 = (17255)_8$\n\n$(1,101,110.101,1)_2 = (156.54)_8$ ^2fc7d2\n\n$(1,1110,1010,1101)_2 = (1EAD)_{16}$\n\n$(1,1110,1001.1011,1)_2 = (1E9.B8)_{16}$\n\n## 二 信息编码\n\n#### ASCII码\n\nASCII码可对英文字母，数字，控制符（如换行符），通用符（如=/+）进行编码。基本ASCII码占一个字节，最高位保持为0，其余位可编码$2^7=128$种字符（对应编码0和127个正数[^2][^3]）。\n\n另外还有一种扩展ASCII码，置于第一个字节之后，最高位为1，表示范围为128-255。\n\n`A`的ASCII编码为$(65)_{10}$，`0`则为$(48)_{10}$。\n\n[^2]: 仔细看好，$(1111111)_2=(127)_{10}=2^7-1，(10000000)_2=(128)_{10}=2^7$\n[^3]: ASCII码为0的符号是null，的确存在\n\n#### 中文的编码表示\n\n汉字使用GB码进行编码，一个汉字占两个字节，存储时两个字节最高位均置为1，可表示$2^7 \\times 2^7 = 16384$种字符。\n\n中文在输出时，需要通过一种字形码进行点阵绘图。一个16\\*16的点阵汉字需要$16 \\times 16 \\div8=32$个字节来储存。表示顺序为：从上到下，从左到右，8个为一字节。\n\n#### 哈夫曼编码\n\n1. 哈夫曼编码的结构基础是哈夫曼树。\n\n   建树原理：每次取权值最小的两棵子树合并成一棵子树，直到最终所有的元素合并成一棵树。这棵树就是哈夫曼树\n\n   （子树的权值是其叶子结点的权值之和，在哈夫曼编码中，这个权值是字符的出现次数）\n\n![哈夫曼树](https://pic3.zhimg.com/80/v2-48e3cdd3fbd1e25ce40a4205a753e24e_720w.jpg)\n\n2. 哈夫曼编码利用了贪心的思想，总的来说就是将出现多的字符用尽量短的编码来表示。建好树以后，要获取每个字符的哈夫曼编码，就通过根节点遍历到对应的子节点，所经历的路径就是这个字符的编码\n\n![encoded](https://pic4.zhimg.com/80/v2-82b9db088f6babb04754a98f22978433_720w.jpg)\n\n| 字符 | e    | d    | b    | a    | ' '  | c    |\n| :--- | ---- | ---- | ---- | ---- | ---- | ---- |\n| 编码 | 1110 | 1111 | 110  | 00   | 01   | 10   |\n\n## 三 位运算和布尔运算\n\n#### 原码，反码，补码\n\n1. 机器数和真值\n\n   机器数是数字在计算机中的二进制表示形式，一般最高位表示正负（1表示负，0表示正），故8位二进制数只有7位用于存储数据。\n\n   真值就是去掉最高位符号位后机器存储的真实值。如10000011的真值为3而非131（$(10000011)_2=(131)_{10}$）\n\n2. 原码和反码\n\n   原码指的就是符号位加上真值的绝对值，也就是数字的机器储存形式。\n\n   整数的反码就是其本身，负数的反码是**符号位不变**，其余各个数取反。\n\n   ###### e.g.\n\n   $(-1)_{10} = [1,0000001]_原$ -> $[1,1111110]_反$\n\n3. 补码\n\n   正数的补码还是其本身。\n\n   负数的补码是其反码+1（**会进位，但是新增的位数会被忽略**）\n\n   ###### e.g.\n\n   $(-127)_{10} = [1,1111111]_原$ -> $[1,0000000]_反$ -> $[1,0000001]_补$\n\n   $(-0)_{10} = [1,0000000]_原$ -> $[1,1111111]_反$ -> $[0,0000000]_补$（**我们规定0和-0的补码是一样的**）\n\n   - 注意一点，计算机使用补码存储数据，-0的补码和0的补码一样，也就相当于不存在-0了，而$[10000000]$这个补码没有数字占用。所以我们规定$[10000000]$表示-128（-128的二进制有8位，原本需要9位来表示）。因此，如果有一个占一字节的数组，那么它的实际存储范围会是$[-10000000,1111111]$，即$[-128,127]$。int类型（用4个字节存储）的范围为$[-2^{31},2^{31}-1]$，也是如此。\n\n#### 位运算\n\n1. 常见的位运算主要用与，或，非，异或四种运算。\n\n   将1视为true，0视为false，前三者和普通逻辑运算没有太大差别。\n\n   异或就是找不同，两个值不同时结果为1,相同则为0。\n\n   C++中，使用&表示按位或，|表示按位与，^表示异或。\n\n2. 移位\n\n   C++中的按位操作符只对于数字的最低位进行，所以要配合移位来使用。\n   左移运算符会将最左位丢弃，在最右位置补0。因此有：$n<<1=2n$\n\n   右移运算则分为有符号（如在C++中对int类型右移）和无符号（如对unsigned int右移）两种情况；右移的规则和左移类似，位于最高位的符号位不会参与右移。\n\n   因此有：$n>>1=\\lfloor n/2 \\rfloor$[^4]。\n\n   [^4]: 需要注意的是，在C++中，对负数使用右移运算，答案**向偏小的方向取整**（而整除是向0的方向——也即**绝对值**小的方向——取整），如$-3>>1=-2，-3/2=-1$\n\n#### 布尔运算\n\n在布尔运算里，用$\\vee$来表示或，用$\\land$表示与，用$\\oplus$表示异或，用$\\neg$表示取反，规则类似集合运算\n\n在其他场合，可能还会遇到使用a xor b来表示a与b异或的情况。\n\n\n\n补充：符号运算顺序一览\n\n![](https://img-blog.csdnimg.cn/9e6d8a9983e5430081e74994eddeafe3.png#pic_center)\n\n## 四 算法及复杂度分析a sd\n\n#### 排序算法\n\n| 算法           | 桶排序 | 基数排序 | 归并排序   | 快速排序   | 堆排序     | 希尔排序                   | 冒泡排序     | 选择排序 | 插入排序     |\n| -------------- | ------ | -------- | ---------- | ---------- | ---------- | -------------------------- | ------------ | -------- | ------------ |\n| 平均时间复杂度 | $O(n)$ | $O(n)$   | $O(nlogn)$ | $O(nlogn)$ | $O(nlogn)$ | $O(n^{\\frac{3}{2}})$（？） | $O(n^2)$[^5] | $O(n^2)$ | $O(n^2)$[^5] |\n| 最差时间复杂度 | $O(n)$ | $O(n)$   | $O(nlogn)$ | $O(n^2)$   | $O(nlogn)$ | $O(n^2)$                   | $O(n^2)$     | $O(n^2)$ | $O(n^2)$     |\n| 稳定性         | 不稳定 | 稳定     | 稳定       | 不稳定     | 不稳定     | 不稳定                     | 稳定         | 不稳定   | 稳定         |\n\n[^5]: 冒泡排序和插入排序的最佳复杂度可达到$O(n)$\n\n#### 其它常见数据结构的复杂度\n\n![](https://pic1.zhimg.com/v2-05c78d4c4c3e4e5b1303435fc0800238_r.jpg)\n\n## 五 树与图论\n\n#### 树\n\n1. 基本概念\n\n   - 深度：一个节点向上连到根节点的的路径上的边数\n\n   - 树的高：一棵树的深度的最大值\n\n   - 叶节点：没有子节点的节点\n   - 节点的度：\n\n2. 二叉树\n\n   - 二叉树的遍历\n\n     前/中/后序遍历都指根节点的遍历先后，除了根节点，先左后右。\n\n   - 完全二叉树\n\n     只有最下面两层结点的度数可以小于 22，且最下面一层的结点都集中在该层的最左侧\n\n     ![](https://oi-wiki.org/graph/images/tree-binary-complete.svg)\n\n   - 满二叉树\n\n     即满的二叉树（\n\n     一颗深度为h的二叉树的节点数$\\le2^n-1$，当且仅当是满二叉树时取等\n\n   - 一颗二叉树的叶子结点树一定为度为2的点的个数+1（$n_2=n_0-1$）\n\n   - 具有n个节点的完全二叉树的深度为$[log_2n]+1$\n\n#### 图论\n\n1. 基本概念\n\n   - 图分有向图和无向图两种\n   - 与一个顶点相关联的边的条数称为该顶点的度，有向图还分入度和出度\n   - 简单图：若一个图中没有自环和重边，它被称为简单图。[^6]\n   - 具有至少两个顶点的简单无向图中一定存在度相同的结点。\n   - 完全图：图中任意两点均有连边的图。\n   - 一个有n个节点的无向完全图中有$\\frac{n(n-1)}{2}$条边。\n   - 欧拉路和欧拉回路\n     - 欧拉路中有且只有两个奇点\n     - 欧拉回路中没有奇点\n\n\n[^6]: 在有向图中，a->b和a<-b不算重边\n\n2. 图的存储\n\n   - 邻接矩阵\n\n     用一个二维数组`j[a][b]`来表示从a到b的连边长（无边设为一个极大值）\n\n     空间复杂度$O(n^2)$，遍历全图复杂度$O(n^2)$，遍历一个点的出边$O(n)$。\n\n   - 邻接表\n\n     简单来说就是用一个链表把一个点指向的所有节点连在一起\n\n     ![](https://www.dotcpp.com/oj/ueditor/php/upload/image/20191211/1576070228570316.png)\n\n     ![](https://www.dotcpp.com/oj/ueditor/php/upload/image/20191211/1576070307448389.png)\n\n     空间复杂度$O(e)$，遍历全图复杂度$O(n+e)$，遍历点$u$的出边$O(d^+(u))$\n\n3. 图的最短路\n\n   - 常用求解方法：Dijkstra\n\n     - 基本原理\n\n       将结点分成两个集合：已确定最短路长度的点集（记为$S$集合）的和未确定最短路长度的点集（记为$T$集合）。一开始所有的点都属于$T$集合。\n\n       初始化$dis(s)=0$，其他点的$dis$均为$+\\infty$。\n\n       然后重复这些操作：\n\n       从$T$集合中，选取一个最短路长度最小的结点，移到$S$集合中。\n       对那些刚刚被加入$S$集合的结点的所有出边执行松弛操作。\n       直到  集合为空，算法结束。\n\n     - 时间复杂度\n\n       - 在无堆优化时，复杂度为$O(n^2+m)$\n       - 优先队列优化后，复杂度为$O(mlogm)$\n\n4. 二分图\n\n   - 二分图的一些性质\n     - 如果两个集合中的点分别染成黑色和白色，可以发现二分图中的每一条边都一定是连接一个黑色点和一个白色点；\n     - 二分图无奇环\n\n   - 二分图判定：DFS/BFS染色\n\n## 六 其它数据结构\n\n#### 栈\n\n1. 前/中/后缀表达式\n\n   - 前缀表达式\n\n     从右至左扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对他们做相应的计算，并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果。\n\n     ###### e.g.\n\n     `- * + 3 4 5 6`\n\n     1. 从右至左扫描，将6、5、4、3压入堆栈；\n       2. 遇到 + 运算符，因此弹出3和4（3为栈顶元素，4为次顶元素），计算 3+4 的值，得7，再将7入栈；\n       3. 接下来是 * 运算符，因此弹出7和5，计算 7*5=35 ，将35入栈。\n       4. 最后是 - 运算符，计算 35-6 的值，即29，得最终结果29.\n\n   - 后缀表达式\n\n     又称逆波兰表达式，和前缀表达式类似，但是将算符位于操作数之后。\n\n     求值时，从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算。并将结果入栈；重复上述过程直到表达式最右端，最后运算出的值即为表达式的结果。\n\n     ###### e.g.\n\n     `3 4 + 5 * 6 -`\n\n            1. 从左至右扫描，将3和4入栈；\n            2. 遇到运算符 + ，因此弹出4和3，计算 3+4 的值，再将7入栈；\n            3. 将5入栈；\n            4. 接下来是 * 运算符，因此弹出5和7，计算出 7*5=35，将35入栈；\n            5. 将6入栈；\n            6. 最后是 - 运算符，计算 35-6 的值，即29，由此得出最终结果。\n\n## 七 数学\n\n#### 组合数学\n\n1. 基本公式\n\n   - 排列公式：$P_n^m = A_n^m = n(n-1)(n-2)...(n-m+1) = \\frac{n!}{(n-m)!}$\n\n     特别的，$A_n^n=n!$（注意0!=1）\n\n     （为方便计算，也可记为$\\prod^m_{i=n}i$）\n\n     ###### e.g.\n\n     $A_7^4=7 \\times 6 \\times 5 \\times 4 = 840$\n\n   - 组合公式：$C_n^m = \\frac{A_n^m}{m!} = \\frac{n!}{(n-m)!}$\n\n     （为方便计算，也可记为$\\frac{\\prod^{m}_{i=n}i}{m!}$）\n\n     ###### e.g.\n\n     $C^4_7 = \\frac{7 \\times 6 \\times 5 \\times 4}{4 \\times 3 \\times 2 \\times 1} = 35$\n\n2. 计算技巧\n\n   - 特殊情况优先分类\n\n   - 插板法\n   - 隔板法\n\n   ~~高中数学学完以后再回来看觉得排列组合有意思的地方真不少，有机会把这一块做成番外~~\n\n   \n","slug":"csp-noip备战日志0-5-CSP-S初试知识点梳理","published":1,"updated":"2023-07-20T16:57:03.605Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vc00012agw4gf91ll3","content":"<h3 id=\"本文未完成绝赞摆烂中\"><em>[本文未完成，绝赞摆烂中]</em></h3>\n<h1 id=\"csp-s-初试知识点梳理\">CSP-S 初试知识点梳理</h1>\n<h2 id=\"一-数制转换\">一 数制转换</h2>\n<h4 id=\"k进制转十进制\">K进制转十进制</h4>\n<p>将原数字的每一位与其位权相乘后相加即可</p>\n<h4 id=\"十进制转k进制\">十进制转K进制</h4>\n<ul>\n<li><p>整数部分：将原数短除<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a>K，<strong>倒取</strong>余数</p></li>\n<li><p>小数部分：循坏*K并不断取产生的整数部分，<strong>顺取</strong>余数</p></li>\n</ul>\n<h6 id=\"eg.1.-173转二进制\">eg.1. 173转二进制</h6>\n<figure>\n<img src=\"https://www.runoob.com/wp-content/uploads/2018/11/210-2.png\" alt=\"\" /><figcaption>图片</figcaption>\n</figure>\n<h6 id=\"eg.2.-0.125转二进制\">eg.2. 0.125转二进制</h6>\n<p><span class=\"math inline\">\\(0.125\\times 2 = 0.25\\)</span> ·········0</p>\n<p><span class=\"math inline\">\\(0.25\\times 2 = 0.5\\)</span> ·············0</p>\n<p><span class=\"math inline\">\\(0.5\\times2 = 1\\)</span> ··················1</p>\n<p>故<span class=\"math inline\">\\((0.125)_{10}=(0.001)_{2}\\)</span></p>\n<h4 id=\"二进制转八进制十六进制\">二进制转八进制、十六进制</h4>\n<p>以小数点为界，整数部分从右向左，小数部分从左到右，以三位为一组转换为八进制，以四位为一组转换为16进制</p>\n<h6 id=\"eg.\">eg.</h6>\n<p><span class=\"math inline\">\\((1,111,010,101,101)_2 = (17255)_8\\)</span></p>\n<p><span class=\"math inline\">\\((1,101,110.101,1)_2 = (156.54)_8\\)</span> ^2fc7d2</p>\n<p><span class=\"math inline\">\\((1,1110,1010,1101)_2 = (1EAD)_{16}\\)</span></p>\n<p><span class=\"math inline\">\\((1,1110,1001.1011,1)_2 = (1E9.B8)_{16}\\)</span></p>\n<h2 id=\"二-信息编码\">二 信息编码</h2>\n<h4 id=\"ascii码\">ASCII码</h4>\n<p>ASCII码可对英文字母，数字，控制符（如换行符），通用符（如=/+）进行编码。基本ASCII码占一个字节，最高位保持为0，其余位可编码<span class=\"math inline\">\\(2^7=128\\)</span>种字符（对应编码0和127个正数<a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\" role=\"doc-noteref\"><sup>2</sup></a><a href=\"#fn3\" class=\"footnote-ref\" id=\"fnref3\" role=\"doc-noteref\"><sup>3</sup></a>）。</p>\n<p>另外还有一种扩展ASCII码，置于第一个字节之后，最高位为1，表示范围为128-255。</p>\n<p><code>A</code>的ASCII编码为<span class=\"math inline\">\\((65)_{10}\\)</span>，<code>0</code>则为<span class=\"math inline\">\\((48)_{10}\\)</span>。</p>\n<h4 id=\"中文的编码表示\">中文的编码表示</h4>\n<p>汉字使用GB码进行编码，一个汉字占两个字节，存储时两个字节最高位均置为1，可表示<span class=\"math inline\">\\(2^7 \\times 2^7 = 16384\\)</span>种字符。</p>\n<p>中文在输出时，需要通过一种字形码进行点阵绘图。一个16*16的点阵汉字需要<span class=\"math inline\">\\(16 \\times 16 \\div8=32\\)</span>个字节来储存。表示顺序为：从上到下，从左到右，8个为一字节。</p>\n<h4 id=\"哈夫曼编码\">哈夫曼编码</h4>\n<ol type=\"1\">\n<li><p>哈夫曼编码的结构基础是哈夫曼树。</p>\n<p>建树原理：每次取权值最小的两棵子树合并成一棵子树，直到最终所有的元素合并成一棵树。这棵树就是哈夫曼树</p>\n<p>（子树的权值是其叶子结点的权值之和，在哈夫曼编码中，这个权值是字符的出现次数）</p></li>\n</ol>\n<figure>\n<img src=\"https://pic3.zhimg.com/80/v2-48e3cdd3fbd1e25ce40a4205a753e24e_720w.jpg\" alt=\"\" /><figcaption>哈夫曼树</figcaption>\n</figure>\n<ol start=\"2\" type=\"1\">\n<li>哈夫曼编码利用了贪心的思想，总的来说就是将出现多的字符用尽量短的编码来表示。建好树以后，要获取每个字符的哈夫曼编码，就通过根节点遍历到对应的子节点，所经历的路径就是这个字符的编码</li>\n</ol>\n<figure>\n<img src=\"https://pic4.zhimg.com/80/v2-82b9db088f6babb04754a98f22978433_720w.jpg\" alt=\"\" /><figcaption>encoded</figcaption>\n</figure>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">字符</th>\n<th>e</th>\n<th>d</th>\n<th>b</th>\n<th>a</th>\n<th>' '</th>\n<th>c</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">编码</td>\n<td>1110</td>\n<td>1111</td>\n<td>110</td>\n<td>00</td>\n<td>01</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"三-位运算和布尔运算\">三 位运算和布尔运算</h2>\n<h4 id=\"原码反码补码\">原码，反码，补码</h4>\n<ol type=\"1\">\n<li><p>机器数和真值</p>\n<p>机器数是数字在计算机中的二进制表示形式，一般最高位表示正负（1表示负，0表示正），故8位二进制数只有7位用于存储数据。</p>\n<p>真值就是去掉最高位符号位后机器存储的真实值。如10000011的真值为3而非131（<span class=\"math inline\">\\((10000011)_2=(131)_{10}\\)</span>）</p></li>\n<li><p>原码和反码</p>\n<p>原码指的就是符号位加上真值的绝对值，也就是数字的机器储存形式。</p>\n<p>整数的反码就是其本身，负数的反码是<strong>符号位不变</strong>，其余各个数取反。</p>\n<h6 id=\"e.g.\">e.g.</h6>\n<p><span class=\"math inline\">\\((-1)_{10} = [1,0000001]_原\\)</span> -&gt; <span class=\"math inline\">\\([1,1111110]_反\\)</span></p></li>\n<li><p>补码</p>\n<p>正数的补码还是其本身。</p>\n<p>负数的补码是其反码+1（<strong>会进位，但是新增的位数会被忽略</strong>）</p>\n<h6 id=\"e.g.-1\">e.g.</h6>\n<p><span class=\"math inline\">\\((-127)_{10} = [1,1111111]_原\\)</span> -&gt; <span class=\"math inline\">\\([1,0000000]_反\\)</span> -&gt; <span class=\"math inline\">\\([1,0000001]_补\\)</span></p>\n<p><span class=\"math inline\">\\((-0)_{10} = [1,0000000]_原\\)</span> -&gt; <span class=\"math inline\">\\([1,1111111]_反\\)</span> -&gt; <span class=\"math inline\">\\([0,0000000]_补\\)</span>（<strong>我们规定0和-0的补码是一样的</strong>）</p>\n<ul>\n<li>注意一点，计算机使用补码存储数据，-0的补码和0的补码一样，也就相当于不存在-0了，而<span class=\"math inline\">\\([10000000]\\)</span>这个补码没有数字占用。所以我们规定<span class=\"math inline\">\\([10000000]\\)</span>表示-128（-128的二进制有8位，原本需要9位来表示）。因此，如果有一个占一字节的数组，那么它的实际存储范围会是<span class=\"math inline\">\\([-10000000,1111111]\\)</span>，即<span class=\"math inline\">\\([-128,127]\\)</span>。int类型（用4个字节存储）的范围为<span class=\"math inline\">\\([-2^{31},2^{31}-1]\\)</span>，也是如此。</li>\n</ul></li>\n</ol>\n<h4 id=\"位运算\">位运算</h4>\n<ol type=\"1\">\n<li><p>常见的位运算主要用与，或，非，异或四种运算。</p>\n<p>将1视为true，0视为false，前三者和普通逻辑运算没有太大差别。</p>\n<p>异或就是找不同，两个值不同时结果为1,相同则为0。</p>\n<p>C++中，使用&amp;表示按位或，|表示按位与，^表示异或。</p></li>\n<li><p>移位</p>\n<p>C++中的按位操作符只对于数字的最低位进行，所以要配合移位来使用。 左移运算符会将最左位丢弃，在最右位置补0。因此有：<span class=\"math inline\">\\(n&lt;&lt;1=2n\\)</span></p>\n<p>右移运算则分为有符号（如在C++中对int类型右移）和无符号（如对unsigned int右移）两种情况；右移的规则和左移类似，位于最高位的符号位不会参与右移。</p>\n<p>因此有：<span class=\"math inline\">\\(n&gt;&gt;1=\\lfloor n/2 \\rfloor\\)</span><a href=\"#fn4\" class=\"footnote-ref\" id=\"fnref4\" role=\"doc-noteref\"><sup>4</sup></a>。</p></li>\n</ol>\n<h4 id=\"布尔运算\">布尔运算</h4>\n<p>在布尔运算里，用<span class=\"math inline\">\\(\\vee\\)</span>来表示或，用<span class=\"math inline\">\\(\\land\\)</span>表示与，用<span class=\"math inline\">\\(\\oplus\\)</span>表示异或，用<span class=\"math inline\">\\(\\neg\\)</span>表示取反，规则类似集合运算</p>\n<p>在其他场合，可能还会遇到使用a xor b来表示a与b异或的情况。</p>\n<p>补充：符号运算顺序一览</p>\n<p><img src=\"https://img-blog.csdnimg.cn/9e6d8a9983e5430081e74994eddeafe3.png#pic_center\" /></p>\n<h2 id=\"四-算法及复杂度分析a-sd\">四 算法及复杂度分析a sd</h2>\n<h4 id=\"排序算法\">排序算法</h4>\n<table>\n<colgroup>\n<col style=\"width: 12%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 8%\" />\n<col style=\"width: 8%\" />\n<col style=\"width: 8%\" />\n<col style=\"width: 22%\" />\n<col style=\"width: 10%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 10%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>算法</th>\n<th>桶排序</th>\n<th>基数排序</th>\n<th>归并排序</th>\n<th>快速排序</th>\n<th>堆排序</th>\n<th>希尔排序</th>\n<th>冒泡排序</th>\n<th>选择排序</th>\n<th>插入排序</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>平均时间复杂度</td>\n<td><span class=\"math inline\">\\(O(n)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n)\\)</span></td>\n<td><span class=\"math inline\">\\(O(nlogn)\\)</span></td>\n<td><span class=\"math inline\">\\(O(nlogn)\\)</span></td>\n<td><span class=\"math inline\">\\(O(nlogn)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n^{\\frac{3}{2}})\\)</span>（？）</td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span><a href=\"#fn5\" class=\"footnote-ref\" id=\"fnref5\" role=\"doc-noteref\"><sup>5</sup></a></td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span><a href=\"#fn6\" class=\"footnote-ref\" id=\"fnref6\" role=\"doc-noteref\"><sup>6</sup></a></td>\n</tr>\n<tr class=\"even\">\n<td>最差时间复杂度</td>\n<td><span class=\"math inline\">\\(O(n)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n)\\)</span></td>\n<td><span class=\"math inline\">\\(O(nlogn)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span></td>\n<td><span class=\"math inline\">\\(O(nlogn)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td>稳定性</td>\n<td>不稳定</td>\n<td>稳定</td>\n<td>稳定</td>\n<td>不稳定</td>\n<td>不稳定</td>\n<td>不稳定</td>\n<td>稳定</td>\n<td>不稳定</td>\n<td>稳定</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"其它常见数据结构的复杂度\">其它常见数据结构的复杂度</h4>\n<p><img src=\"https://pic1.zhimg.com/v2-05c78d4c4c3e4e5b1303435fc0800238_r.jpg\" /></p>\n<h2 id=\"五-树与图论\">五 树与图论</h2>\n<h4 id=\"树\">树</h4>\n<ol type=\"1\">\n<li><p>基本概念</p>\n<ul>\n<li><p>深度：一个节点向上连到根节点的的路径上的边数</p></li>\n<li><p>树的高：一棵树的深度的最大值</p></li>\n<li><p>叶节点：没有子节点的节点</p></li>\n<li><p>节点的度：</p></li>\n</ul></li>\n<li><p>二叉树</p>\n<ul>\n<li><p>二叉树的遍历</p>\n<p>前/中/后序遍历都指根节点的遍历先后，除了根节点，先左后右。</p></li>\n<li><p>完全二叉树</p>\n<p>只有最下面两层结点的度数可以小于 22，且最下面一层的结点都集中在该层的最左侧</p>\n<p><img src=\"https://oi-wiki.org/graph/images/tree-binary-complete.svg\" /></p></li>\n<li><p>满二叉树</p>\n<p>即满的二叉树（</p>\n<p>一颗深度为h的二叉树的节点数<span class=\"math inline\">\\(\\le2^n-1\\)</span>，当且仅当是满二叉树时取等</p></li>\n<li><p>一颗二叉树的叶子结点树一定为度为2的点的个数+1（<span class=\"math inline\">\\(n_2=n_0-1\\)</span>）</p></li>\n<li><p>具有n个节点的完全二叉树的深度为<span class=\"math inline\">\\([log_2n]+1\\)</span></p></li>\n</ul></li>\n</ol>\n<h4 id=\"图论\">图论</h4>\n<ol type=\"1\">\n<li><p>基本概念</p>\n<ul>\n<li>图分有向图和无向图两种</li>\n<li>与一个顶点相关联的边的条数称为该顶点的度，有向图还分入度和出度</li>\n<li>简单图：若一个图中没有自环和重边，它被称为简单图。<a href=\"#fn7\" class=\"footnote-ref\" id=\"fnref7\" role=\"doc-noteref\"><sup>7</sup></a></li>\n<li>具有至少两个顶点的简单无向图中一定存在度相同的结点。</li>\n<li>完全图：图中任意两点均有连边的图。</li>\n<li>一个有n个节点的无向完全图中有<span class=\"math inline\">\\(\\frac{n(n-1)}{2}\\)</span>条边。</li>\n<li>欧拉路和欧拉回路\n<ul>\n<li>欧拉路中有且只有两个奇点</li>\n<li>欧拉回路中没有奇点</li>\n</ul></li>\n</ul></li>\n</ol>\n<ol start=\"2\" type=\"1\">\n<li><p>图的存储</p>\n<ul>\n<li><p>邻接矩阵</p>\n<p>用一个二维数组<code>j[a][b]</code>来表示从a到b的连边长（无边设为一个极大值）</p>\n<p>空间复杂度<span class=\"math inline\">\\(O(n^2)\\)</span>，遍历全图复杂度<span class=\"math inline\">\\(O(n^2)\\)</span>，遍历一个点的出边<span class=\"math inline\">\\(O(n)\\)</span>。</p></li>\n<li><p>邻接表</p>\n<p>简单来说就是用一个链表把一个点指向的所有节点连在一起</p>\n<p><img src=\"https://www.dotcpp.com/oj/ueditor/php/upload/image/20191211/1576070228570316.png\" /></p>\n<p><img src=\"https://www.dotcpp.com/oj/ueditor/php/upload/image/20191211/1576070307448389.png\" /></p>\n<p>空间复杂度<span class=\"math inline\">\\(O(e)\\)</span>，遍历全图复杂度<span class=\"math inline\">\\(O(n+e)\\)</span>，遍历点<span class=\"math inline\">\\(u\\)</span>的出边<span class=\"math inline\">\\(O(d^+(u))\\)</span></p></li>\n</ul></li>\n<li><p>图的最短路</p>\n<ul>\n<li><p>常用求解方法：Dijkstra</p>\n<ul>\n<li><p>基本原理</p>\n<p>将结点分成两个集合：已确定最短路长度的点集（记为<span class=\"math inline\">\\(S\\)</span>集合）的和未确定最短路长度的点集（记为<span class=\"math inline\">\\(T\\)</span>集合）。一开始所有的点都属于<span class=\"math inline\">\\(T\\)</span>集合。</p>\n<p>初始化<span class=\"math inline\">\\(dis(s)=0\\)</span>，其他点的<span class=\"math inline\">\\(dis\\)</span>均为<span class=\"math inline\">\\(+\\infty\\)</span>。</p>\n<p>然后重复这些操作：</p>\n<p>从<span class=\"math inline\">\\(T\\)</span>集合中，选取一个最短路长度最小的结点，移到<span class=\"math inline\">\\(S\\)</span>集合中。 对那些刚刚被加入<span class=\"math inline\">\\(S\\)</span>集合的结点的所有出边执行松弛操作。 直到 集合为空，算法结束。</p></li>\n<li><p>时间复杂度</p>\n<ul>\n<li>在无堆优化时，复杂度为<span class=\"math inline\">\\(O(n^2+m)\\)</span></li>\n<li>优先队列优化后，复杂度为<span class=\"math inline\">\\(O(mlogm)\\)</span></li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><p>二分图</p>\n<ul>\n<li>二分图的一些性质\n<ul>\n<li>如果两个集合中的点分别染成黑色和白色，可以发现二分图中的每一条边都一定是连接一个黑色点和一个白色点；</li>\n<li>二分图无奇环</li>\n</ul></li>\n<li>二分图判定：DFS/BFS染色</li>\n</ul></li>\n</ol>\n<h2 id=\"六-其它数据结构\">六 其它数据结构</h2>\n<h4 id=\"栈\">栈</h4>\n<ol type=\"1\">\n<li><p>前/中/后缀表达式</p>\n<ul>\n<li><p>前缀表达式</p>\n<p>从右至左扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对他们做相应的计算，并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果。</p>\n<h6 id=\"e.g.-2\">e.g.</h6>\n<p>`- * + 3 4 5 6`</p>\n<ol type=\"1\">\n<li>从右至左扫描，将6、5、4、3压入堆栈；</li>\n<li>遇到 + 运算符，因此弹出3和4（3为栈顶元素，4为次顶元素），计算 3+4 的值，得7，再将7入栈；</li>\n<li>接下来是 * 运算符，因此弹出7和5，计算 7*5=35 ，将35入栈。</li>\n<li>最后是 - 运算符，计算 35-6 的值，即29，得最终结果29.</li>\n</ol></li>\n<li><p>后缀表达式</p>\n<p>又称逆波兰表达式，和前缀表达式类似，但是将算符位于操作数之后。</p>\n<p>求值时，从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算。并将结果入栈；重复上述过程直到表达式最右端，最后运算出的值即为表达式的结果。</p>\n<h6 id=\"e.g.-3\">e.g.</h6>\n<p><code>3 4 + 5 * 6 -</code></p>\n<pre><code>   1. 从左至右扫描，将3和4入栈；\n   2. 遇到运算符 + ，因此弹出4和3，计算 3+4 的值，再将7入栈；\n   3. 将5入栈；\n   4. 接下来是 * 运算符，因此弹出5和7，计算出 7*5=35，将35入栈；\n   5. 将6入栈；\n   6. 最后是 - 运算符，计算 35-6 的值，即29，由此得出最终结果。</code></pre></li>\n</ul></li>\n</ol>\n<h2 id=\"七-数学\">七 数学</h2>\n<h4 id=\"组合数学\">组合数学</h4>\n<ol type=\"1\">\n<li><p>基本公式</p>\n<ul>\n<li><p>排列公式：<span class=\"math inline\">\\(P_n^m = A_n^m = n(n-1)(n-2)...(n-m+1) = \\frac{n!}{(n-m)!}\\)</span></p>\n<p>特别的，<span class=\"math inline\">\\(A_n^n=n!\\)</span>（注意0!=1）</p>\n<p>（为方便计算，也可记为<span class=\"math inline\">\\(\\prod^m_{i=n}i\\)</span>）</p>\n<h6 id=\"e.g.-4\">e.g.</h6>\n<p><span class=\"math inline\">\\(A_7^4=7 \\times 6 \\times 5 \\times 4 = 840\\)</span></p></li>\n<li><p>组合公式：<span class=\"math inline\">\\(C_n^m = \\frac{A_n^m}{m!} = \\frac{n!}{(n-m)!}\\)</span></p>\n<p>（为方便计算，也可记为<span class=\"math inline\">\\(\\frac{\\prod^{m}_{i=n}i}{m!}\\)</span>）</p>\n<h6 id=\"e.g.-5\">e.g.</h6>\n<p><span class=\"math inline\">\\(C^4_7 = \\frac{7 \\times 6 \\times 5 \\times 4}{4 \\times 3 \\times 2 \\times 1} = 35\\)</span></p></li>\n</ul></li>\n<li><p>计算技巧</p>\n<ul>\n<li><p>特殊情况优先分类</p></li>\n<li><p>插板法</p></li>\n<li><p>隔板法</p></li>\n</ul>\n<p><del>高中数学学完以后再回来看觉得排列组合有意思的地方真不少，有机会把这一块做成番外</del></p></li>\n</ol>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\" role=\"doc-endnote\"><p>此处除法指整数除法（可以认为是去掉了余数）<a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn2\" role=\"doc-endnote\"><p>仔细看好，<span class=\"math inline\">\\((1111111)_2=(127)_{10}=2^7-1，(10000000)_2=(128)_{10}=2^7\\)</span><a href=\"#fnref2\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn3\" role=\"doc-endnote\"><p>ASCII码为0的符号是null，的确存在<a href=\"#fnref3\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn4\" role=\"doc-endnote\"><p>需要注意的是，在C++中，对负数使用右移运算，答案<strong>向偏小的方向取整</strong>（而整除是向0的方向——也即<strong>绝对值</strong>小的方向——取整），如<span class=\"math inline\">\\(-3&gt;&gt;1=-2，-3/2=-1\\)</span><a href=\"#fnref4\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn5\" role=\"doc-endnote\"><p>冒泡排序和插入排序的最佳复杂度可达到<span class=\"math inline\">\\(O(n)\\)</span><a href=\"#fnref5\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn6\" role=\"doc-endnote\"><p>冒泡排序和插入排序的最佳复杂度可达到<span class=\"math inline\">\\(O(n)\\)</span><a href=\"#fnref6\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn7\" role=\"doc-endnote\"><p>在有向图中，a-&gt;b和a&lt;-b不算重边<a href=\"#fnref7\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</section>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"<h3 id=\"本文未完成绝赞摆烂中\"><em>[本文未完成，绝赞摆烂中]</em></h3>\n<h1 id=\"csp-s-初试知识点梳理\">CSP-S 初试知识点梳理</h1>\n<h2 id=\"一-数制转换\">一 数制转换</h2>\n<h4 id=\"k进制转十进制\">K进制转十进制</h4>\n<p>将原数字的每一位与其位权相乘后相加即可</p>\n<h4 id=\"十进制转k进制\">十进制转K进制</h4>\n<ul>\n<li><p>整数部分：将原数短除<a href=\"#fn1\" class=\"footnote-ref\" id=\"fnref1\" role=\"doc-noteref\"><sup>1</sup></a>K，<strong>倒取</strong>余数</p></li>\n<li><p>小数部分：循坏*K并不断取产生的整数部分，<strong>顺取</strong>余数</p></li>\n</ul>\n<h6 id=\"eg.1.-173转二进制\">eg.1. 173转二进制</h6>\n<figure>\n<img src=\"https://www.runoob.com/wp-content/uploads/2018/11/210-2.png\" alt=\"\" /><figcaption>图片</figcaption>\n</figure>\n<h6 id=\"eg.2.-0.125转二进制\">eg.2. 0.125转二进制</h6>\n<p><span class=\"math inline\">\\(0.125\\times 2 = 0.25\\)</span> ·········0</p>\n<p><span class=\"math inline\">\\(0.25\\times 2 = 0.5\\)</span> ·············0</p>\n<p><span class=\"math inline\">\\(0.5\\times2 = 1\\)</span> ··················1</p>\n<p>故<span class=\"math inline\">\\((0.125)_{10}=(0.001)_{2}\\)</span></p>\n<h4 id=\"二进制转八进制十六进制\">二进制转八进制、十六进制</h4>\n<p>以小数点为界，整数部分从右向左，小数部分从左到右，以三位为一组转换为八进制，以四位为一组转换为16进制</p>\n<h6 id=\"eg.\">eg.</h6>\n<p><span class=\"math inline\">\\((1,111,010,101,101)_2 = (17255)_8\\)</span></p>\n<p><span class=\"math inline\">\\((1,101,110.101,1)_2 = (156.54)_8\\)</span> ^2fc7d2</p>\n<p><span class=\"math inline\">\\((1,1110,1010,1101)_2 = (1EAD)_{16}\\)</span></p>\n<p><span class=\"math inline\">\\((1,1110,1001.1011,1)_2 = (1E9.B8)_{16}\\)</span></p>\n<h2 id=\"二-信息编码\">二 信息编码</h2>\n<h4 id=\"ascii码\">ASCII码</h4>\n<p>ASCII码可对英文字母，数字，控制符（如换行符），通用符（如=/+）进行编码。基本ASCII码占一个字节，最高位保持为0，其余位可编码<span class=\"math inline\">\\(2^7=128\\)</span>种字符（对应编码0和127个正数<a href=\"#fn2\" class=\"footnote-ref\" id=\"fnref2\" role=\"doc-noteref\"><sup>2</sup></a><a href=\"#fn3\" class=\"footnote-ref\" id=\"fnref3\" role=\"doc-noteref\"><sup>3</sup></a>）。</p>\n<p>另外还有一种扩展ASCII码，置于第一个字节之后，最高位为1，表示范围为128-255。</p>\n<p><code>A</code>的ASCII编码为<span class=\"math inline\">\\((65)_{10}\\)</span>，<code>0</code>则为<span class=\"math inline\">\\((48)_{10}\\)</span>。</p>\n<h4 id=\"中文的编码表示\">中文的编码表示</h4>\n<p>汉字使用GB码进行编码，一个汉字占两个字节，存储时两个字节最高位均置为1，可表示<span class=\"math inline\">\\(2^7 \\times 2^7 = 16384\\)</span>种字符。</p>\n<p>中文在输出时，需要通过一种字形码进行点阵绘图。一个16*16的点阵汉字需要<span class=\"math inline\">\\(16 \\times 16 \\div8=32\\)</span>个字节来储存。表示顺序为：从上到下，从左到右，8个为一字节。</p>\n<h4 id=\"哈夫曼编码\">哈夫曼编码</h4>\n<ol type=\"1\">\n<li><p>哈夫曼编码的结构基础是哈夫曼树。</p>\n<p>建树原理：每次取权值最小的两棵子树合并成一棵子树，直到最终所有的元素合并成一棵树。这棵树就是哈夫曼树</p>\n<p>（子树的权值是其叶子结点的权值之和，在哈夫曼编码中，这个权值是字符的出现次数）</p></li>\n</ol>\n<figure>\n<img src=\"https://pic3.zhimg.com/80/v2-48e3cdd3fbd1e25ce40a4205a753e24e_720w.jpg\" alt=\"\" /><figcaption>哈夫曼树</figcaption>\n</figure>\n<ol start=\"2\" type=\"1\">\n<li>哈夫曼编码利用了贪心的思想，总的来说就是将出现多的字符用尽量短的编码来表示。建好树以后，要获取每个字符的哈夫曼编码，就通过根节点遍历到对应的子节点，所经历的路径就是这个字符的编码</li>\n</ol>\n<figure>\n<img src=\"https://pic4.zhimg.com/80/v2-82b9db088f6babb04754a98f22978433_720w.jpg\" alt=\"\" /><figcaption>encoded</figcaption>\n</figure>\n<table>\n<thead>\n<tr class=\"header\">\n<th style=\"text-align: left;\">字符</th>\n<th>e</th>\n<th>d</th>\n<th>b</th>\n<th>a</th>\n<th>' '</th>\n<th>c</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td style=\"text-align: left;\">编码</td>\n<td>1110</td>\n<td>1111</td>\n<td>110</td>\n<td>00</td>\n<td>01</td>\n<td>10</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"三-位运算和布尔运算\">三 位运算和布尔运算</h2>\n<h4 id=\"原码反码补码\">原码，反码，补码</h4>\n<ol type=\"1\">\n<li><p>机器数和真值</p>\n<p>机器数是数字在计算机中的二进制表示形式，一般最高位表示正负（1表示负，0表示正），故8位二进制数只有7位用于存储数据。</p>\n<p>真值就是去掉最高位符号位后机器存储的真实值。如10000011的真值为3而非131（<span class=\"math inline\">\\((10000011)_2=(131)_{10}\\)</span>）</p></li>\n<li><p>原码和反码</p>\n<p>原码指的就是符号位加上真值的绝对值，也就是数字的机器储存形式。</p>\n<p>整数的反码就是其本身，负数的反码是<strong>符号位不变</strong>，其余各个数取反。</p>\n<h6 id=\"e.g.\">e.g.</h6>\n<p><span class=\"math inline\">\\((-1)_{10} = [1,0000001]_原\\)</span> -&gt; <span class=\"math inline\">\\([1,1111110]_反\\)</span></p></li>\n<li><p>补码</p>\n<p>正数的补码还是其本身。</p>\n<p>负数的补码是其反码+1（<strong>会进位，但是新增的位数会被忽略</strong>）</p>\n<h6 id=\"e.g.-1\">e.g.</h6>\n<p><span class=\"math inline\">\\((-127)_{10} = [1,1111111]_原\\)</span> -&gt; <span class=\"math inline\">\\([1,0000000]_反\\)</span> -&gt; <span class=\"math inline\">\\([1,0000001]_补\\)</span></p>\n<p><span class=\"math inline\">\\((-0)_{10} = [1,0000000]_原\\)</span> -&gt; <span class=\"math inline\">\\([1,1111111]_反\\)</span> -&gt; <span class=\"math inline\">\\([0,0000000]_补\\)</span>（<strong>我们规定0和-0的补码是一样的</strong>）</p>\n<ul>\n<li>注意一点，计算机使用补码存储数据，-0的补码和0的补码一样，也就相当于不存在-0了，而<span class=\"math inline\">\\([10000000]\\)</span>这个补码没有数字占用。所以我们规定<span class=\"math inline\">\\([10000000]\\)</span>表示-128（-128的二进制有8位，原本需要9位来表示）。因此，如果有一个占一字节的数组，那么它的实际存储范围会是<span class=\"math inline\">\\([-10000000,1111111]\\)</span>，即<span class=\"math inline\">\\([-128,127]\\)</span>。int类型（用4个字节存储）的范围为<span class=\"math inline\">\\([-2^{31},2^{31}-1]\\)</span>，也是如此。</li>\n</ul></li>\n</ol>\n<h4 id=\"位运算\">位运算</h4>\n<ol type=\"1\">\n<li><p>常见的位运算主要用与，或，非，异或四种运算。</p>\n<p>将1视为true，0视为false，前三者和普通逻辑运算没有太大差别。</p>\n<p>异或就是找不同，两个值不同时结果为1,相同则为0。</p>\n<p>C++中，使用&amp;表示按位或，|表示按位与，^表示异或。</p></li>\n<li><p>移位</p>\n<p>C++中的按位操作符只对于数字的最低位进行，所以要配合移位来使用。 左移运算符会将最左位丢弃，在最右位置补0。因此有：<span class=\"math inline\">\\(n&lt;&lt;1=2n\\)</span></p>\n<p>右移运算则分为有符号（如在C++中对int类型右移）和无符号（如对unsigned int右移）两种情况；右移的规则和左移类似，位于最高位的符号位不会参与右移。</p>\n<p>因此有：<span class=\"math inline\">\\(n&gt;&gt;1=\\lfloor n/2 \\rfloor\\)</span><a href=\"#fn4\" class=\"footnote-ref\" id=\"fnref4\" role=\"doc-noteref\"><sup>4</sup></a>。</p></li>\n</ol>\n<h4 id=\"布尔运算\">布尔运算</h4>\n<p>在布尔运算里，用<span class=\"math inline\">\\(\\vee\\)</span>来表示或，用<span class=\"math inline\">\\(\\land\\)</span>表示与，用<span class=\"math inline\">\\(\\oplus\\)</span>表示异或，用<span class=\"math inline\">\\(\\neg\\)</span>表示取反，规则类似集合运算</p>\n<p>在其他场合，可能还会遇到使用a xor b来表示a与b异或的情况。</p>\n<p>补充：符号运算顺序一览</p>\n<p><img src=\"https://img-blog.csdnimg.cn/9e6d8a9983e5430081e74994eddeafe3.png#pic_center\" /></p>\n<h2 id=\"四-算法及复杂度分析a-sd\">四 算法及复杂度分析a sd</h2>\n<h4 id=\"排序算法\">排序算法</h4>\n<table>\n<colgroup>\n<col style=\"width: 12%\" />\n<col style=\"width: 5%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 8%\" />\n<col style=\"width: 8%\" />\n<col style=\"width: 8%\" />\n<col style=\"width: 22%\" />\n<col style=\"width: 10%\" />\n<col style=\"width: 6%\" />\n<col style=\"width: 10%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>算法</th>\n<th>桶排序</th>\n<th>基数排序</th>\n<th>归并排序</th>\n<th>快速排序</th>\n<th>堆排序</th>\n<th>希尔排序</th>\n<th>冒泡排序</th>\n<th>选择排序</th>\n<th>插入排序</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>平均时间复杂度</td>\n<td><span class=\"math inline\">\\(O(n)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n)\\)</span></td>\n<td><span class=\"math inline\">\\(O(nlogn)\\)</span></td>\n<td><span class=\"math inline\">\\(O(nlogn)\\)</span></td>\n<td><span class=\"math inline\">\\(O(nlogn)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n^{\\frac{3}{2}})\\)</span>（？）</td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span><a href=\"#fn5\" class=\"footnote-ref\" id=\"fnref5\" role=\"doc-noteref\"><sup>5</sup></a></td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span><a href=\"#fn6\" class=\"footnote-ref\" id=\"fnref6\" role=\"doc-noteref\"><sup>6</sup></a></td>\n</tr>\n<tr class=\"even\">\n<td>最差时间复杂度</td>\n<td><span class=\"math inline\">\\(O(n)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n)\\)</span></td>\n<td><span class=\"math inline\">\\(O(nlogn)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span></td>\n<td><span class=\"math inline\">\\(O(nlogn)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span></td>\n<td><span class=\"math inline\">\\(O(n^2)\\)</span></td>\n</tr>\n<tr class=\"odd\">\n<td>稳定性</td>\n<td>不稳定</td>\n<td>稳定</td>\n<td>稳定</td>\n<td>不稳定</td>\n<td>不稳定</td>\n<td>不稳定</td>\n<td>稳定</td>\n<td>不稳定</td>\n<td>稳定</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"其它常见数据结构的复杂度\">其它常见数据结构的复杂度</h4>\n<p><img src=\"https://pic1.zhimg.com/v2-05c78d4c4c3e4e5b1303435fc0800238_r.jpg\" /></p>\n<h2 id=\"五-树与图论\">五 树与图论</h2>\n<h4 id=\"树\">树</h4>\n<ol type=\"1\">\n<li><p>基本概念</p>\n<ul>\n<li><p>深度：一个节点向上连到根节点的的路径上的边数</p></li>\n<li><p>树的高：一棵树的深度的最大值</p></li>\n<li><p>叶节点：没有子节点的节点</p></li>\n<li><p>节点的度：</p></li>\n</ul></li>\n<li><p>二叉树</p>\n<ul>\n<li><p>二叉树的遍历</p>\n<p>前/中/后序遍历都指根节点的遍历先后，除了根节点，先左后右。</p></li>\n<li><p>完全二叉树</p>\n<p>只有最下面两层结点的度数可以小于 22，且最下面一层的结点都集中在该层的最左侧</p>\n<p><img src=\"https://oi-wiki.org/graph/images/tree-binary-complete.svg\" /></p></li>\n<li><p>满二叉树</p>\n<p>即满的二叉树（</p>\n<p>一颗深度为h的二叉树的节点数<span class=\"math inline\">\\(\\le2^n-1\\)</span>，当且仅当是满二叉树时取等</p></li>\n<li><p>一颗二叉树的叶子结点树一定为度为2的点的个数+1（<span class=\"math inline\">\\(n_2=n_0-1\\)</span>）</p></li>\n<li><p>具有n个节点的完全二叉树的深度为<span class=\"math inline\">\\([log_2n]+1\\)</span></p></li>\n</ul></li>\n</ol>\n<h4 id=\"图论\">图论</h4>\n<ol type=\"1\">\n<li><p>基本概念</p>\n<ul>\n<li>图分有向图和无向图两种</li>\n<li>与一个顶点相关联的边的条数称为该顶点的度，有向图还分入度和出度</li>\n<li>简单图：若一个图中没有自环和重边，它被称为简单图。<a href=\"#fn7\" class=\"footnote-ref\" id=\"fnref7\" role=\"doc-noteref\"><sup>7</sup></a></li>\n<li>具有至少两个顶点的简单无向图中一定存在度相同的结点。</li>\n<li>完全图：图中任意两点均有连边的图。</li>\n<li>一个有n个节点的无向完全图中有<span class=\"math inline\">\\(\\frac{n(n-1)}{2}\\)</span>条边。</li>\n<li>欧拉路和欧拉回路\n<ul>\n<li>欧拉路中有且只有两个奇点</li>\n<li>欧拉回路中没有奇点</li>\n</ul></li>\n</ul></li>\n</ol>\n<ol start=\"2\" type=\"1\">\n<li><p>图的存储</p>\n<ul>\n<li><p>邻接矩阵</p>\n<p>用一个二维数组<code>j[a][b]</code>来表示从a到b的连边长（无边设为一个极大值）</p>\n<p>空间复杂度<span class=\"math inline\">\\(O(n^2)\\)</span>，遍历全图复杂度<span class=\"math inline\">\\(O(n^2)\\)</span>，遍历一个点的出边<span class=\"math inline\">\\(O(n)\\)</span>。</p></li>\n<li><p>邻接表</p>\n<p>简单来说就是用一个链表把一个点指向的所有节点连在一起</p>\n<p><img src=\"https://www.dotcpp.com/oj/ueditor/php/upload/image/20191211/1576070228570316.png\" /></p>\n<p><img src=\"https://www.dotcpp.com/oj/ueditor/php/upload/image/20191211/1576070307448389.png\" /></p>\n<p>空间复杂度<span class=\"math inline\">\\(O(e)\\)</span>，遍历全图复杂度<span class=\"math inline\">\\(O(n+e)\\)</span>，遍历点<span class=\"math inline\">\\(u\\)</span>的出边<span class=\"math inline\">\\(O(d^+(u))\\)</span></p></li>\n</ul></li>\n<li><p>图的最短路</p>\n<ul>\n<li><p>常用求解方法：Dijkstra</p>\n<ul>\n<li><p>基本原理</p>\n<p>将结点分成两个集合：已确定最短路长度的点集（记为<span class=\"math inline\">\\(S\\)</span>集合）的和未确定最短路长度的点集（记为<span class=\"math inline\">\\(T\\)</span>集合）。一开始所有的点都属于<span class=\"math inline\">\\(T\\)</span>集合。</p>\n<p>初始化<span class=\"math inline\">\\(dis(s)=0\\)</span>，其他点的<span class=\"math inline\">\\(dis\\)</span>均为<span class=\"math inline\">\\(+\\infty\\)</span>。</p>\n<p>然后重复这些操作：</p>\n<p>从<span class=\"math inline\">\\(T\\)</span>集合中，选取一个最短路长度最小的结点，移到<span class=\"math inline\">\\(S\\)</span>集合中。 对那些刚刚被加入<span class=\"math inline\">\\(S\\)</span>集合的结点的所有出边执行松弛操作。 直到 集合为空，算法结束。</p></li>\n<li><p>时间复杂度</p>\n<ul>\n<li>在无堆优化时，复杂度为<span class=\"math inline\">\\(O(n^2+m)\\)</span></li>\n<li>优先队列优化后，复杂度为<span class=\"math inline\">\\(O(mlogm)\\)</span></li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li><p>二分图</p>\n<ul>\n<li>二分图的一些性质\n<ul>\n<li>如果两个集合中的点分别染成黑色和白色，可以发现二分图中的每一条边都一定是连接一个黑色点和一个白色点；</li>\n<li>二分图无奇环</li>\n</ul></li>\n<li>二分图判定：DFS/BFS染色</li>\n</ul></li>\n</ol>\n<h2 id=\"六-其它数据结构\">六 其它数据结构</h2>\n<h4 id=\"栈\">栈</h4>\n<ol type=\"1\">\n<li><p>前/中/后缀表达式</p>\n<ul>\n<li><p>前缀表达式</p>\n<p>从右至左扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对他们做相应的计算，并将结果入栈；重复上述过程直到表达式最左端，最后运算得出的值即为表达式的结果。</p>\n<h6 id=\"e.g.-2\">e.g.</h6>\n<p>`- * + 3 4 5 6`</p>\n<ol type=\"1\">\n<li>从右至左扫描，将6、5、4、3压入堆栈；</li>\n<li>遇到 + 运算符，因此弹出3和4（3为栈顶元素，4为次顶元素），计算 3+4 的值，得7，再将7入栈；</li>\n<li>接下来是 * 运算符，因此弹出7和5，计算 7*5=35 ，将35入栈。</li>\n<li>最后是 - 运算符，计算 35-6 的值，即29，得最终结果29.</li>\n</ol></li>\n<li><p>后缀表达式</p>\n<p>又称逆波兰表达式，和前缀表达式类似，但是将算符位于操作数之后。</p>\n<p>求值时，从左至右扫描表达式，遇到数字时，将数字压入堆栈，遇到运算符时，弹出栈顶的两个数，用运算符对它们做相应的计算。并将结果入栈；重复上述过程直到表达式最右端，最后运算出的值即为表达式的结果。</p>\n<h6 id=\"e.g.-3\">e.g.</h6>\n<p><code>3 4 + 5 * 6 -</code></p>\n<pre><code>   1. 从左至右扫描，将3和4入栈；\n   2. 遇到运算符 + ，因此弹出4和3，计算 3+4 的值，再将7入栈；\n   3. 将5入栈；\n   4. 接下来是 * 运算符，因此弹出5和7，计算出 7*5=35，将35入栈；\n   5. 将6入栈；\n   6. 最后是 - 运算符，计算 35-6 的值，即29，由此得出最终结果。</code></pre></li>\n</ul></li>\n</ol>\n<h2 id=\"七-数学\">七 数学</h2>\n<h4 id=\"组合数学\">组合数学</h4>\n<ol type=\"1\">\n<li><p>基本公式</p>\n<ul>\n<li><p>排列公式：<span class=\"math inline\">\\(P_n^m = A_n^m = n(n-1)(n-2)...(n-m+1) = \\frac{n!}{(n-m)!}\\)</span></p>\n<p>特别的，<span class=\"math inline\">\\(A_n^n=n!\\)</span>（注意0!=1）</p>\n<p>（为方便计算，也可记为<span class=\"math inline\">\\(\\prod^m_{i=n}i\\)</span>）</p>\n<h6 id=\"e.g.-4\">e.g.</h6>\n<p><span class=\"math inline\">\\(A_7^4=7 \\times 6 \\times 5 \\times 4 = 840\\)</span></p></li>\n<li><p>组合公式：<span class=\"math inline\">\\(C_n^m = \\frac{A_n^m}{m!} = \\frac{n!}{(n-m)!}\\)</span></p>\n<p>（为方便计算，也可记为<span class=\"math inline\">\\(\\frac{\\prod^{m}_{i=n}i}{m!}\\)</span>）</p>\n<h6 id=\"e.g.-5\">e.g.</h6>\n<p><span class=\"math inline\">\\(C^4_7 = \\frac{7 \\times 6 \\times 5 \\times 4}{4 \\times 3 \\times 2 \\times 1} = 35\\)</span></p></li>\n</ul></li>\n<li><p>计算技巧</p>\n<ul>\n<li><p>特殊情况优先分类</p></li>\n<li><p>插板法</p></li>\n<li><p>隔板法</p></li>\n</ul>\n<p><del>高中数学学完以后再回来看觉得排列组合有意思的地方真不少，有机会把这一块做成番外</del></p></li>\n</ol>\n<section class=\"footnotes\" role=\"doc-endnotes\">\n<hr />\n<ol>\n<li id=\"fn1\" role=\"doc-endnote\"><p>此处除法指整数除法（可以认为是去掉了余数）<a href=\"#fnref1\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn2\" role=\"doc-endnote\"><p>仔细看好，<span class=\"math inline\">\\((1111111)_2=(127)_{10}=2^7-1，(10000000)_2=(128)_{10}=2^7\\)</span><a href=\"#fnref2\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn3\" role=\"doc-endnote\"><p>ASCII码为0的符号是null，的确存在<a href=\"#fnref3\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn4\" role=\"doc-endnote\"><p>需要注意的是，在C++中，对负数使用右移运算，答案<strong>向偏小的方向取整</strong>（而整除是向0的方向——也即<strong>绝对值</strong>小的方向——取整），如<span class=\"math inline\">\\(-3&gt;&gt;1=-2，-3/2=-1\\)</span><a href=\"#fnref4\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn5\" role=\"doc-endnote\"><p>冒泡排序和插入排序的最佳复杂度可达到<span class=\"math inline\">\\(O(n)\\)</span><a href=\"#fnref5\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn6\" role=\"doc-endnote\"><p>冒泡排序和插入排序的最佳复杂度可达到<span class=\"math inline\">\\(O(n)\\)</span><a href=\"#fnref6\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n<li id=\"fn7\" role=\"doc-endnote\"><p>在有向图中，a-&gt;b和a&lt;-b不算重边<a href=\"#fnref7\" class=\"footnote-back\" role=\"doc-backlink\">↩︎</a></p></li>\n</ol>\n</section>\n"},{"title":"csp-noip备战日志0-前言","date":"2023-07-20T14:42:14.000Z","_content":"\n# 写在最前面\n\n今天是2022.9月18日晚21时许，是CSP初赛的日子。成绩还没有出，我坐在济南西城实验中学实验楼四层的三机房，写下这一段话。如果一切顺利，那么马上就要备战CSP复赛了。\n\n目标很简单，先保二冲一，然后再考虑NOIP的事。\n\n在这个时间上，我希望能够建立一个科学的训练计划，让这一篇文章伴随我一同成长。\n\n我现在还一无所有，希望两个月以后，我能得到蜕变。\n\n我还希望在未来的或长或短的OI生涯中，每一个会看到这个文章的人，都能发挥出你的一切潜能，将一切激情燃烧在你所热爱的东西上。\n\n开始的时候，我给份笔记起名为「备战指南」。\n\n可后来我又想，这里面的许多知识其实并不应该是应该现在才掌握的，更多的是因为我自身薄弱的基础而产生的补上欠账的需要。所以，我又改其名为「备战日志」，希望它能陪伴我成长，这就够了。如果这篇文章有幸能为其它读者所见，并能产生些许帮助，那属实应是我的荣幸了。\n\n对了，西城有一个OJ是[oj.xc.sy](http://oj.xc.sy/)，不知道能活多长时间。\n\nUpd：然后变成本地部署了，不过原档还没有迁移。于是三机房出现了三台ubuntu。目前原站仍在使用。\n\nUupd：已经似了。\n\n目前笔记仍保持初版的架构，可能会考虑增加一些番外。\n\n#  索引\n\n0. 5  CSP-S初试知识点梳理\n\n1. 寄巧\n   - *常数优化\n   - *对拍\n   - *还是复杂度分析\n   - 输入输出优化\n   - *算符优先级\n\n2. 基础算法\n   - *（大）模 拟\n   - *二分答案\n   - *高精度\n   - *分治\n   - *贪心\n   - 离散化\n   - *构造\n   - *差分/前缀和\n\n3. 搜索\n   - *BFS\n   - *DFS\n   - *记忆化搜索\n   - *搜索剪枝\n   - *双向搜索\n   - \\*A*启发式搜索\n   - \\*IDA*\n   - *DLX\n\n4. 字符串\n   - 朴素技巧\n   - 哈希\n   - KMP\n   - *Trie树\n   - *Manacher\n\n5. 数据结构\n   - *队列和栈\n   - *并查集\n   - *二叉堆\n   - *树状数组\n   - *线段树\n   - *ST表\n   - *堆\n   - *分块\n   - *平衡树\n   - *树套树\n   - *可持久化数据结构\n   - *Treap\n\n6. 图论\n   - *图的存储与遍历\n   - 拓补排序\n   - *最短路\n   - *最小生成树\n   - *查分约束\n   - *图的连通性\n   - 树上问题\n   - *二分图\n\n7. 动态规划\n   - *线性DP\n   - *背包问题\n   - *区间DP\n   - *树形DP\n   - *状态压缩\n   - *倍增优化\n   - *dp与数据结构\n   - *单调队列优化\n   - *斜率优化\n\n8. 数学\n   - *位运算\n   - 快速幂\n   - *数论\n   - *组合数学\n   - *博弈论\n\n9. 杂项\n   - *模拟退火\n   - *各类离线算法\n   - 题解区\n   - *当你在debug时\n   - *当你在停课时\n\n10. 写在最后之后\n\n\n\n\n\n","source":"_posts/csp-noip备战日志0-前言.md","raw":"---\ntitle: csp-noip备战日志0-前言\ndate: 2023-07-20 22:42:14\ntags: [csp-noip备战日志,时隙随思,OI]\n---\n\n# 写在最前面\n\n今天是2022.9月18日晚21时许，是CSP初赛的日子。成绩还没有出，我坐在济南西城实验中学实验楼四层的三机房，写下这一段话。如果一切顺利，那么马上就要备战CSP复赛了。\n\n目标很简单，先保二冲一，然后再考虑NOIP的事。\n\n在这个时间上，我希望能够建立一个科学的训练计划，让这一篇文章伴随我一同成长。\n\n我现在还一无所有，希望两个月以后，我能得到蜕变。\n\n我还希望在未来的或长或短的OI生涯中，每一个会看到这个文章的人，都能发挥出你的一切潜能，将一切激情燃烧在你所热爱的东西上。\n\n开始的时候，我给份笔记起名为「备战指南」。\n\n可后来我又想，这里面的许多知识其实并不应该是应该现在才掌握的，更多的是因为我自身薄弱的基础而产生的补上欠账的需要。所以，我又改其名为「备战日志」，希望它能陪伴我成长，这就够了。如果这篇文章有幸能为其它读者所见，并能产生些许帮助，那属实应是我的荣幸了。\n\n对了，西城有一个OJ是[oj.xc.sy](http://oj.xc.sy/)，不知道能活多长时间。\n\nUpd：然后变成本地部署了，不过原档还没有迁移。于是三机房出现了三台ubuntu。目前原站仍在使用。\n\nUupd：已经似了。\n\n目前笔记仍保持初版的架构，可能会考虑增加一些番外。\n\n#  索引\n\n0. 5  CSP-S初试知识点梳理\n\n1. 寄巧\n   - *常数优化\n   - *对拍\n   - *还是复杂度分析\n   - 输入输出优化\n   - *算符优先级\n\n2. 基础算法\n   - *（大）模 拟\n   - *二分答案\n   - *高精度\n   - *分治\n   - *贪心\n   - 离散化\n   - *构造\n   - *差分/前缀和\n\n3. 搜索\n   - *BFS\n   - *DFS\n   - *记忆化搜索\n   - *搜索剪枝\n   - *双向搜索\n   - \\*A*启发式搜索\n   - \\*IDA*\n   - *DLX\n\n4. 字符串\n   - 朴素技巧\n   - 哈希\n   - KMP\n   - *Trie树\n   - *Manacher\n\n5. 数据结构\n   - *队列和栈\n   - *并查集\n   - *二叉堆\n   - *树状数组\n   - *线段树\n   - *ST表\n   - *堆\n   - *分块\n   - *平衡树\n   - *树套树\n   - *可持久化数据结构\n   - *Treap\n\n6. 图论\n   - *图的存储与遍历\n   - 拓补排序\n   - *最短路\n   - *最小生成树\n   - *查分约束\n   - *图的连通性\n   - 树上问题\n   - *二分图\n\n7. 动态规划\n   - *线性DP\n   - *背包问题\n   - *区间DP\n   - *树形DP\n   - *状态压缩\n   - *倍增优化\n   - *dp与数据结构\n   - *单调队列优化\n   - *斜率优化\n\n8. 数学\n   - *位运算\n   - 快速幂\n   - *数论\n   - *组合数学\n   - *博弈论\n\n9. 杂项\n   - *模拟退火\n   - *各类离线算法\n   - 题解区\n   - *当你在debug时\n   - *当你在停课时\n\n10. 写在最后之后\n\n\n\n\n\n","slug":"csp-noip备战日志0-前言","published":1,"updated":"2023-07-20T16:22:52.380Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9ve00032agw46fh8y0g","content":"<h1 id=\"写在最前面\">写在最前面</h1>\n<p>今天是2022.9月18日晚21时许，是CSP初赛的日子。成绩还没有出，我坐在济南西城实验中学实验楼四层的三机房，写下这一段话。如果一切顺利，那么马上就要备战CSP复赛了。</p>\n<p>目标很简单，先保二冲一，然后再考虑NOIP的事。</p>\n<p>在这个时间上，我希望能够建立一个科学的训练计划，让这一篇文章伴随我一同成长。</p>\n<p>我现在还一无所有，希望两个月以后，我能得到蜕变。</p>\n<p>我还希望在未来的或长或短的OI生涯中，每一个会看到这个文章的人，都能发挥出你的一切潜能，将一切激情燃烧在你所热爱的东西上。</p>\n<p>开始的时候，我给份笔记起名为「备战指南」。</p>\n<p>可后来我又想，这里面的许多知识其实并不应该是应该现在才掌握的，更多的是因为我自身薄弱的基础而产生的补上欠账的需要。所以，我又改其名为「备战日志」，希望它能陪伴我成长，这就够了。如果这篇文章有幸能为其它读者所见，并能产生些许帮助，那属实应是我的荣幸了。</p>\n<p>对了，西城有一个OJ是<a href=\"http://oj.xc.sy/\">oj.xc.sy</a>，不知道能活多长时间。</p>\n<p>Upd：然后变成本地部署了，不过原档还没有迁移。于是三机房出现了三台ubuntu。目前原站仍在使用。</p>\n<p>Uupd：已经似了。</p>\n<p>目前笔记仍保持初版的架构，可能会考虑增加一些番外。</p>\n<h1 id=\"索引\">索引</h1>\n<ol start=\"0\" type=\"1\">\n<li><p>5 CSP-S初试知识点梳理</p></li>\n<li><p>寄巧</p>\n<ul>\n<li>*常数优化</li>\n<li>*对拍</li>\n<li>*还是复杂度分析</li>\n<li>输入输出优化</li>\n<li>*算符优先级</li>\n</ul></li>\n<li><p>基础算法</p>\n<ul>\n<li>*（大）模 拟</li>\n<li>*二分答案</li>\n<li>*高精度</li>\n<li>*分治</li>\n<li>*贪心</li>\n<li>离散化</li>\n<li>*构造</li>\n<li>*差分/前缀和</li>\n</ul></li>\n<li><p>搜索</p>\n<ul>\n<li>*BFS</li>\n<li>*DFS</li>\n<li>*记忆化搜索</li>\n<li>*搜索剪枝</li>\n<li>*双向搜索</li>\n<li>*A*启发式搜索</li>\n<li>*IDA*</li>\n<li>*DLX</li>\n</ul></li>\n<li><p>字符串</p>\n<ul>\n<li>朴素技巧</li>\n<li>哈希</li>\n<li>KMP</li>\n<li>*Trie树</li>\n<li>*Manacher</li>\n</ul></li>\n<li><p>数据结构</p>\n<ul>\n<li>*队列和栈</li>\n<li>*并查集</li>\n<li>*二叉堆</li>\n<li>*树状数组</li>\n<li>*线段树</li>\n<li>*ST表</li>\n<li>*堆</li>\n<li>*分块</li>\n<li>*平衡树</li>\n<li>*树套树</li>\n<li>*可持久化数据结构</li>\n<li>*Treap</li>\n</ul></li>\n<li><p>图论</p>\n<ul>\n<li>*图的存储与遍历</li>\n<li>拓补排序</li>\n<li>*最短路</li>\n<li>*最小生成树</li>\n<li>*查分约束</li>\n<li>*图的连通性</li>\n<li>树上问题</li>\n<li>*二分图</li>\n</ul></li>\n<li><p>动态规划</p>\n<ul>\n<li>*线性DP</li>\n<li>*背包问题</li>\n<li>*区间DP</li>\n<li>*树形DP</li>\n<li>*状态压缩</li>\n<li>*倍增优化</li>\n<li>*dp与数据结构</li>\n<li>*单调队列优化</li>\n<li>*斜率优化</li>\n</ul></li>\n<li><p>数学</p>\n<ul>\n<li>*位运算</li>\n<li>快速幂</li>\n<li>*数论</li>\n<li>*组合数学</li>\n<li>*博弈论</li>\n</ul></li>\n<li><p>杂项</p>\n<ul>\n<li>*模拟退火</li>\n<li>*各类离线算法</li>\n<li>题解区</li>\n<li>*当你在debug时</li>\n<li>*当你在停课时</li>\n</ul></li>\n<li><p>写在最后之后</p></li>\n</ol>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"写在最前面\">写在最前面</h1>\n<p>今天是2022.9月18日晚21时许，是CSP初赛的日子。成绩还没有出，我坐在济南西城实验中学实验楼四层的三机房，写下这一段话。如果一切顺利，那么马上就要备战CSP复赛了。</p>\n<p>目标很简单，先保二冲一，然后再考虑NOIP的事。</p>\n<p>在这个时间上，我希望能够建立一个科学的训练计划，让这一篇文章伴随我一同成长。</p>\n<p>我现在还一无所有，希望两个月以后，我能得到蜕变。</p>\n<p>我还希望在未来的或长或短的OI生涯中，每一个会看到这个文章的人，都能发挥出你的一切潜能，将一切激情燃烧在你所热爱的东西上。</p>\n<p>开始的时候，我给份笔记起名为「备战指南」。</p>\n<p>可后来我又想，这里面的许多知识其实并不应该是应该现在才掌握的，更多的是因为我自身薄弱的基础而产生的补上欠账的需要。所以，我又改其名为「备战日志」，希望它能陪伴我成长，这就够了。如果这篇文章有幸能为其它读者所见，并能产生些许帮助，那属实应是我的荣幸了。</p>\n<p>对了，西城有一个OJ是<a href=\"http://oj.xc.sy/\">oj.xc.sy</a>，不知道能活多长时间。</p>\n<p>Upd：然后变成本地部署了，不过原档还没有迁移。于是三机房出现了三台ubuntu。目前原站仍在使用。</p>\n<p>Uupd：已经似了。</p>\n<p>目前笔记仍保持初版的架构，可能会考虑增加一些番外。</p>\n<h1 id=\"索引\">索引</h1>\n<ol start=\"0\" type=\"1\">\n<li><p>5 CSP-S初试知识点梳理</p></li>\n<li><p>寄巧</p>\n<ul>\n<li>*常数优化</li>\n<li>*对拍</li>\n<li>*还是复杂度分析</li>\n<li>输入输出优化</li>\n<li>*算符优先级</li>\n</ul></li>\n<li><p>基础算法</p>\n<ul>\n<li>*（大）模 拟</li>\n<li>*二分答案</li>\n<li>*高精度</li>\n<li>*分治</li>\n<li>*贪心</li>\n<li>离散化</li>\n<li>*构造</li>\n<li>*差分/前缀和</li>\n</ul></li>\n<li><p>搜索</p>\n<ul>\n<li>*BFS</li>\n<li>*DFS</li>\n<li>*记忆化搜索</li>\n<li>*搜索剪枝</li>\n<li>*双向搜索</li>\n<li>*A*启发式搜索</li>\n<li>*IDA*</li>\n<li>*DLX</li>\n</ul></li>\n<li><p>字符串</p>\n<ul>\n<li>朴素技巧</li>\n<li>哈希</li>\n<li>KMP</li>\n<li>*Trie树</li>\n<li>*Manacher</li>\n</ul></li>\n<li><p>数据结构</p>\n<ul>\n<li>*队列和栈</li>\n<li>*并查集</li>\n<li>*二叉堆</li>\n<li>*树状数组</li>\n<li>*线段树</li>\n<li>*ST表</li>\n<li>*堆</li>\n<li>*分块</li>\n<li>*平衡树</li>\n<li>*树套树</li>\n<li>*可持久化数据结构</li>\n<li>*Treap</li>\n</ul></li>\n<li><p>图论</p>\n<ul>\n<li>*图的存储与遍历</li>\n<li>拓补排序</li>\n<li>*最短路</li>\n<li>*最小生成树</li>\n<li>*查分约束</li>\n<li>*图的连通性</li>\n<li>树上问题</li>\n<li>*二分图</li>\n</ul></li>\n<li><p>动态规划</p>\n<ul>\n<li>*线性DP</li>\n<li>*背包问题</li>\n<li>*区间DP</li>\n<li>*树形DP</li>\n<li>*状态压缩</li>\n<li>*倍增优化</li>\n<li>*dp与数据结构</li>\n<li>*单调队列优化</li>\n<li>*斜率优化</li>\n</ul></li>\n<li><p>数学</p>\n<ul>\n<li>*位运算</li>\n<li>快速幂</li>\n<li>*数论</li>\n<li>*组合数学</li>\n<li>*博弈论</li>\n</ul></li>\n<li><p>杂项</p>\n<ul>\n<li>*模拟退火</li>\n<li>*各类离线算法</li>\n<li>题解区</li>\n<li>*当你在debug时</li>\n<li>*当你在停课时</li>\n</ul></li>\n<li><p>写在最后之后</p></li>\n</ol>\n"},{"title":"csp-noip备战日志1-小寄巧","date":"2023-07-21T13:22:22.000Z","_content":"\n## 常数优化\n\n待续\n\n(数据结构篇同样有许多常数优化技巧。\n\n## 对拍\n\n对拍需要四个程序，一个可能正确的待测代码，一个保对的暴力，一个数据生成器，一个文件比对程序\n\n鉴于NOIP山东赛区并不提供NOI linux，也就完全有可能不支持python，所以建议使用batch编写对拍程序。\n\n不过，对拍并非万能（~~比如你首先要会写暴力~~），需要权衡收益和时间开销，可能产生误判，且较难应对spj，所以要适度适时使用\n\n#### 1. 数据生成器\n\n#### 2. 利用fc命令编写对拍器\n\n对拍主要利用cmd的`fc`命令（在linux下为diff），这个命令可以比较文本文件的差异。我们可以利用这个命令快速对比标程和待测代码输出有无差异。配合上数据生成器和文件流，就可以自动化地完成多组对拍。\n\n所以这个对拍程序的基本架构是：\n\n```\n循环：\n\t运行数据生成器->data.in\n\tdata.in->暴力->baoli.out\n\tdate.in->待测->test.out\n\tfc baoli.out test.out检测返回值，不正确时跳出\n```\n\n这个对拍程序可以使用C++完成。\n\n```C++\n#include <bits/stdc++.h>\n//如果你不习惯使用万能头，system()位于<cstdlib>中\nusing namespace std;\nint main(){\n\twhile(1){\n\t\tsystem(\"data.exe\");\t\t//system()中的参数（注意是字符串类型）\n        \t\t\t\t\t\t//相当于直接在cmd中输入这个命令\n        \t\t\t\t\t\t//data.exe每运行一次，data.in的数据都会被刷新，下面同理\n        system(\"baoli.exe\");\t//可能需要提前在ide中编译一下\n        system(\"test.exe\");\n        if(system(\"fc test.out baoli.out\")){\n            break;\t//当fc比对不一致时，会返回参数1。这个返回值会被system函数捕获\n        }\n    }\n}\n```\n\n这样一来，当某个数据验证不成功的时候，程序会立刻退出，这时打开data.in，其中就是没有通过的数据，可以重复测试。如果程序一直没有退出，那就是一直成功的状态。\n\n\n\n\n## 还是复杂度分析\n\n![](https://i.loli.net/2019/10/21/ipIwRUbVNxaZl6J.jpg)\n\n\n## 输入输出优化\n\n[【洛谷日报#110】浅谈C++ IO优化——读优输优方法集锦 ](https://zhuanlan.zhihu.com/p/55304700)\n\n### 1. 读入优化（快读）\n\n先扔个常用模板\n\n~~绝大部分时候你只需要（可能也只能）记住这个玩意~~\n\n```C++\ninline int read() {\n    int ret=0,f=1;char ch=getchar();\n    while (ch<'0'||ch>'9') {if (ch=='-') f=-f;ch=getchar();}\n    while (ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n```\n\n使用时直接`int a = read();`即可。\n\n我们来分析一下代码：\n\n- 核心就是`getchar()`非常快\n\n- `getchar()`仅用char的方式读取一个字符，所以需要用一个ret进行累加\n\n- 用f来控制输入正负。以及显然，需要保证读入的数字的格式是合法的\n\n- 如果题目的读入数据需要开`longlong`，那么**快读也需要开`longlong`**\n\n  ~~十年OI一场空，不开`longlong`见祖宗~~\n\n- 切记切记，**即使你能保证数据均为正，也必须要写一个`while (ch<'0'||ch>'9') {ch=getchar();}`在上面！！** 否则可能会得到意料之外的输入（比如说换行符）。\n\n- 和使用stdio一样，**用快读不要关同步！！** 不然可能得不到正确的结果[或会T飞](https://www.luogu.com.cn/record/88253964)\n\n### 2. 输出优化\n\n一般输出规模不会至于用这个玩意，且仅利用`putchar()`的输出优化甚至比`printf()`还要慢，但你仍然可能会在使用`__int128_t`的时候使用它来进行输出。所以这里直接放一个int128版本的：\n\n```C++\nvoid write(__int128_t x){\n    __int128_t y=10,len=1;\n    while(y<=x){y*=10;len++;}\n    while(len--){y/=10;putchar(x/y+48);x%=y;}\n}\n// y和x的类型都要是__int128_t，不然会出问题\n```\n\n\nupd：[~~(这两天看到一个超级快读的离谱程序，放过来镇个楼)~~](https://www.luogu.com.cn/paste/ilt13pl4)\n\n\n\n## 算符优先级\n\n这玩意也算是个大坑……\n\nC++运算符顺序表：\n\n![](https://img-blog.csdnimg.cn/9e6d8a9983e5430081e74994eddeafe3.png#pic_center)\n\n注意位运算、类型转换的作用范围，以及异或不要忘记加括号。\n\n\n## 有关C++STL\n","source":"_posts/csp-noip备战日志1-小寄巧.md","raw":"---\ntitle: csp-noip备战日志1-小寄巧\ndate: 2023-07-21 21:22:22\ntags: [csp-noip备战日志,OI,学习手记]\n---\n\n## 常数优化\n\n待续\n\n(数据结构篇同样有许多常数优化技巧。\n\n## 对拍\n\n对拍需要四个程序，一个可能正确的待测代码，一个保对的暴力，一个数据生成器，一个文件比对程序\n\n鉴于NOIP山东赛区并不提供NOI linux，也就完全有可能不支持python，所以建议使用batch编写对拍程序。\n\n不过，对拍并非万能（~~比如你首先要会写暴力~~），需要权衡收益和时间开销，可能产生误判，且较难应对spj，所以要适度适时使用\n\n#### 1. 数据生成器\n\n#### 2. 利用fc命令编写对拍器\n\n对拍主要利用cmd的`fc`命令（在linux下为diff），这个命令可以比较文本文件的差异。我们可以利用这个命令快速对比标程和待测代码输出有无差异。配合上数据生成器和文件流，就可以自动化地完成多组对拍。\n\n所以这个对拍程序的基本架构是：\n\n```\n循环：\n\t运行数据生成器->data.in\n\tdata.in->暴力->baoli.out\n\tdate.in->待测->test.out\n\tfc baoli.out test.out检测返回值，不正确时跳出\n```\n\n这个对拍程序可以使用C++完成。\n\n```C++\n#include <bits/stdc++.h>\n//如果你不习惯使用万能头，system()位于<cstdlib>中\nusing namespace std;\nint main(){\n\twhile(1){\n\t\tsystem(\"data.exe\");\t\t//system()中的参数（注意是字符串类型）\n        \t\t\t\t\t\t//相当于直接在cmd中输入这个命令\n        \t\t\t\t\t\t//data.exe每运行一次，data.in的数据都会被刷新，下面同理\n        system(\"baoli.exe\");\t//可能需要提前在ide中编译一下\n        system(\"test.exe\");\n        if(system(\"fc test.out baoli.out\")){\n            break;\t//当fc比对不一致时，会返回参数1。这个返回值会被system函数捕获\n        }\n    }\n}\n```\n\n这样一来，当某个数据验证不成功的时候，程序会立刻退出，这时打开data.in，其中就是没有通过的数据，可以重复测试。如果程序一直没有退出，那就是一直成功的状态。\n\n\n\n\n## 还是复杂度分析\n\n![](https://i.loli.net/2019/10/21/ipIwRUbVNxaZl6J.jpg)\n\n\n## 输入输出优化\n\n[【洛谷日报#110】浅谈C++ IO优化——读优输优方法集锦 ](https://zhuanlan.zhihu.com/p/55304700)\n\n### 1. 读入优化（快读）\n\n先扔个常用模板\n\n~~绝大部分时候你只需要（可能也只能）记住这个玩意~~\n\n```C++\ninline int read() {\n    int ret=0,f=1;char ch=getchar();\n    while (ch<'0'||ch>'9') {if (ch=='-') f=-f;ch=getchar();}\n    while (ch>='0'&&ch<='9') ret=ret*10+ch-'0',ch=getchar();\n    return ret*f;\n}\n```\n\n使用时直接`int a = read();`即可。\n\n我们来分析一下代码：\n\n- 核心就是`getchar()`非常快\n\n- `getchar()`仅用char的方式读取一个字符，所以需要用一个ret进行累加\n\n- 用f来控制输入正负。以及显然，需要保证读入的数字的格式是合法的\n\n- 如果题目的读入数据需要开`longlong`，那么**快读也需要开`longlong`**\n\n  ~~十年OI一场空，不开`longlong`见祖宗~~\n\n- 切记切记，**即使你能保证数据均为正，也必须要写一个`while (ch<'0'||ch>'9') {ch=getchar();}`在上面！！** 否则可能会得到意料之外的输入（比如说换行符）。\n\n- 和使用stdio一样，**用快读不要关同步！！** 不然可能得不到正确的结果[或会T飞](https://www.luogu.com.cn/record/88253964)\n\n### 2. 输出优化\n\n一般输出规模不会至于用这个玩意，且仅利用`putchar()`的输出优化甚至比`printf()`还要慢，但你仍然可能会在使用`__int128_t`的时候使用它来进行输出。所以这里直接放一个int128版本的：\n\n```C++\nvoid write(__int128_t x){\n    __int128_t y=10,len=1;\n    while(y<=x){y*=10;len++;}\n    while(len--){y/=10;putchar(x/y+48);x%=y;}\n}\n// y和x的类型都要是__int128_t，不然会出问题\n```\n\n\nupd：[~~(这两天看到一个超级快读的离谱程序，放过来镇个楼)~~](https://www.luogu.com.cn/paste/ilt13pl4)\n\n\n\n## 算符优先级\n\n这玩意也算是个大坑……\n\nC++运算符顺序表：\n\n![](https://img-blog.csdnimg.cn/9e6d8a9983e5430081e74994eddeafe3.png#pic_center)\n\n注意位运算、类型转换的作用范围，以及异或不要忘记加括号。\n\n\n## 有关C++STL\n","slug":"csp-noip备战日志1-小寄巧","published":1,"updated":"2023-07-21T16:58:26.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vg00052agwboaoe9cm","content":"<h2 id=\"常数优化\">常数优化</h2>\n<p>待续</p>\n<p>(数据结构篇同样有许多常数优化技巧。</p>\n<h2 id=\"对拍\">对拍</h2>\n<p>对拍需要四个程序，一个可能正确的待测代码，一个保对的暴力，一个数据生成器，一个文件比对程序</p>\n<p>鉴于NOIP山东赛区并不提供NOI linux，也就完全有可能不支持python，所以建议使用batch编写对拍程序。</p>\n<p>不过，对拍并非万能（<del>比如你首先要会写暴力</del>），需要权衡收益和时间开销，可能产生误判，且较难应对spj，所以要适度适时使用</p>\n<h4 id=\"数据生成器\">1. 数据生成器</h4>\n<h4 id=\"利用fc命令编写对拍器\">2. 利用fc命令编写对拍器</h4>\n<p>对拍主要利用cmd的<code>fc</code>命令（在linux下为diff），这个命令可以比较文本文件的差异。我们可以利用这个命令快速对比标程和待测代码输出有无差异。配合上数据生成器和文件流，就可以自动化地完成多组对拍。</p>\n<p>所以这个对拍程序的基本架构是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">循环：</span><br><span class=\"line\">\t运行数据生成器-&gt;data.in</span><br><span class=\"line\">\tdata.in-&gt;暴力-&gt;baoli.out</span><br><span class=\"line\">\tdate.in-&gt;待测-&gt;test.out</span><br><span class=\"line\">\tfc baoli.out test.out检测返回值，不正确时跳出</span><br></pre></td></tr></table></figure>\n<p>这个对拍程序可以使用C++完成。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//如果你不习惯使用万能头，system()位于&lt;cstdlib&gt;中</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;data.exe&quot;</span>);\t\t<span class=\"comment\">//system()中的参数（注意是字符串类型）</span></span><br><span class=\"line\">        \t\t\t\t\t\t<span class=\"comment\">//相当于直接在cmd中输入这个命令</span></span><br><span class=\"line\">        \t\t\t\t\t\t<span class=\"comment\">//data.exe每运行一次，data.in的数据都会被刷新，下面同理</span></span><br><span class=\"line\">        <span class=\"built_in\">system</span>(<span class=\"string\">&quot;baoli.exe&quot;</span>);\t<span class=\"comment\">//可能需要提前在ide中编译一下</span></span><br><span class=\"line\">        <span class=\"built_in\">system</span>(<span class=\"string\">&quot;test.exe&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">system</span>(<span class=\"string\">&quot;fc test.out baoli.out&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;\t<span class=\"comment\">//当fc比对不一致时，会返回参数1。这个返回值会被system函数捕获</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样一来，当某个数据验证不成功的时候，程序会立刻退出，这时打开data.in，其中就是没有通过的数据，可以重复测试。如果程序一直没有退出，那就是一直成功的状态。</p>\n<h2 id=\"还是复杂度分析\">还是复杂度分析</h2>\n<p><img src=\"https://i.loli.net/2019/10/21/ipIwRUbVNxaZl6J.jpg\" /></p>\n<h2 id=\"输入输出优化\">输入输出优化</h2>\n<p><a href=\"https://zhuanlan.zhihu.com/p/55304700\">【洛谷日报#110】浅谈C++ IO优化——读优输优方法集锦</a></p>\n<h3 id=\"读入优化快读\">1. 读入优化（快读）</h3>\n<p>先扔个常用模板</p>\n<p><del>绝大部分时候你只需要（可能也只能）记住这个玩意</del></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>) &#123;<span class=\"keyword\">if</span> (ch==<span class=\"string\">&#x27;-&#x27;</span>) f=-f;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>) ret=ret*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>,ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret*f;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用时直接<code>int a = read();</code>即可。</p>\n<p>我们来分析一下代码：</p>\n<ul>\n<li><p>核心就是<code>getchar()</code>非常快</p></li>\n<li><p><code>getchar()</code>仅用char的方式读取一个字符，所以需要用一个ret进行累加</p></li>\n<li><p>用f来控制输入正负。以及显然，需要保证读入的数字的格式是合法的</p></li>\n<li><p>如果题目的读入数据需要开<code>longlong</code>，那么<strong>快读也需要开<code>longlong</code></strong></p>\n<p><del>十年OI一场空，不开<code>longlong</code>见祖宗</del></p></li>\n<li><p>切记切记，<strong>即使你能保证数据均为正，也必须要写一个<code>while (ch&lt;'0'||ch&gt;'9') &#123;ch=getchar();&#125;</code>在上面！！</strong> 否则可能会得到意料之外的输入（比如说换行符）。</p></li>\n<li><p>和使用stdio一样，<strong>用快读不要关同步！！</strong> 不然可能得不到正确的结果<a href=\"https://www.luogu.com.cn/record/88253964\">或会T飞</a></p></li>\n</ul>\n<h3 id=\"输出优化\">2. 输出优化</h3>\n<p>一般输出规模不会至于用这个玩意，且仅利用<code>putchar()</code>的输出优化甚至比<code>printf()</code>还要慢，但你仍然可能会在使用<code>__int128_t</code>的时候使用它来进行输出。所以这里直接放一个int128版本的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"type\">__int128_t</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">__int128_t</span> y=<span class=\"number\">10</span>,len=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(y&lt;=x)&#123;y*=<span class=\"number\">10</span>;len++;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(len--)&#123;y/=<span class=\"number\">10</span>;<span class=\"built_in\">putchar</span>(x/y+<span class=\"number\">48</span>);x%=y;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// y和x的类型都要是__int128_t，不然会出问题</span></span><br></pre></td></tr></table></figure>\n<p>upd：<a href=\"https://www.luogu.com.cn/paste/ilt13pl4\"><del>(这两天看到一个超级快读的离谱程序，放过来镇个楼)</del></a></p>\n<h2 id=\"算符优先级\">算符优先级</h2>\n<p>这玩意也算是个大坑……</p>\n<p>C++运算符顺序表：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/9e6d8a9983e5430081e74994eddeafe3.png#pic_center\" /></p>\n<p>注意位运算、类型转换的作用范围，以及异或不要忘记加括号。</p>\n<h2 id=\"有关cstl\">有关C++STL</h2>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"<h2 id=\"常数优化\">常数优化</h2>\n<p>待续</p>\n<p>(数据结构篇同样有许多常数优化技巧。</p>\n<h2 id=\"对拍\">对拍</h2>\n<p>对拍需要四个程序，一个可能正确的待测代码，一个保对的暴力，一个数据生成器，一个文件比对程序</p>\n<p>鉴于NOIP山东赛区并不提供NOI linux，也就完全有可能不支持python，所以建议使用batch编写对拍程序。</p>\n<p>不过，对拍并非万能（<del>比如你首先要会写暴力</del>），需要权衡收益和时间开销，可能产生误判，且较难应对spj，所以要适度适时使用</p>\n<h4 id=\"数据生成器\">1. 数据生成器</h4>\n<h4 id=\"利用fc命令编写对拍器\">2. 利用fc命令编写对拍器</h4>\n<p>对拍主要利用cmd的<code>fc</code>命令（在linux下为diff），这个命令可以比较文本文件的差异。我们可以利用这个命令快速对比标程和待测代码输出有无差异。配合上数据生成器和文件流，就可以自动化地完成多组对拍。</p>\n<p>所以这个对拍程序的基本架构是：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">循环：</span><br><span class=\"line\">\t运行数据生成器-&gt;data.in</span><br><span class=\"line\">\tdata.in-&gt;暴力-&gt;baoli.out</span><br><span class=\"line\">\tdate.in-&gt;待测-&gt;test.out</span><br><span class=\"line\">\tfc baoli.out test.out检测返回值，不正确时跳出</span><br></pre></td></tr></table></figure>\n<p>这个对拍程序可以使用C++完成。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//如果你不习惯使用万能头，system()位于&lt;cstdlib&gt;中</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">system</span>(<span class=\"string\">&quot;data.exe&quot;</span>);\t\t<span class=\"comment\">//system()中的参数（注意是字符串类型）</span></span><br><span class=\"line\">        \t\t\t\t\t\t<span class=\"comment\">//相当于直接在cmd中输入这个命令</span></span><br><span class=\"line\">        \t\t\t\t\t\t<span class=\"comment\">//data.exe每运行一次，data.in的数据都会被刷新，下面同理</span></span><br><span class=\"line\">        <span class=\"built_in\">system</span>(<span class=\"string\">&quot;baoli.exe&quot;</span>);\t<span class=\"comment\">//可能需要提前在ide中编译一下</span></span><br><span class=\"line\">        <span class=\"built_in\">system</span>(<span class=\"string\">&quot;test.exe&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">system</span>(<span class=\"string\">&quot;fc test.out baoli.out&quot;</span>))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;\t<span class=\"comment\">//当fc比对不一致时，会返回参数1。这个返回值会被system函数捕获</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样一来，当某个数据验证不成功的时候，程序会立刻退出，这时打开data.in，其中就是没有通过的数据，可以重复测试。如果程序一直没有退出，那就是一直成功的状态。</p>\n<h2 id=\"还是复杂度分析\">还是复杂度分析</h2>\n<p><img src=\"https://i.loli.net/2019/10/21/ipIwRUbVNxaZl6J.jpg\" /></p>\n<h2 id=\"输入输出优化\">输入输出优化</h2>\n<p><a href=\"https://zhuanlan.zhihu.com/p/55304700\">【洛谷日报#110】浅谈C++ IO优化——读优输优方法集锦</a></p>\n<h3 id=\"读入优化快读\">1. 读入优化（快读）</h3>\n<p>先扔个常用模板</p>\n<p><del>绝大部分时候你只需要（可能也只能）记住这个玩意</del></p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"type\">int</span> <span class=\"title\">read</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret=<span class=\"number\">0</span>,f=<span class=\"number\">1</span>;<span class=\"type\">char</span> ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch&lt;<span class=\"string\">&#x27;0&#x27;</span>||ch&gt;<span class=\"string\">&#x27;9&#x27;</span>) &#123;<span class=\"keyword\">if</span> (ch==<span class=\"string\">&#x27;-&#x27;</span>) f=-f;ch=<span class=\"built_in\">getchar</span>();&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (ch&gt;=<span class=\"string\">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class=\"string\">&#x27;9&#x27;</span>) ret=ret*<span class=\"number\">10</span>+ch-<span class=\"string\">&#x27;0&#x27;</span>,ch=<span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret*f;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>使用时直接<code>int a = read();</code>即可。</p>\n<p>我们来分析一下代码：</p>\n<ul>\n<li><p>核心就是<code>getchar()</code>非常快</p></li>\n<li><p><code>getchar()</code>仅用char的方式读取一个字符，所以需要用一个ret进行累加</p></li>\n<li><p>用f来控制输入正负。以及显然，需要保证读入的数字的格式是合法的</p></li>\n<li><p>如果题目的读入数据需要开<code>longlong</code>，那么<strong>快读也需要开<code>longlong</code></strong></p>\n<p><del>十年OI一场空，不开<code>longlong</code>见祖宗</del></p></li>\n<li><p>切记切记，<strong>即使你能保证数据均为正，也必须要写一个<code>while (ch&lt;'0'||ch&gt;'9') &#123;ch=getchar();&#125;</code>在上面！！</strong> 否则可能会得到意料之外的输入（比如说换行符）。</p></li>\n<li><p>和使用stdio一样，<strong>用快读不要关同步！！</strong> 不然可能得不到正确的结果<a href=\"https://www.luogu.com.cn/record/88253964\">或会T飞</a></p></li>\n</ul>\n<h3 id=\"输出优化\">2. 输出优化</h3>\n<p>一般输出规模不会至于用这个玩意，且仅利用<code>putchar()</code>的输出优化甚至比<code>printf()</code>还要慢，但你仍然可能会在使用<code>__int128_t</code>的时候使用它来进行输出。所以这里直接放一个int128版本的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">write</span><span class=\"params\">(<span class=\"type\">__int128_t</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">__int128_t</span> y=<span class=\"number\">10</span>,len=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(y&lt;=x)&#123;y*=<span class=\"number\">10</span>;len++;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(len--)&#123;y/=<span class=\"number\">10</span>;<span class=\"built_in\">putchar</span>(x/y+<span class=\"number\">48</span>);x%=y;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// y和x的类型都要是__int128_t，不然会出问题</span></span><br></pre></td></tr></table></figure>\n<p>upd：<a href=\"https://www.luogu.com.cn/paste/ilt13pl4\"><del>(这两天看到一个超级快读的离谱程序，放过来镇个楼)</del></a></p>\n<h2 id=\"算符优先级\">算符优先级</h2>\n<p>这玩意也算是个大坑……</p>\n<p>C++运算符顺序表：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/9e6d8a9983e5430081e74994eddeafe3.png#pic_center\" /></p>\n<p>注意位运算、类型转换的作用范围，以及异或不要忘记加括号。</p>\n<h2 id=\"有关cstl\">有关C++STL</h2>\n"},{"title":"csp-noip备战日志10-写在最后之后","date":"2023-07-20T14:56:02.000Z","_content":"\n# 最后之后\n\n当你看到这些文字的时候，一个蒟蒻OIer的一年多OI生涯已经结束了，其实已经结束很久了。我也本想在生涯的末期完成这些文字，但是就这么一直拖到了2023年7月，在我即将将这些文章整理上传到我的博客上时，我终于把这一段补上了。当然，作为退役回忆，已另写了一篇文章，附在下面。\n\n已经快要一年了。noip之后的日子如飞一般过去。整个高二对于我来说，是先摆烂前一半，再用剩下的一半拼命追赶，从结果上来说，亏盈自平，努力一个学期终于回到了高一下期末的那个原点。那么，向前的每一步，都是惊喜了。往事如过眼云烟，一去不回，但我始终珍视着这段别样的时光，那段~~超爽停课~~疯狂而不顾一切的时光，并且尝试着继续完善这份资料。我坚信，~~虽然时至今日我还是个彩笔~~，总有一天，我会和算法竞赛再会的。\n\n@皎月半洒花是一位著名OIer，同时也是济南老乡。除了详细的dp和Hash教程给我了很大的启发外，花花飞扬的文采同样给我留下了深刻的印象。OIer们大多都是很有才情的，比如wqy的拉丁舞，某位连载在洛谷上的小说，还有EI、花花等神触的随笔，他们无不提醒我们生而为人本身无限的可能性。我想，人们并不总是要拘泥于普遍的看法，更不用因为「自己应该是个什么样的人」这样的想法而畏葸不前。请记住，你从不本该成为怎样的人，只有跨出一步试一试，才知道你会成为怎样的人。\n\n所以，今天我又向着一个新的目标进发了。再见，为了再见。\n\n2023年7月20日午夜\n\n# 鸣谢\n\n这些笔记参考了编程兔、qbxt、sdwc/sdsc的相关线下资料以及OIwiki、深进、紫书、yxc算法系列课程以及数不胜数的OI博客的相关内容，并参考[能力全面提升综合题单](https://www.luogu.com.cn/training/9391)制定了知识提纲。我要感谢这些资料以及在其背后为此付出努力的所有人，并向他们致以最真挚的敬意。这些资料中有许多是免费供大家学习的，这是属于OIer们的、不同于其他竞赛的宝贵财富，闪耀着互联网精神的光辉。我还要特别感谢鹿秀娥老师以及郭龙举、赵一鸣、冯光耀和李俊翰四位同学，没有你们共同的陪伴和支持，就没有这篇笔记和我在OI生涯中的一切。\n\n\n再往下，是一些自顾自的啰嗦。这一部分是考完noip当晚写的，作为单独的一篇文章在洛谷上发过。\n\n# 一个幽默的故事\n\n## 回首\n\n##### 一个微不足道的开始\n\n抛开再之前乱点的那些乱七八糟的技能树不谈，我第一次听闻OI，大概是在初二的时候。作为SDFZ的某个卑微分校，在水群时偶然加入了一个名为`sdfz计算机交流群`的QQ群,从而结识了qyc椰叶等一大批神犇（然而人家并不认识我就是了）。那个时候好像正值dalao们备战CSP2019，于是我就这么正式结识了OI。大概在同一时间，我观摩了wqy的退役回忆，于是对于OIer这个神秘而炫酷的群体又有了更多的一点印象，不过直到那个时候，我对于OI的认识，都是模糊而浅薄的。\n\n2020年初，我在洛谷注册了这个账号，并利用当时仅会的一点半吊子python在洛谷主题库中尝试做题，不过由于孱弱的码力和理解能力只是浅尝辄止。我当年的最后一个提交记录定格在不久之后的2020年2月22日，是不高兴的津津这道题，之后我又告别了洛谷。\n\n##### 再拾\n\n现在想来，之所以在2020年年初会想起来在洛谷上做题，大概也是因为疫情居家实在闲的没事干，于是就想起来了。正如那时的我料不到这轰轰烈烈的疫情会一直持续到2022年干碎SD的CSP，我更料不到我会在2020那年之后再一次入门OI。\n\n时间来到2021年，中考结束的我又闲了下来。于是闲的没事干的我又一次盘算起了自己的未来。\n\n我可能是一个想得比较多的人，经常在一些同龄人不太会考虑的问题上绞尽脑汁、纠缠不清——然而因为大问题想不明白，该做的事情却也不愿意去塌下心来做，所以才成了今天这个一事无成的我，不过这是后话了。——总之，在对一顿未来的人生大思考之后，我把书架上那本几年前就买回来却一直没碰过的C++primer又抽了出来。\n\n直到那个时候，我也并没有学OI的打算，只是想着从C++早日入门编程，然后就去学unity 3D，然后利用高中时间开发点自己喜欢的小玩意。后来中考成绩并不尽如人意，也就沉寂下去了。就这样一直到了高中开学信竞招新的时候，因为一些奇奇怪怪的爱好统计，我被班主任劝着去试试，我也就忽然有了尝试一下的念头。\n\n现在来看，至少入门编程这件事，做得还是比较成功的。我想学会运用一门语言的一个很好的方式，就是用它去敲算法题。\n\n于是我去信息处找了负责的老师记下了名字，等待着后面的消息。\n\n##### 方长\n\n第一次去上课的时候，人还是相当多的，几乎撑满了六十人的机房，不过大半大概都是隔壁某特色班被其班主任硬拉过来的。我选了一台背对窗户的机器坐下，然后发现隔壁的隔壁的一个老哥正在摆弄他放在U盘里的galgame，然后我就谔谔了。这位老哥还是后来机房中自带笔记本的唯一的人（我和某另几个人用的是wintogo），一直陪我到了2021年暑假，不过在最后的几个月还是放弃了，也没有报名csp。和他一样，在第一次上课之后的两三个月以内，机房的人数再以肉眼可见的速度减少，甚至还有跑路到隔壁生竞的……不过我校的生竞还是要比OI强，祝他好运吧。到NOIP2021的时候，机房里只剩下了不到20人。\n\n当然，一年级生的我自然是无法参加NOIP2021的。看着放出的自测的题目，顿时感觉自己要走的路还有很多很多。这个时候的我是什么水平呢？\n\n我被P7398这一道红题暴打了。在那之前，还有三打口算练习题，五交笨小猴，秒切小书童的光辉战绩，这个时候的代码全是感情，没有一点算法的痕迹。学校的竞赛课一周只有一节，还有就是周日的晚上，那时的我自然是不敢在其余时间往机房乱窜的。所以时间就在无尽的摸鱼和偶尔的刷题中一晃而过，时间已经来到了2022年。\n\n这个时候，SDWC来了。我从未参与类似的活动，因此立即决定报名参加。SDWC2022在lcez举办，于是我就获得了一张lcez7天体验卡。每天讲课测试的日子忙碌而又充实，除了课也听不懂，题也不会做以外。不过还是要说我是有进步的，比如说第一次参加了模拟赛。另外就是结交了几位OIer，基本都是同龄人或是初中生，直到NOIP2022前夕还互有联系，祝他们生涯顺利吧。我还在SDWC遇到了那位wqy大佬，我之所以知道之前那篇文章是他所作，正是因为有人在wqy回忆自己的生涯时，把他的文章发到了群里。他在WC跳拉丁舞的事迹令我印象深刻。\n\n后来还找到了视频膜拜（\n\n##### 雾\n\n转过年来到了新学期，因为疫情和高考，我们连续居家网课了极长的时间，而这段时间无疑被我荒废了。居家期间我的进步极其缓慢，这一点从我在2022年3到5月间只交同一道单源最短路模板交两页，以及四月份一题未做中都能看出。这个时候whk也不如以往，令人心烦，我好像把OI忘了。\n\n无疑，我断送了一段大好的时光，最终自吞苦果。\n\n学习竞赛无疑是需要强大的意志力和自控力的，尤其是在那时学校帮不上你的忙，大量知识都得靠自学的情况下。而很显然我缺的就是这个。这种混乱的日子一直到暑假。\n\n##### 怎么办？\n\nSDSC如期而至，但这次是在日照。日照的酷暑和暴雨，山外的电动滑板车，以及神必食堂，神必网络，神必空调和神必宿管都给我留下了极其深刻而不可磨灭的印象，不过好在至少你可以选择花钱吃顿好的，我也命硬没有感冒。SC回来以后又到了补whk的时间，这导致实际上暑假进度也远没有达到我的计划，且这个时候已经临近CSP一轮了。\n\n怎么办？以我现在的水平，csp能不能过还是个未知数，要消耗的时间却是实实在在的。这么来到了九月份。\n\n怎么办？哪怕我现在放弃，前面花费的时间也完全不算多，就当是培养爱好了。而接下来停课的牺牲，可是不能不考虑的。既然想要更进一步早已无望，就算能拿到2=哪怕1=，是否真的值得呢？\n\n结果，在csp笔试前的周五晚，我的焦虑在整个机房扩散开来。此时整个高二已经仅有5人还在坚持，机房中充满了沉闷的空气。\n\n不过幸好，一天后的csp笔试还是贴着线过了。\n\n##### 冲刺\n\n那个时候还有一件事，就是月考，我毫无疑问地摆烂了，烂得非常彻底。这也促使我不得不逃离whk的琐事，开始了第一轮停课。\n\n之所以说是第一轮，是因为csp二轮取消以后，我又回去补了两周whk。过程实在是有点痛苦，也给我留下了不可磨灭的回忆。我和我父母的关系大概也在这个时候降至冰点，不过既然如此，我也就有什么活就敞开了说了。结果到了两周结束的时候，家庭的阻力反而小了不少，我也就可以再一次回到OI中来。\n\n停课的日子确实是独特的。除了害怕体测挂科而不得不去上体育以外，我们五个中的三个于住约等于住进了机房，还有一位直接回了家。每天默默听着上课铃和下课铃交替敲响，自己心底里也有一根弦在一点一点绷起来。我真的想给这些时间一个满意的回答。这期间我们几个的午觉全是躺在拼起的木凳子上睡的，机位四周也经常摆着大包小包~~甚至whk资料~~。不过这个机房还有包括我自己班在内的很多班级的信息课，所以大概也没有敢那么放肆。\n\n隔壁高一的纳新这时候也已结束了。感觉新一届明显实力强劲，有吊打我们几个零基础草根的趋势，当然后来至少是把我吊打了。希望我们学校的OI能够越来越强，早日脱离弱校的苦海吧。\n\n另一个心思这时候也渐渐浮现。这么值得纪念的时光，或许我也应该留下些什么？所以我开始留心写题解、记笔记，大概也有一些成效，已积累了数万字了。同时，也有了下面这一段日志。\n\n---\n\n>下面的文字本是我的OI笔记中的一栏，用类似日记的方式记录了我的停课生活和心路历程，摘录至此遂得。或将是本文最为格格不入的一段活泼的文字。\n\n当我在停课时。\n\n写完这个标题之后我发现，我好像没有什么资格给予各位文化课上的任何建议，于是，就当我是在记录自己的停课生涯吧。\n\n~~（我在创建这个标题的时候实际上还没有停课）~~\n\n10.8 UPD：濒临~~月赛~~月考，不过月考基本摆栏了\n\n值得一提的是，CSP二轮时间是10.29，正好是期中考试前一天……\n\n10.9 UPD：正在考虑接下来的停课事宜\n\n目前的建议是，停课前一定不要随意开摆，不然复课以后可能会非常难受\n\n10.11 UPD：确认月考后停课\n\n10.12 UPD：找班主任签字力。预计于10.13日正式停课，带着月考爆炸的忐忑心情出发了。希望不久后的自己，能够感谢现在的一切付出。\n\n10.13 UPD：停课第一天。上午开始整理政治思维导图~~（当作早读）~~，之后完善了笔记知识点的大纲，然后开始继续学习背包dp，线性dp以及区间dp的知识。下午做ljh出的模拟题，晚上颓废补题\n\n10.14 UPD：停课第二天。上午继续补题，下午继续学习dp。晚上回家颓废。\n\n10.15-16 UPD：周末回家。周六上午有课，下午打了模拟赛（然而起晚了，Div.2 130pts滚粗），晚上听网课。周日上午学习图的连通性问题 ~~（没听懂）~~ 以及kmp，终于弄懂了nlogn的LIS怎么写。\n\n10.17 UPD：颓了。~~整了一小会novelAI~~，下午去体测跑1000~~差点是爬着回来的~~，写了三道最短路的题，看到了SPFA的离谱优化（\n\n看报名系统的时候发现缴费突然关闭了，吓了我一大跳，~~差点原地退役~~\n\n10.18 UPD：上午做翰哥出的四道题 ~~（好毒瘤）~~ 并学习KMP，下午学会KMP了！！晚上复习ST表，继续看DP……最后二十分钟开了一道新题\n\n10.19 UPD：昨天晚上睡觉时想到了题目的一个离谱做法，今天一早过来居然把题切了……上午做了合并果子加强版（~~被狗数据气晕.jpg~~），然后图论，中间乱搞系统字体被制裁了……下午图论，晚上终于过了NOIP2021 T1。晚上还复健了数学，明天继续。今天过了7个题，~~下了好多毒瘤数据~~\n\n10.20 UPD：晨起看云。今天天气不错，云像奔袭的白马。上午中午鼓捣快速幂，gcd，筛法，下午生成树，晚上LCA\n\n10.21 UPD：上午继续图论，看二分图，二叉搜索树入了个小门，看了一道LCA的题 ~~（没做出来）~~ ，复习了一下kruskal重构树，然后被树链剖分和tarjan分别血虐……上午还把sdwc的ppt拿出来看了一看（果然有卡车运输）。下午又去体测了，结果测的是引体向上，于是去打了一节课乒乓球。于是今天一个题也没做，最后晚上几分钟看了看区间dp。图论好难。\n\n10.22 UPD：向日葵。向日葵。向日葵。向日葵。向日葵。向日葵……\n\n10.23 UPD：是得多做点题了，一天模拟赛给干爆了……接下来几天要向高强度做题过渡了。又过了两道拓扑排序的题，~~排水系统真的好毒瘤啊~~\n\n10.26 UPD：低迷。持续模拟赛中，分数不及预期，焦虑倍增。有消息说济南考点会换成xcsy？\n\n10.27 UPD：上午9时41分，在s/x组已经确认推迟（取消）之后，CSP-S SD最终确认取消，留下了许多需要考虑的问题。\n\n你说的对，但是《天天爱跑步》是由小c同学自主研发的一款全新开放世界养成类游戏。游戏发生在一个被称作「树」的幻想世界，在这里，被小c选中的人将被授予「观察员之眼」，导引计数之力‌……你将扮演一位名为「OIer」的神秘角色，在自由的跑步中邂逅性格各异、能力独特的测试点们，和他们一起骗分，找回失散的最短路——同时，逐步发掘「AC」的真相。\n\n2022.11.14 UPD：消失了两个多星期，补课去了。CSP之后在家长的建议下，在不确定NOIP能不能按时进行的前提下，不再继续停课。于是开始了一对一高强度补课，一直到上周五lpy基本确认了NOIP的按时举行，我才结束了浮沉的整整两周，又回到了机房。如同梦一般。\n\n这可能是最近以来压力最大的一段时间，不过好在都过去了。期中考试正好延后了一周，在许多原因的作用下，我去参加了期中考试，和预料的一样烂。坐在从学校回家的车上，我承认自己确实有点绷不住了。\n\n事实就是，在一个OI不受关注的弱校，在一个家长并没给予多少支持的家庭中，学习OI的路上，能靠的只有自己。我不禁觉得，我为那些自以为无比珍重的东西所背负的东西，其实早已超过了自己当初的设想。那一点点可怜的热情，到什么时候会消散呢？\n\n就在昨天，因为学校所在区的疫情，网课又回来了。所以我就坐在这里，把这份日记补完。我不准备给自己留下任何借口了，水平不足四个字，就胜过一切困难的总和。除了我自己，没有人能够毁灭我。但我真的能把握好这最后的时光吗？\n\n但是无论如何，我回来了。\n\n11.15 UPD：开始补网课……说实话还真挺多\n\n11.16 UPD：开始上某某xt的冲刺课，第一天lxl没出数据结构（\n\n但还是险些爆零\n\n11.18 UPD：今天是戚队讲课。为什么戚队一个威海人会有东北口音呢（\n\n这两天还是有点颓废，一整天做啥都没啥动力的感觉。清醒一点啊Kora！明天开始决不能再这样了！\n\n11.19 UPD：赞美良心出题人（\n于是今天模拟赛得到了还过得去的分数。\n\n11.20 UPD：这开始两天在微信群打卡核酸。JN疫情开始有点严重了，有一点担心SD NOIP会不会再取消\n\n于是时间里便在模拟赛之中度过了。随着日子一天又一天临近，对分数的焦虑也愈加明显。\n\n11.24 模拟赛的最后一天。题好难。于是颓废了，下午三点才起。\n\n剩下的时间看了看树形dp和线段树的应用，感觉漏洞还是挺大的。\n\n果然有地区NOIP取消了……北方各省中SD出人意料的坚挺。\n\n11.25 UPD：所以时间来到了最后一天。上午起的有点晚，起来之后开始补题，把各种dp又拿出来看了一遍。后来发现效率似乎并不高，然后开始背板子。\n\n之后默写各种板子到晚上，不死磕题目了。之后又把自己笔记看了看。夜晚在群友的互相rp++中度过。\n\n十点多就睡了。那么，来吧。\n\n## 恍惚的NOIP2022\n\n当天早上起来精神状态还可以，早饭害怕中午会饿吃的不少（\n\n在车上还在看kmp的板子，七点多一点就到了省实验门口。之后和同校的几位神犇汇合进去了，等待时间小于预期。没有面基到任何人，左右两边都是同校的，另外还有一个初中同学NOIP前就退役了，自己初中的一位初二神牛也没有见到。之后爬五楼去了11考场4号机（要素察觉），非常平凡。\n\n键盘有点脏但是没坏，问题不大。有搜狗输入法，可以用双拼好耶（虽然根本没打几个中文）。开考前摸了一颗线段树，然后没调过，rp--。\n\n解压压缩包就出问题了，密码是错的，rp又--。\n\n解压密码是biu#2019，pdf密码是solo@2022，并未看懂与2019有何干系\n\n于是看题。\n\n然后就炸了。感觉四个题都不好做，感觉这把是完了。\n\n考点要求戴N95口罩，加之心理作用影响，我感觉自己甚至有点呼吸困难的感觉\n\n但是还是试着摸了一下T3，后来发现似乎不可做，于是回来老老实实做T1。一开始完全没有思路，回过神来后发现可以递推求出连续0的个数，然后遂迅速摸了一个$n^3$做法，正确性似乎问题不大。但是写得比较慢，状态回来过拍已经九点四五十了。但是显然可以轻松卡掉，不过还是先往后做了。\n\n感觉T2完全不可做，写了半个DFS后弃疗。这时发现T4询问结构比较简单，遂尝试用ST表暴力维护。然后发现实暴力枚举区间确实太劣，大样例过不去，预期得分20->8。\n\n然后又滚回去看T2了，一直在T2T3之间来回看，但是始终不得头绪。\n\n尝试模拟T2的两个栈情况，发现题意理解不正确，然后模拟不出来了。想再回去优化T1，结果还是什么都想不到。\n\n然后就快要到时间了。绝望了，看着代码不知所措十多分钟后打铃交卷。\n\n出来以后简单讨论了一下，但是好像也没什么好讨论的。本想在实验的登攀杯前合影留念，不过最后因为没人给拍照便放弃了。做了核酸后滚出了实验。\n\n然后发现前一天复习的内容基本都没用上。计数类做的不多，还想着不会考这么多，结果悲剧了。然后就这么像是做了一场梦一般，我就回家了，OI生涯就此告终。\n\n## 最后的最后\n\n走出考场的那一刻，我的心情纷繁而复杂。一方面和同学在一起，消极的情绪没有完全地显露，但另一方面却确有一种怅然若失之感。\n\n再看看我曾经写下的这么多日志和笔记，顿时觉得有一点滑稽。接近一个月的总停课时长里面，似乎学了不少东西，记了不少笔记，但结果却是什么都不会。\n\ncsp前夕我在机房迷茫的时候，我教练问我，既然如此，隔壁生竞比你们还卷，比赛也比你们晚多了，他们怎么就能挺住的？\n\n我当时想都没想就直接说：他们很多人也没想明白。\n\n但是毕竟生物是高考学科，无论如何都是能直接作用于高考分数的，而说出这句话的我，虽然依然和机房中的五个人苟到了最后，但是比起那些选择放弃的人来说，不过是多苟了若干日子而已，反倒显得自不量力。看我日志的内容也能发现，我欠的实在是太多了，用惨不忍睹来形容都算是一种夸奖，菜就是菜，又有什么脸面长篇大论呢？\n\n这短暂的一年OI生涯，就是这么断断而续续，走走又停停的一段时光。高一时未将OI放在心上，远没有做好觉悟，到后来兵临城下，又仓促决断，拼上所谓一切来应战，真的是一个很有我自己风格的诙谐故事。\n\n之后笔试勉强擦线飞过，SD CSP二轮又取消，使我的NOIP前参赛经验彻底变成了零，那些没有在CSP集中暴露的问题，最终彻底让我的OI生涯走向了一个失败的终局。\n\n“你是一个OIer吗？”\n\n如果说你半年之前这样问我，我应该会直接回答：不是。\n\n我将这篇博客的URL标识符定为$One\\; last\\; kiss$ ，在SD csp二轮取消之后，NOIP2022就是我的$One\\; last\\; NOIP$。NOIP2022是我的第一场正式比赛，同时也是最后一场，OI与我而言如同过客，好像并未在我的人生中留下足够的分量。于我来说，我的身份大概只是一个普通高中生，在之前人生的15年里都没怎么写过代码，但又总是怀抱一种可悲的虚荣心，时不时用这种身份暗示自己。我没有扎实的代码功底，没有缜密的逻辑思维，也没有敏锐的洞察能力，直到今天，我也远远称不上一个合格的OIer。更不用说那些缠绕我身的弊病并没有因OI隐去，并反过来继续影响着包括OI的我的一切。\n\n但即便如此，OI依然使我受益良多。\n\n但就像我在我上交代码里的那些注释所说的，我并不后悔。\n\n我深知自己能力的不足，也知道即将迎来的高二生活会有多么辛苦，更知道哪怕最终能够冲击1=（省选属于痴人说梦）， 带来的回报也并不多。在我父母看来，我的选择并不理智，纯属于浪费时间和金钱，尤其是在这NOIP结束以后。但我至今唯一后悔的一件事，反而是为什么没有早点开始接触OI。\n\n我曾经在一篇随笔里写，将自己的青春投入到OI之中，我不会后悔，直到今天我也这么认为。在我OI生涯的前半年我选择摆烂，但后半年我所取得的进步，可能会令当时在SDWC望洋兴叹的我不敢相信，更不用说初中时的那个稚嫩的我。它引导我专注，教会我知识，培养我思维，开拓我眼界，给予我历练，让我结识无数有趣的人，教我如何平衡虚渺的理想和平凡的现实，变得更会交涉、更有韧性。即使从最功利的角度说，它也赋予我利用科技改造世界的最基本的可能性。我坚信这段经历会改变我，这会是我人生中的一笔别样的宝藏。去年的这个时候，我曾郁郁寡欢地在一篇文章中写：“那些好像要伴着高中生活应允而来美好事物，只不过是虚幻的想象。”而我如今居然能用这热烈的年华做一两点自己热爱的事情，把那想象变现，到目前为止大概也算是没有白活。\n\nOI的山峰从不属于我，那今日便当是黄粱梦醒吧。未来的山峰仍有许多要去登攀，相信这些越过大风大浪的经历，能在下一个关键时刻继续带领我向前。\n\n我喜欢隔三差五地看OIerdb，看往年的分数线，在一场场比赛的分数之间见证一个个选手浮沉各异的征战历程，也曾想象着在那上面留下自己的名字。现在名字可能留下了，只不过带着一个颓然的分数，而作为OIer的我也成为了记录在案的历史，NOIP2023正式开始倒计时。但我觉得OI带给了当下这个正在码字的我许多可能性，让我不禁有些期待下一个自己的样子。不过紧接下来，我要先和whk正面决一死战，这次我无路可逃。\n\n好，我矫情完了。用这一年的时间，写就了一个滑稽戏谑、不伦不类的故事。如果这段故事能给以后人警醒，或是能博得读者的两声嘲笑，那就算是没有白费我的笔墨。\n\n## 最后的最后？\n\n这一段，交由我的未来续写。也许明年，也许待高考之后，也许到我大学毕业，它将迎来它的完全。\n\n待续。\n\n2022年11月27至28日\n\n# 最后之后\n\n今天，我有资格续写它了吗？\n\n也许还早吧。\n\n最近学到了一个词：如一。\n\n我的确认为，如一是一个难能可贵的品质。跨越那千山万水，不靠一鼓作气，不靠天降鸿运，我只希望：如一。\n\n能做到吗？\n\n起码要试试吧。\n\n到这里，确实是最后之后了。太多的情绪都已经表达完了，已经可以了。\n\n\n\n\n\n","source":"_posts/csp-noip备战日志10-写在最后之后.md","raw":"---\ntitle: csp-noip备战日志10-写在最后之后\ndate: 2023-07-20 22:56:02\ntags: [csp-noip备战日志,时隙随思,OI]\n---\n\n# 最后之后\n\n当你看到这些文字的时候，一个蒟蒻OIer的一年多OI生涯已经结束了，其实已经结束很久了。我也本想在生涯的末期完成这些文字，但是就这么一直拖到了2023年7月，在我即将将这些文章整理上传到我的博客上时，我终于把这一段补上了。当然，作为退役回忆，已另写了一篇文章，附在下面。\n\n已经快要一年了。noip之后的日子如飞一般过去。整个高二对于我来说，是先摆烂前一半，再用剩下的一半拼命追赶，从结果上来说，亏盈自平，努力一个学期终于回到了高一下期末的那个原点。那么，向前的每一步，都是惊喜了。往事如过眼云烟，一去不回，但我始终珍视着这段别样的时光，那段~~超爽停课~~疯狂而不顾一切的时光，并且尝试着继续完善这份资料。我坚信，~~虽然时至今日我还是个彩笔~~，总有一天，我会和算法竞赛再会的。\n\n@皎月半洒花是一位著名OIer，同时也是济南老乡。除了详细的dp和Hash教程给我了很大的启发外，花花飞扬的文采同样给我留下了深刻的印象。OIer们大多都是很有才情的，比如wqy的拉丁舞，某位连载在洛谷上的小说，还有EI、花花等神触的随笔，他们无不提醒我们生而为人本身无限的可能性。我想，人们并不总是要拘泥于普遍的看法，更不用因为「自己应该是个什么样的人」这样的想法而畏葸不前。请记住，你从不本该成为怎样的人，只有跨出一步试一试，才知道你会成为怎样的人。\n\n所以，今天我又向着一个新的目标进发了。再见，为了再见。\n\n2023年7月20日午夜\n\n# 鸣谢\n\n这些笔记参考了编程兔、qbxt、sdwc/sdsc的相关线下资料以及OIwiki、深进、紫书、yxc算法系列课程以及数不胜数的OI博客的相关内容，并参考[能力全面提升综合题单](https://www.luogu.com.cn/training/9391)制定了知识提纲。我要感谢这些资料以及在其背后为此付出努力的所有人，并向他们致以最真挚的敬意。这些资料中有许多是免费供大家学习的，这是属于OIer们的、不同于其他竞赛的宝贵财富，闪耀着互联网精神的光辉。我还要特别感谢鹿秀娥老师以及郭龙举、赵一鸣、冯光耀和李俊翰四位同学，没有你们共同的陪伴和支持，就没有这篇笔记和我在OI生涯中的一切。\n\n\n再往下，是一些自顾自的啰嗦。这一部分是考完noip当晚写的，作为单独的一篇文章在洛谷上发过。\n\n# 一个幽默的故事\n\n## 回首\n\n##### 一个微不足道的开始\n\n抛开再之前乱点的那些乱七八糟的技能树不谈，我第一次听闻OI，大概是在初二的时候。作为SDFZ的某个卑微分校，在水群时偶然加入了一个名为`sdfz计算机交流群`的QQ群,从而结识了qyc椰叶等一大批神犇（然而人家并不认识我就是了）。那个时候好像正值dalao们备战CSP2019，于是我就这么正式结识了OI。大概在同一时间，我观摩了wqy的退役回忆，于是对于OIer这个神秘而炫酷的群体又有了更多的一点印象，不过直到那个时候，我对于OI的认识，都是模糊而浅薄的。\n\n2020年初，我在洛谷注册了这个账号，并利用当时仅会的一点半吊子python在洛谷主题库中尝试做题，不过由于孱弱的码力和理解能力只是浅尝辄止。我当年的最后一个提交记录定格在不久之后的2020年2月22日，是不高兴的津津这道题，之后我又告别了洛谷。\n\n##### 再拾\n\n现在想来，之所以在2020年年初会想起来在洛谷上做题，大概也是因为疫情居家实在闲的没事干，于是就想起来了。正如那时的我料不到这轰轰烈烈的疫情会一直持续到2022年干碎SD的CSP，我更料不到我会在2020那年之后再一次入门OI。\n\n时间来到2021年，中考结束的我又闲了下来。于是闲的没事干的我又一次盘算起了自己的未来。\n\n我可能是一个想得比较多的人，经常在一些同龄人不太会考虑的问题上绞尽脑汁、纠缠不清——然而因为大问题想不明白，该做的事情却也不愿意去塌下心来做，所以才成了今天这个一事无成的我，不过这是后话了。——总之，在对一顿未来的人生大思考之后，我把书架上那本几年前就买回来却一直没碰过的C++primer又抽了出来。\n\n直到那个时候，我也并没有学OI的打算，只是想着从C++早日入门编程，然后就去学unity 3D，然后利用高中时间开发点自己喜欢的小玩意。后来中考成绩并不尽如人意，也就沉寂下去了。就这样一直到了高中开学信竞招新的时候，因为一些奇奇怪怪的爱好统计，我被班主任劝着去试试，我也就忽然有了尝试一下的念头。\n\n现在来看，至少入门编程这件事，做得还是比较成功的。我想学会运用一门语言的一个很好的方式，就是用它去敲算法题。\n\n于是我去信息处找了负责的老师记下了名字，等待着后面的消息。\n\n##### 方长\n\n第一次去上课的时候，人还是相当多的，几乎撑满了六十人的机房，不过大半大概都是隔壁某特色班被其班主任硬拉过来的。我选了一台背对窗户的机器坐下，然后发现隔壁的隔壁的一个老哥正在摆弄他放在U盘里的galgame，然后我就谔谔了。这位老哥还是后来机房中自带笔记本的唯一的人（我和某另几个人用的是wintogo），一直陪我到了2021年暑假，不过在最后的几个月还是放弃了，也没有报名csp。和他一样，在第一次上课之后的两三个月以内，机房的人数再以肉眼可见的速度减少，甚至还有跑路到隔壁生竞的……不过我校的生竞还是要比OI强，祝他好运吧。到NOIP2021的时候，机房里只剩下了不到20人。\n\n当然，一年级生的我自然是无法参加NOIP2021的。看着放出的自测的题目，顿时感觉自己要走的路还有很多很多。这个时候的我是什么水平呢？\n\n我被P7398这一道红题暴打了。在那之前，还有三打口算练习题，五交笨小猴，秒切小书童的光辉战绩，这个时候的代码全是感情，没有一点算法的痕迹。学校的竞赛课一周只有一节，还有就是周日的晚上，那时的我自然是不敢在其余时间往机房乱窜的。所以时间就在无尽的摸鱼和偶尔的刷题中一晃而过，时间已经来到了2022年。\n\n这个时候，SDWC来了。我从未参与类似的活动，因此立即决定报名参加。SDWC2022在lcez举办，于是我就获得了一张lcez7天体验卡。每天讲课测试的日子忙碌而又充实，除了课也听不懂，题也不会做以外。不过还是要说我是有进步的，比如说第一次参加了模拟赛。另外就是结交了几位OIer，基本都是同龄人或是初中生，直到NOIP2022前夕还互有联系，祝他们生涯顺利吧。我还在SDWC遇到了那位wqy大佬，我之所以知道之前那篇文章是他所作，正是因为有人在wqy回忆自己的生涯时，把他的文章发到了群里。他在WC跳拉丁舞的事迹令我印象深刻。\n\n后来还找到了视频膜拜（\n\n##### 雾\n\n转过年来到了新学期，因为疫情和高考，我们连续居家网课了极长的时间，而这段时间无疑被我荒废了。居家期间我的进步极其缓慢，这一点从我在2022年3到5月间只交同一道单源最短路模板交两页，以及四月份一题未做中都能看出。这个时候whk也不如以往，令人心烦，我好像把OI忘了。\n\n无疑，我断送了一段大好的时光，最终自吞苦果。\n\n学习竞赛无疑是需要强大的意志力和自控力的，尤其是在那时学校帮不上你的忙，大量知识都得靠自学的情况下。而很显然我缺的就是这个。这种混乱的日子一直到暑假。\n\n##### 怎么办？\n\nSDSC如期而至，但这次是在日照。日照的酷暑和暴雨，山外的电动滑板车，以及神必食堂，神必网络，神必空调和神必宿管都给我留下了极其深刻而不可磨灭的印象，不过好在至少你可以选择花钱吃顿好的，我也命硬没有感冒。SC回来以后又到了补whk的时间，这导致实际上暑假进度也远没有达到我的计划，且这个时候已经临近CSP一轮了。\n\n怎么办？以我现在的水平，csp能不能过还是个未知数，要消耗的时间却是实实在在的。这么来到了九月份。\n\n怎么办？哪怕我现在放弃，前面花费的时间也完全不算多，就当是培养爱好了。而接下来停课的牺牲，可是不能不考虑的。既然想要更进一步早已无望，就算能拿到2=哪怕1=，是否真的值得呢？\n\n结果，在csp笔试前的周五晚，我的焦虑在整个机房扩散开来。此时整个高二已经仅有5人还在坚持，机房中充满了沉闷的空气。\n\n不过幸好，一天后的csp笔试还是贴着线过了。\n\n##### 冲刺\n\n那个时候还有一件事，就是月考，我毫无疑问地摆烂了，烂得非常彻底。这也促使我不得不逃离whk的琐事，开始了第一轮停课。\n\n之所以说是第一轮，是因为csp二轮取消以后，我又回去补了两周whk。过程实在是有点痛苦，也给我留下了不可磨灭的回忆。我和我父母的关系大概也在这个时候降至冰点，不过既然如此，我也就有什么活就敞开了说了。结果到了两周结束的时候，家庭的阻力反而小了不少，我也就可以再一次回到OI中来。\n\n停课的日子确实是独特的。除了害怕体测挂科而不得不去上体育以外，我们五个中的三个于住约等于住进了机房，还有一位直接回了家。每天默默听着上课铃和下课铃交替敲响，自己心底里也有一根弦在一点一点绷起来。我真的想给这些时间一个满意的回答。这期间我们几个的午觉全是躺在拼起的木凳子上睡的，机位四周也经常摆着大包小包~~甚至whk资料~~。不过这个机房还有包括我自己班在内的很多班级的信息课，所以大概也没有敢那么放肆。\n\n隔壁高一的纳新这时候也已结束了。感觉新一届明显实力强劲，有吊打我们几个零基础草根的趋势，当然后来至少是把我吊打了。希望我们学校的OI能够越来越强，早日脱离弱校的苦海吧。\n\n另一个心思这时候也渐渐浮现。这么值得纪念的时光，或许我也应该留下些什么？所以我开始留心写题解、记笔记，大概也有一些成效，已积累了数万字了。同时，也有了下面这一段日志。\n\n---\n\n>下面的文字本是我的OI笔记中的一栏，用类似日记的方式记录了我的停课生活和心路历程，摘录至此遂得。或将是本文最为格格不入的一段活泼的文字。\n\n当我在停课时。\n\n写完这个标题之后我发现，我好像没有什么资格给予各位文化课上的任何建议，于是，就当我是在记录自己的停课生涯吧。\n\n~~（我在创建这个标题的时候实际上还没有停课）~~\n\n10.8 UPD：濒临~~月赛~~月考，不过月考基本摆栏了\n\n值得一提的是，CSP二轮时间是10.29，正好是期中考试前一天……\n\n10.9 UPD：正在考虑接下来的停课事宜\n\n目前的建议是，停课前一定不要随意开摆，不然复课以后可能会非常难受\n\n10.11 UPD：确认月考后停课\n\n10.12 UPD：找班主任签字力。预计于10.13日正式停课，带着月考爆炸的忐忑心情出发了。希望不久后的自己，能够感谢现在的一切付出。\n\n10.13 UPD：停课第一天。上午开始整理政治思维导图~~（当作早读）~~，之后完善了笔记知识点的大纲，然后开始继续学习背包dp，线性dp以及区间dp的知识。下午做ljh出的模拟题，晚上颓废补题\n\n10.14 UPD：停课第二天。上午继续补题，下午继续学习dp。晚上回家颓废。\n\n10.15-16 UPD：周末回家。周六上午有课，下午打了模拟赛（然而起晚了，Div.2 130pts滚粗），晚上听网课。周日上午学习图的连通性问题 ~~（没听懂）~~ 以及kmp，终于弄懂了nlogn的LIS怎么写。\n\n10.17 UPD：颓了。~~整了一小会novelAI~~，下午去体测跑1000~~差点是爬着回来的~~，写了三道最短路的题，看到了SPFA的离谱优化（\n\n看报名系统的时候发现缴费突然关闭了，吓了我一大跳，~~差点原地退役~~\n\n10.18 UPD：上午做翰哥出的四道题 ~~（好毒瘤）~~ 并学习KMP，下午学会KMP了！！晚上复习ST表，继续看DP……最后二十分钟开了一道新题\n\n10.19 UPD：昨天晚上睡觉时想到了题目的一个离谱做法，今天一早过来居然把题切了……上午做了合并果子加强版（~~被狗数据气晕.jpg~~），然后图论，中间乱搞系统字体被制裁了……下午图论，晚上终于过了NOIP2021 T1。晚上还复健了数学，明天继续。今天过了7个题，~~下了好多毒瘤数据~~\n\n10.20 UPD：晨起看云。今天天气不错，云像奔袭的白马。上午中午鼓捣快速幂，gcd，筛法，下午生成树，晚上LCA\n\n10.21 UPD：上午继续图论，看二分图，二叉搜索树入了个小门，看了一道LCA的题 ~~（没做出来）~~ ，复习了一下kruskal重构树，然后被树链剖分和tarjan分别血虐……上午还把sdwc的ppt拿出来看了一看（果然有卡车运输）。下午又去体测了，结果测的是引体向上，于是去打了一节课乒乓球。于是今天一个题也没做，最后晚上几分钟看了看区间dp。图论好难。\n\n10.22 UPD：向日葵。向日葵。向日葵。向日葵。向日葵。向日葵……\n\n10.23 UPD：是得多做点题了，一天模拟赛给干爆了……接下来几天要向高强度做题过渡了。又过了两道拓扑排序的题，~~排水系统真的好毒瘤啊~~\n\n10.26 UPD：低迷。持续模拟赛中，分数不及预期，焦虑倍增。有消息说济南考点会换成xcsy？\n\n10.27 UPD：上午9时41分，在s/x组已经确认推迟（取消）之后，CSP-S SD最终确认取消，留下了许多需要考虑的问题。\n\n你说的对，但是《天天爱跑步》是由小c同学自主研发的一款全新开放世界养成类游戏。游戏发生在一个被称作「树」的幻想世界，在这里，被小c选中的人将被授予「观察员之眼」，导引计数之力‌……你将扮演一位名为「OIer」的神秘角色，在自由的跑步中邂逅性格各异、能力独特的测试点们，和他们一起骗分，找回失散的最短路——同时，逐步发掘「AC」的真相。\n\n2022.11.14 UPD：消失了两个多星期，补课去了。CSP之后在家长的建议下，在不确定NOIP能不能按时进行的前提下，不再继续停课。于是开始了一对一高强度补课，一直到上周五lpy基本确认了NOIP的按时举行，我才结束了浮沉的整整两周，又回到了机房。如同梦一般。\n\n这可能是最近以来压力最大的一段时间，不过好在都过去了。期中考试正好延后了一周，在许多原因的作用下，我去参加了期中考试，和预料的一样烂。坐在从学校回家的车上，我承认自己确实有点绷不住了。\n\n事实就是，在一个OI不受关注的弱校，在一个家长并没给予多少支持的家庭中，学习OI的路上，能靠的只有自己。我不禁觉得，我为那些自以为无比珍重的东西所背负的东西，其实早已超过了自己当初的设想。那一点点可怜的热情，到什么时候会消散呢？\n\n就在昨天，因为学校所在区的疫情，网课又回来了。所以我就坐在这里，把这份日记补完。我不准备给自己留下任何借口了，水平不足四个字，就胜过一切困难的总和。除了我自己，没有人能够毁灭我。但我真的能把握好这最后的时光吗？\n\n但是无论如何，我回来了。\n\n11.15 UPD：开始补网课……说实话还真挺多\n\n11.16 UPD：开始上某某xt的冲刺课，第一天lxl没出数据结构（\n\n但还是险些爆零\n\n11.18 UPD：今天是戚队讲课。为什么戚队一个威海人会有东北口音呢（\n\n这两天还是有点颓废，一整天做啥都没啥动力的感觉。清醒一点啊Kora！明天开始决不能再这样了！\n\n11.19 UPD：赞美良心出题人（\n于是今天模拟赛得到了还过得去的分数。\n\n11.20 UPD：这开始两天在微信群打卡核酸。JN疫情开始有点严重了，有一点担心SD NOIP会不会再取消\n\n于是时间里便在模拟赛之中度过了。随着日子一天又一天临近，对分数的焦虑也愈加明显。\n\n11.24 模拟赛的最后一天。题好难。于是颓废了，下午三点才起。\n\n剩下的时间看了看树形dp和线段树的应用，感觉漏洞还是挺大的。\n\n果然有地区NOIP取消了……北方各省中SD出人意料的坚挺。\n\n11.25 UPD：所以时间来到了最后一天。上午起的有点晚，起来之后开始补题，把各种dp又拿出来看了一遍。后来发现效率似乎并不高，然后开始背板子。\n\n之后默写各种板子到晚上，不死磕题目了。之后又把自己笔记看了看。夜晚在群友的互相rp++中度过。\n\n十点多就睡了。那么，来吧。\n\n## 恍惚的NOIP2022\n\n当天早上起来精神状态还可以，早饭害怕中午会饿吃的不少（\n\n在车上还在看kmp的板子，七点多一点就到了省实验门口。之后和同校的几位神犇汇合进去了，等待时间小于预期。没有面基到任何人，左右两边都是同校的，另外还有一个初中同学NOIP前就退役了，自己初中的一位初二神牛也没有见到。之后爬五楼去了11考场4号机（要素察觉），非常平凡。\n\n键盘有点脏但是没坏，问题不大。有搜狗输入法，可以用双拼好耶（虽然根本没打几个中文）。开考前摸了一颗线段树，然后没调过，rp--。\n\n解压压缩包就出问题了，密码是错的，rp又--。\n\n解压密码是biu#2019，pdf密码是solo@2022，并未看懂与2019有何干系\n\n于是看题。\n\n然后就炸了。感觉四个题都不好做，感觉这把是完了。\n\n考点要求戴N95口罩，加之心理作用影响，我感觉自己甚至有点呼吸困难的感觉\n\n但是还是试着摸了一下T3，后来发现似乎不可做，于是回来老老实实做T1。一开始完全没有思路，回过神来后发现可以递推求出连续0的个数，然后遂迅速摸了一个$n^3$做法，正确性似乎问题不大。但是写得比较慢，状态回来过拍已经九点四五十了。但是显然可以轻松卡掉，不过还是先往后做了。\n\n感觉T2完全不可做，写了半个DFS后弃疗。这时发现T4询问结构比较简单，遂尝试用ST表暴力维护。然后发现实暴力枚举区间确实太劣，大样例过不去，预期得分20->8。\n\n然后又滚回去看T2了，一直在T2T3之间来回看，但是始终不得头绪。\n\n尝试模拟T2的两个栈情况，发现题意理解不正确，然后模拟不出来了。想再回去优化T1，结果还是什么都想不到。\n\n然后就快要到时间了。绝望了，看着代码不知所措十多分钟后打铃交卷。\n\n出来以后简单讨论了一下，但是好像也没什么好讨论的。本想在实验的登攀杯前合影留念，不过最后因为没人给拍照便放弃了。做了核酸后滚出了实验。\n\n然后发现前一天复习的内容基本都没用上。计数类做的不多，还想着不会考这么多，结果悲剧了。然后就这么像是做了一场梦一般，我就回家了，OI生涯就此告终。\n\n## 最后的最后\n\n走出考场的那一刻，我的心情纷繁而复杂。一方面和同学在一起，消极的情绪没有完全地显露，但另一方面却确有一种怅然若失之感。\n\n再看看我曾经写下的这么多日志和笔记，顿时觉得有一点滑稽。接近一个月的总停课时长里面，似乎学了不少东西，记了不少笔记，但结果却是什么都不会。\n\ncsp前夕我在机房迷茫的时候，我教练问我，既然如此，隔壁生竞比你们还卷，比赛也比你们晚多了，他们怎么就能挺住的？\n\n我当时想都没想就直接说：他们很多人也没想明白。\n\n但是毕竟生物是高考学科，无论如何都是能直接作用于高考分数的，而说出这句话的我，虽然依然和机房中的五个人苟到了最后，但是比起那些选择放弃的人来说，不过是多苟了若干日子而已，反倒显得自不量力。看我日志的内容也能发现，我欠的实在是太多了，用惨不忍睹来形容都算是一种夸奖，菜就是菜，又有什么脸面长篇大论呢？\n\n这短暂的一年OI生涯，就是这么断断而续续，走走又停停的一段时光。高一时未将OI放在心上，远没有做好觉悟，到后来兵临城下，又仓促决断，拼上所谓一切来应战，真的是一个很有我自己风格的诙谐故事。\n\n之后笔试勉强擦线飞过，SD CSP二轮又取消，使我的NOIP前参赛经验彻底变成了零，那些没有在CSP集中暴露的问题，最终彻底让我的OI生涯走向了一个失败的终局。\n\n“你是一个OIer吗？”\n\n如果说你半年之前这样问我，我应该会直接回答：不是。\n\n我将这篇博客的URL标识符定为$One\\; last\\; kiss$ ，在SD csp二轮取消之后，NOIP2022就是我的$One\\; last\\; NOIP$。NOIP2022是我的第一场正式比赛，同时也是最后一场，OI与我而言如同过客，好像并未在我的人生中留下足够的分量。于我来说，我的身份大概只是一个普通高中生，在之前人生的15年里都没怎么写过代码，但又总是怀抱一种可悲的虚荣心，时不时用这种身份暗示自己。我没有扎实的代码功底，没有缜密的逻辑思维，也没有敏锐的洞察能力，直到今天，我也远远称不上一个合格的OIer。更不用说那些缠绕我身的弊病并没有因OI隐去，并反过来继续影响着包括OI的我的一切。\n\n但即便如此，OI依然使我受益良多。\n\n但就像我在我上交代码里的那些注释所说的，我并不后悔。\n\n我深知自己能力的不足，也知道即将迎来的高二生活会有多么辛苦，更知道哪怕最终能够冲击1=（省选属于痴人说梦）， 带来的回报也并不多。在我父母看来，我的选择并不理智，纯属于浪费时间和金钱，尤其是在这NOIP结束以后。但我至今唯一后悔的一件事，反而是为什么没有早点开始接触OI。\n\n我曾经在一篇随笔里写，将自己的青春投入到OI之中，我不会后悔，直到今天我也这么认为。在我OI生涯的前半年我选择摆烂，但后半年我所取得的进步，可能会令当时在SDWC望洋兴叹的我不敢相信，更不用说初中时的那个稚嫩的我。它引导我专注，教会我知识，培养我思维，开拓我眼界，给予我历练，让我结识无数有趣的人，教我如何平衡虚渺的理想和平凡的现实，变得更会交涉、更有韧性。即使从最功利的角度说，它也赋予我利用科技改造世界的最基本的可能性。我坚信这段经历会改变我，这会是我人生中的一笔别样的宝藏。去年的这个时候，我曾郁郁寡欢地在一篇文章中写：“那些好像要伴着高中生活应允而来美好事物，只不过是虚幻的想象。”而我如今居然能用这热烈的年华做一两点自己热爱的事情，把那想象变现，到目前为止大概也算是没有白活。\n\nOI的山峰从不属于我，那今日便当是黄粱梦醒吧。未来的山峰仍有许多要去登攀，相信这些越过大风大浪的经历，能在下一个关键时刻继续带领我向前。\n\n我喜欢隔三差五地看OIerdb，看往年的分数线，在一场场比赛的分数之间见证一个个选手浮沉各异的征战历程，也曾想象着在那上面留下自己的名字。现在名字可能留下了，只不过带着一个颓然的分数，而作为OIer的我也成为了记录在案的历史，NOIP2023正式开始倒计时。但我觉得OI带给了当下这个正在码字的我许多可能性，让我不禁有些期待下一个自己的样子。不过紧接下来，我要先和whk正面决一死战，这次我无路可逃。\n\n好，我矫情完了。用这一年的时间，写就了一个滑稽戏谑、不伦不类的故事。如果这段故事能给以后人警醒，或是能博得读者的两声嘲笑，那就算是没有白费我的笔墨。\n\n## 最后的最后？\n\n这一段，交由我的未来续写。也许明年，也许待高考之后，也许到我大学毕业，它将迎来它的完全。\n\n待续。\n\n2022年11月27至28日\n\n# 最后之后\n\n今天，我有资格续写它了吗？\n\n也许还早吧。\n\n最近学到了一个词：如一。\n\n我的确认为，如一是一个难能可贵的品质。跨越那千山万水，不靠一鼓作气，不靠天降鸿运，我只希望：如一。\n\n能做到吗？\n\n起码要试试吧。\n\n到这里，确实是最后之后了。太多的情绪都已经表达完了，已经可以了。\n\n\n\n\n\n","slug":"csp-noip备战日志10-写在最后之后","published":1,"updated":"2023-07-20T16:45:53.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vh00062agw864f0j59","content":"<h1 id=\"最后之后\">最后之后</h1>\n<p>当你看到这些文字的时候，一个蒟蒻OIer的一年多OI生涯已经结束了，其实已经结束很久了。我也本想在生涯的末期完成这些文字，但是就这么一直拖到了2023年7月，在我即将将这些文章整理上传到我的博客上时，我终于把这一段补上了。当然，作为退役回忆，已另写了一篇文章，附在下面。</p>\n<p>已经快要一年了。noip之后的日子如飞一般过去。整个高二对于我来说，是先摆烂前一半，再用剩下的一半拼命追赶，从结果上来说，亏盈自平，努力一个学期终于回到了高一下期末的那个原点。那么，向前的每一步，都是惊喜了。往事如过眼云烟，一去不回，但我始终珍视着这段别样的时光，那段<del>超爽停课</del>疯狂而不顾一切的时光，并且尝试着继续完善这份资料。我坚信，<del>虽然时至今日我还是个彩笔</del>，总有一天，我会和算法竞赛再会的。</p>\n<p><span class=\"citation\" data-cites=\"皎月半洒花是一位著名OIer\">@皎月半洒花是一位著名OIer</span>，同时也是济南老乡。除了详细的dp和Hash教程给我了很大的启发外，花花飞扬的文采同样给我留下了深刻的印象。OIer们大多都是很有才情的，比如wqy的拉丁舞，某位连载在洛谷上的小说，还有EI、花花等神触的随笔，他们无不提醒我们生而为人本身无限的可能性。我想，人们并不总是要拘泥于普遍的看法，更不用因为「自己应该是个什么样的人」这样的想法而畏葸不前。请记住，你从不本该成为怎样的人，只有跨出一步试一试，才知道你会成为怎样的人。</p>\n<p>所以，今天我又向着一个新的目标进发了。再见，为了再见。</p>\n<p>2023年7月20日午夜</p>\n<h1 id=\"鸣谢\">鸣谢</h1>\n<p>这些笔记参考了编程兔、qbxt、sdwc/sdsc的相关线下资料以及OIwiki、深进、紫书、yxc算法系列课程以及数不胜数的OI博客的相关内容，并参考<a href=\"https://www.luogu.com.cn/training/9391\">能力全面提升综合题单</a>制定了知识提纲。我要感谢这些资料以及在其背后为此付出努力的所有人，并向他们致以最真挚的敬意。这些资料中有许多是免费供大家学习的，这是属于OIer们的、不同于其他竞赛的宝贵财富，闪耀着互联网精神的光辉。我还要特别感谢鹿秀娥老师以及郭龙举、赵一鸣、冯光耀和李俊翰四位同学，没有你们共同的陪伴和支持，就没有这篇笔记和我在OI生涯中的一切。</p>\n<p>再往下，是一些自顾自的啰嗦。这一部分是考完noip当晚写的，作为单独的一篇文章在洛谷上发过。</p>\n<h1 id=\"一个幽默的故事\">一个幽默的故事</h1>\n<h2 id=\"回首\">回首</h2>\n<h5 id=\"一个微不足道的开始\">一个微不足道的开始</h5>\n<p>抛开再之前乱点的那些乱七八糟的技能树不谈，我第一次听闻OI，大概是在初二的时候。作为SDFZ的某个卑微分校，在水群时偶然加入了一个名为<code>sdfz计算机交流群</code>的QQ群,从而结识了qyc椰叶等一大批神犇（然而人家并不认识我就是了）。那个时候好像正值dalao们备战CSP2019，于是我就这么正式结识了OI。大概在同一时间，我观摩了wqy的退役回忆，于是对于OIer这个神秘而炫酷的群体又有了更多的一点印象，不过直到那个时候，我对于OI的认识，都是模糊而浅薄的。</p>\n<p>2020年初，我在洛谷注册了这个账号，并利用当时仅会的一点半吊子python在洛谷主题库中尝试做题，不过由于孱弱的码力和理解能力只是浅尝辄止。我当年的最后一个提交记录定格在不久之后的2020年2月22日，是不高兴的津津这道题，之后我又告别了洛谷。</p>\n<h5 id=\"再拾\">再拾</h5>\n<p>现在想来，之所以在2020年年初会想起来在洛谷上做题，大概也是因为疫情居家实在闲的没事干，于是就想起来了。正如那时的我料不到这轰轰烈烈的疫情会一直持续到2022年干碎SD的CSP，我更料不到我会在2020那年之后再一次入门OI。</p>\n<p>时间来到2021年，中考结束的我又闲了下来。于是闲的没事干的我又一次盘算起了自己的未来。</p>\n<p>我可能是一个想得比较多的人，经常在一些同龄人不太会考虑的问题上绞尽脑汁、纠缠不清——然而因为大问题想不明白，该做的事情却也不愿意去塌下心来做，所以才成了今天这个一事无成的我，不过这是后话了。——总之，在对一顿未来的人生大思考之后，我把书架上那本几年前就买回来却一直没碰过的C++primer又抽了出来。</p>\n<p>直到那个时候，我也并没有学OI的打算，只是想着从C++早日入门编程，然后就去学unity 3D，然后利用高中时间开发点自己喜欢的小玩意。后来中考成绩并不尽如人意，也就沉寂下去了。就这样一直到了高中开学信竞招新的时候，因为一些奇奇怪怪的爱好统计，我被班主任劝着去试试，我也就忽然有了尝试一下的念头。</p>\n<p>现在来看，至少入门编程这件事，做得还是比较成功的。我想学会运用一门语言的一个很好的方式，就是用它去敲算法题。</p>\n<p>于是我去信息处找了负责的老师记下了名字，等待着后面的消息。</p>\n<h5 id=\"方长\">方长</h5>\n<p>第一次去上课的时候，人还是相当多的，几乎撑满了六十人的机房，不过大半大概都是隔壁某特色班被其班主任硬拉过来的。我选了一台背对窗户的机器坐下，然后发现隔壁的隔壁的一个老哥正在摆弄他放在U盘里的galgame，然后我就谔谔了。这位老哥还是后来机房中自带笔记本的唯一的人（我和某另几个人用的是wintogo），一直陪我到了2021年暑假，不过在最后的几个月还是放弃了，也没有报名csp。和他一样，在第一次上课之后的两三个月以内，机房的人数再以肉眼可见的速度减少，甚至还有跑路到隔壁生竞的……不过我校的生竞还是要比OI强，祝他好运吧。到NOIP2021的时候，机房里只剩下了不到20人。</p>\n<p>当然，一年级生的我自然是无法参加NOIP2021的。看着放出的自测的题目，顿时感觉自己要走的路还有很多很多。这个时候的我是什么水平呢？</p>\n<p>我被P7398这一道红题暴打了。在那之前，还有三打口算练习题，五交笨小猴，秒切小书童的光辉战绩，这个时候的代码全是感情，没有一点算法的痕迹。学校的竞赛课一周只有一节，还有就是周日的晚上，那时的我自然是不敢在其余时间往机房乱窜的。所以时间就在无尽的摸鱼和偶尔的刷题中一晃而过，时间已经来到了2022年。</p>\n<p>这个时候，SDWC来了。我从未参与类似的活动，因此立即决定报名参加。SDWC2022在lcez举办，于是我就获得了一张lcez7天体验卡。每天讲课测试的日子忙碌而又充实，除了课也听不懂，题也不会做以外。不过还是要说我是有进步的，比如说第一次参加了模拟赛。另外就是结交了几位OIer，基本都是同龄人或是初中生，直到NOIP2022前夕还互有联系，祝他们生涯顺利吧。我还在SDWC遇到了那位wqy大佬，我之所以知道之前那篇文章是他所作，正是因为有人在wqy回忆自己的生涯时，把他的文章发到了群里。他在WC跳拉丁舞的事迹令我印象深刻。</p>\n<p>后来还找到了视频膜拜（</p>\n<h5 id=\"雾\">雾</h5>\n<p>转过年来到了新学期，因为疫情和高考，我们连续居家网课了极长的时间，而这段时间无疑被我荒废了。居家期间我的进步极其缓慢，这一点从我在2022年3到5月间只交同一道单源最短路模板交两页，以及四月份一题未做中都能看出。这个时候whk也不如以往，令人心烦，我好像把OI忘了。</p>\n<p>无疑，我断送了一段大好的时光，最终自吞苦果。</p>\n<p>学习竞赛无疑是需要强大的意志力和自控力的，尤其是在那时学校帮不上你的忙，大量知识都得靠自学的情况下。而很显然我缺的就是这个。这种混乱的日子一直到暑假。</p>\n<h5 id=\"怎么办\">怎么办？</h5>\n<p>SDSC如期而至，但这次是在日照。日照的酷暑和暴雨，山外的电动滑板车，以及神必食堂，神必网络，神必空调和神必宿管都给我留下了极其深刻而不可磨灭的印象，不过好在至少你可以选择花钱吃顿好的，我也命硬没有感冒。SC回来以后又到了补whk的时间，这导致实际上暑假进度也远没有达到我的计划，且这个时候已经临近CSP一轮了。</p>\n<p>怎么办？以我现在的水平，csp能不能过还是个未知数，要消耗的时间却是实实在在的。这么来到了九月份。</p>\n<p>怎么办？哪怕我现在放弃，前面花费的时间也完全不算多，就当是培养爱好了。而接下来停课的牺牲，可是不能不考虑的。既然想要更进一步早已无望，就算能拿到2=哪怕1=，是否真的值得呢？</p>\n<p>结果，在csp笔试前的周五晚，我的焦虑在整个机房扩散开来。此时整个高二已经仅有5人还在坚持，机房中充满了沉闷的空气。</p>\n<p>不过幸好，一天后的csp笔试还是贴着线过了。</p>\n<h5 id=\"冲刺\">冲刺</h5>\n<p>那个时候还有一件事，就是月考，我毫无疑问地摆烂了，烂得非常彻底。这也促使我不得不逃离whk的琐事，开始了第一轮停课。</p>\n<p>之所以说是第一轮，是因为csp二轮取消以后，我又回去补了两周whk。过程实在是有点痛苦，也给我留下了不可磨灭的回忆。我和我父母的关系大概也在这个时候降至冰点，不过既然如此，我也就有什么活就敞开了说了。结果到了两周结束的时候，家庭的阻力反而小了不少，我也就可以再一次回到OI中来。</p>\n<p>停课的日子确实是独特的。除了害怕体测挂科而不得不去上体育以外，我们五个中的三个于住约等于住进了机房，还有一位直接回了家。每天默默听着上课铃和下课铃交替敲响，自己心底里也有一根弦在一点一点绷起来。我真的想给这些时间一个满意的回答。这期间我们几个的午觉全是躺在拼起的木凳子上睡的，机位四周也经常摆着大包小包<del>甚至whk资料</del>。不过这个机房还有包括我自己班在内的很多班级的信息课，所以大概也没有敢那么放肆。</p>\n<p>隔壁高一的纳新这时候也已结束了。感觉新一届明显实力强劲，有吊打我们几个零基础草根的趋势，当然后来至少是把我吊打了。希望我们学校的OI能够越来越强，早日脱离弱校的苦海吧。</p>\n<p>另一个心思这时候也渐渐浮现。这么值得纪念的时光，或许我也应该留下些什么？所以我开始留心写题解、记笔记，大概也有一些成效，已积累了数万字了。同时，也有了下面这一段日志。</p>\n<hr />\n<blockquote>\n<p>下面的文字本是我的OI笔记中的一栏，用类似日记的方式记录了我的停课生活和心路历程，摘录至此遂得。或将是本文最为格格不入的一段活泼的文字。</p>\n</blockquote>\n<p>当我在停课时。</p>\n<p>写完这个标题之后我发现，我好像没有什么资格给予各位文化课上的任何建议，于是，就当我是在记录自己的停课生涯吧。</p>\n<p><del>（我在创建这个标题的时候实际上还没有停课）</del></p>\n<p>10.8 UPD：濒临<del>月赛</del>月考，不过月考基本摆栏了</p>\n<p>值得一提的是，CSP二轮时间是10.29，正好是期中考试前一天……</p>\n<p>10.9 UPD：正在考虑接下来的停课事宜</p>\n<p>目前的建议是，停课前一定不要随意开摆，不然复课以后可能会非常难受</p>\n<p>10.11 UPD：确认月考后停课</p>\n<p>10.12 UPD：找班主任签字力。预计于10.13日正式停课，带着月考爆炸的忐忑心情出发了。希望不久后的自己，能够感谢现在的一切付出。</p>\n<p>10.13 UPD：停课第一天。上午开始整理政治思维导图<del>（当作早读）</del>，之后完善了笔记知识点的大纲，然后开始继续学习背包dp，线性dp以及区间dp的知识。下午做ljh出的模拟题，晚上颓废补题</p>\n<p>10.14 UPD：停课第二天。上午继续补题，下午继续学习dp。晚上回家颓废。</p>\n<p>10.15-16 UPD：周末回家。周六上午有课，下午打了模拟赛（然而起晚了，Div.2 130pts滚粗），晚上听网课。周日上午学习图的连通性问题 <del>（没听懂）</del> 以及kmp，终于弄懂了nlogn的LIS怎么写。</p>\n<p>10.17 UPD：颓了。<del>整了一小会novelAI</del>，下午去体测跑1000<del>差点是爬着回来的</del>，写了三道最短路的题，看到了SPFA的离谱优化（</p>\n<p>看报名系统的时候发现缴费突然关闭了，吓了我一大跳，<del>差点原地退役</del></p>\n<p>10.18 UPD：上午做翰哥出的四道题 <del>（好毒瘤）</del> 并学习KMP，下午学会KMP了！！晚上复习ST表，继续看DP……最后二十分钟开了一道新题</p>\n<p>10.19 UPD：昨天晚上睡觉时想到了题目的一个离谱做法，今天一早过来居然把题切了……上午做了合并果子加强版（<del>被狗数据气晕.jpg</del>），然后图论，中间乱搞系统字体被制裁了……下午图论，晚上终于过了NOIP2021 T1。晚上还复健了数学，明天继续。今天过了7个题，<del>下了好多毒瘤数据</del></p>\n<p>10.20 UPD：晨起看云。今天天气不错，云像奔袭的白马。上午中午鼓捣快速幂，gcd，筛法，下午生成树，晚上LCA</p>\n<p>10.21 UPD：上午继续图论，看二分图，二叉搜索树入了个小门，看了一道LCA的题 <del>（没做出来）</del> ，复习了一下kruskal重构树，然后被树链剖分和tarjan分别血虐……上午还把sdwc的ppt拿出来看了一看（果然有卡车运输）。下午又去体测了，结果测的是引体向上，于是去打了一节课乒乓球。于是今天一个题也没做，最后晚上几分钟看了看区间dp。图论好难。</p>\n<p>10.22 UPD：向日葵。向日葵。向日葵。向日葵。向日葵。向日葵……</p>\n<p>10.23 UPD：是得多做点题了，一天模拟赛给干爆了……接下来几天要向高强度做题过渡了。又过了两道拓扑排序的题，<del>排水系统真的好毒瘤啊</del></p>\n<p>10.26 UPD：低迷。持续模拟赛中，分数不及预期，焦虑倍增。有消息说济南考点会换成xcsy？</p>\n<p>10.27 UPD：上午9时41分，在s/x组已经确认推迟（取消）之后，CSP-S SD最终确认取消，留下了许多需要考虑的问题。</p>\n<p>你说的对，但是《天天爱跑步》是由小c同学自主研发的一款全新开放世界养成类游戏。游戏发生在一个被称作「树」的幻想世界，在这里，被小c选中的人将被授予「观察员之眼」，导引计数之力‌……你将扮演一位名为「OIer」的神秘角色，在自由的跑步中邂逅性格各异、能力独特的测试点们，和他们一起骗分，找回失散的最短路——同时，逐步发掘「AC」的真相。</p>\n<p>2022.11.14 UPD：消失了两个多星期，补课去了。CSP之后在家长的建议下，在不确定NOIP能不能按时进行的前提下，不再继续停课。于是开始了一对一高强度补课，一直到上周五lpy基本确认了NOIP的按时举行，我才结束了浮沉的整整两周，又回到了机房。如同梦一般。</p>\n<p>这可能是最近以来压力最大的一段时间，不过好在都过去了。期中考试正好延后了一周，在许多原因的作用下，我去参加了期中考试，和预料的一样烂。坐在从学校回家的车上，我承认自己确实有点绷不住了。</p>\n<p>事实就是，在一个OI不受关注的弱校，在一个家长并没给予多少支持的家庭中，学习OI的路上，能靠的只有自己。我不禁觉得，我为那些自以为无比珍重的东西所背负的东西，其实早已超过了自己当初的设想。那一点点可怜的热情，到什么时候会消散呢？</p>\n<p>就在昨天，因为学校所在区的疫情，网课又回来了。所以我就坐在这里，把这份日记补完。我不准备给自己留下任何借口了，水平不足四个字，就胜过一切困难的总和。除了我自己，没有人能够毁灭我。但我真的能把握好这最后的时光吗？</p>\n<p>但是无论如何，我回来了。</p>\n<p>11.15 UPD：开始补网课……说实话还真挺多</p>\n<p>11.16 UPD：开始上某某xt的冲刺课，第一天lxl没出数据结构（</p>\n<p>但还是险些爆零</p>\n<p>11.18 UPD：今天是戚队讲课。为什么戚队一个威海人会有东北口音呢（</p>\n<p>这两天还是有点颓废，一整天做啥都没啥动力的感觉。清醒一点啊Kora！明天开始决不能再这样了！</p>\n<p>11.19 UPD：赞美良心出题人（ 于是今天模拟赛得到了还过得去的分数。</p>\n<p>11.20 UPD：这开始两天在微信群打卡核酸。JN疫情开始有点严重了，有一点担心SD NOIP会不会再取消</p>\n<p>于是时间里便在模拟赛之中度过了。随着日子一天又一天临近，对分数的焦虑也愈加明显。</p>\n<p>11.24 模拟赛的最后一天。题好难。于是颓废了，下午三点才起。</p>\n<p>剩下的时间看了看树形dp和线段树的应用，感觉漏洞还是挺大的。</p>\n<p>果然有地区NOIP取消了……北方各省中SD出人意料的坚挺。</p>\n<p>11.25 UPD：所以时间来到了最后一天。上午起的有点晚，起来之后开始补题，把各种dp又拿出来看了一遍。后来发现效率似乎并不高，然后开始背板子。</p>\n<p>之后默写各种板子到晚上，不死磕题目了。之后又把自己笔记看了看。夜晚在群友的互相rp++中度过。</p>\n<p>十点多就睡了。那么，来吧。</p>\n<h2 id=\"恍惚的noip2022\">恍惚的NOIP2022</h2>\n<p>当天早上起来精神状态还可以，早饭害怕中午会饿吃的不少（</p>\n<p>在车上还在看kmp的板子，七点多一点就到了省实验门口。之后和同校的几位神犇汇合进去了，等待时间小于预期。没有面基到任何人，左右两边都是同校的，另外还有一个初中同学NOIP前就退役了，自己初中的一位初二神牛也没有见到。之后爬五楼去了11考场4号机（要素察觉），非常平凡。</p>\n<p>键盘有点脏但是没坏，问题不大。有搜狗输入法，可以用双拼好耶（虽然根本没打几个中文）。开考前摸了一颗线段树，然后没调过，rp--。</p>\n<p>解压压缩包就出问题了，密码是错的，rp又--。</p>\n<p>解压密码是biu#2019，pdf密码是solo@2022，并未看懂与2019有何干系</p>\n<p>于是看题。</p>\n<p>然后就炸了。感觉四个题都不好做，感觉这把是完了。</p>\n<p>考点要求戴N95口罩，加之心理作用影响，我感觉自己甚至有点呼吸困难的感觉</p>\n<p>但是还是试着摸了一下T3，后来发现似乎不可做，于是回来老老实实做T1。一开始完全没有思路，回过神来后发现可以递推求出连续0的个数，然后遂迅速摸了一个<span class=\"math inline\">\\(n^3\\)</span>做法，正确性似乎问题不大。但是写得比较慢，状态回来过拍已经九点四五十了。但是显然可以轻松卡掉，不过还是先往后做了。</p>\n<p>感觉T2完全不可做，写了半个DFS后弃疗。这时发现T4询问结构比较简单，遂尝试用ST表暴力维护。然后发现实暴力枚举区间确实太劣，大样例过不去，预期得分20-&gt;8。</p>\n<p>然后又滚回去看T2了，一直在T2T3之间来回看，但是始终不得头绪。</p>\n<p>尝试模拟T2的两个栈情况，发现题意理解不正确，然后模拟不出来了。想再回去优化T1，结果还是什么都想不到。</p>\n<p>然后就快要到时间了。绝望了，看着代码不知所措十多分钟后打铃交卷。</p>\n<p>出来以后简单讨论了一下，但是好像也没什么好讨论的。本想在实验的登攀杯前合影留念，不过最后因为没人给拍照便放弃了。做了核酸后滚出了实验。</p>\n<p>然后发现前一天复习的内容基本都没用上。计数类做的不多，还想着不会考这么多，结果悲剧了。然后就这么像是做了一场梦一般，我就回家了，OI生涯就此告终。</p>\n<h2 id=\"最后的最后\">最后的最后</h2>\n<p>走出考场的那一刻，我的心情纷繁而复杂。一方面和同学在一起，消极的情绪没有完全地显露，但另一方面却确有一种怅然若失之感。</p>\n<p>再看看我曾经写下的这么多日志和笔记，顿时觉得有一点滑稽。接近一个月的总停课时长里面，似乎学了不少东西，记了不少笔记，但结果却是什么都不会。</p>\n<p>csp前夕我在机房迷茫的时候，我教练问我，既然如此，隔壁生竞比你们还卷，比赛也比你们晚多了，他们怎么就能挺住的？</p>\n<p>我当时想都没想就直接说：他们很多人也没想明白。</p>\n<p>但是毕竟生物是高考学科，无论如何都是能直接作用于高考分数的，而说出这句话的我，虽然依然和机房中的五个人苟到了最后，但是比起那些选择放弃的人来说，不过是多苟了若干日子而已，反倒显得自不量力。看我日志的内容也能发现，我欠的实在是太多了，用惨不忍睹来形容都算是一种夸奖，菜就是菜，又有什么脸面长篇大论呢？</p>\n<p>这短暂的一年OI生涯，就是这么断断而续续，走走又停停的一段时光。高一时未将OI放在心上，远没有做好觉悟，到后来兵临城下，又仓促决断，拼上所谓一切来应战，真的是一个很有我自己风格的诙谐故事。</p>\n<p>之后笔试勉强擦线飞过，SD CSP二轮又取消，使我的NOIP前参赛经验彻底变成了零，那些没有在CSP集中暴露的问题，最终彻底让我的OI生涯走向了一个失败的终局。</p>\n<p>“你是一个OIer吗？”</p>\n<p>如果说你半年之前这样问我，我应该会直接回答：不是。</p>\n<p>我将这篇博客的URL标识符定为<span class=\"math inline\">\\(One\\; last\\; kiss\\)</span> ，在SD csp二轮取消之后，NOIP2022就是我的<span class=\"math inline\">\\(One\\; last\\; NOIP\\)</span>。NOIP2022是我的第一场正式比赛，同时也是最后一场，OI与我而言如同过客，好像并未在我的人生中留下足够的分量。于我来说，我的身份大概只是一个普通高中生，在之前人生的15年里都没怎么写过代码，但又总是怀抱一种可悲的虚荣心，时不时用这种身份暗示自己。我没有扎实的代码功底，没有缜密的逻辑思维，也没有敏锐的洞察能力，直到今天，我也远远称不上一个合格的OIer。更不用说那些缠绕我身的弊病并没有因OI隐去，并反过来继续影响着包括OI的我的一切。</p>\n<p>但即便如此，OI依然使我受益良多。</p>\n<p>但就像我在我上交代码里的那些注释所说的，我并不后悔。</p>\n<p>我深知自己能力的不足，也知道即将迎来的高二生活会有多么辛苦，更知道哪怕最终能够冲击1=（省选属于痴人说梦）， 带来的回报也并不多。在我父母看来，我的选择并不理智，纯属于浪费时间和金钱，尤其是在这NOIP结束以后。但我至今唯一后悔的一件事，反而是为什么没有早点开始接触OI。</p>\n<p>我曾经在一篇随笔里写，将自己的青春投入到OI之中，我不会后悔，直到今天我也这么认为。在我OI生涯的前半年我选择摆烂，但后半年我所取得的进步，可能会令当时在SDWC望洋兴叹的我不敢相信，更不用说初中时的那个稚嫩的我。它引导我专注，教会我知识，培养我思维，开拓我眼界，给予我历练，让我结识无数有趣的人，教我如何平衡虚渺的理想和平凡的现实，变得更会交涉、更有韧性。即使从最功利的角度说，它也赋予我利用科技改造世界的最基本的可能性。我坚信这段经历会改变我，这会是我人生中的一笔别样的宝藏。去年的这个时候，我曾郁郁寡欢地在一篇文章中写：“那些好像要伴着高中生活应允而来美好事物，只不过是虚幻的想象。”而我如今居然能用这热烈的年华做一两点自己热爱的事情，把那想象变现，到目前为止大概也算是没有白活。</p>\n<p>OI的山峰从不属于我，那今日便当是黄粱梦醒吧。未来的山峰仍有许多要去登攀，相信这些越过大风大浪的经历，能在下一个关键时刻继续带领我向前。</p>\n<p>我喜欢隔三差五地看OIerdb，看往年的分数线，在一场场比赛的分数之间见证一个个选手浮沉各异的征战历程，也曾想象着在那上面留下自己的名字。现在名字可能留下了，只不过带着一个颓然的分数，而作为OIer的我也成为了记录在案的历史，NOIP2023正式开始倒计时。但我觉得OI带给了当下这个正在码字的我许多可能性，让我不禁有些期待下一个自己的样子。不过紧接下来，我要先和whk正面决一死战，这次我无路可逃。</p>\n<p>好，我矫情完了。用这一年的时间，写就了一个滑稽戏谑、不伦不类的故事。如果这段故事能给以后人警醒，或是能博得读者的两声嘲笑，那就算是没有白费我的笔墨。</p>\n<h2 id=\"最后的最后-1\">最后的最后？</h2>\n<p>这一段，交由我的未来续写。也许明年，也许待高考之后，也许到我大学毕业，它将迎来它的完全。</p>\n<p>待续。</p>\n<p>2022年11月27至28日</p>\n<h1 id=\"最后之后-1\">最后之后</h1>\n<p>今天，我有资格续写它了吗？</p>\n<p>也许还早吧。</p>\n<p>最近学到了一个词：如一。</p>\n<p>我的确认为，如一是一个难能可贵的品质。跨越那千山万水，不靠一鼓作气，不靠天降鸿运，我只希望：如一。</p>\n<p>能做到吗？</p>\n<p>起码要试试吧。</p>\n<p>到这里，确实是最后之后了。太多的情绪都已经表达完了，已经可以了。</p>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"<h1 id=\"最后之后\">最后之后</h1>\n<p>当你看到这些文字的时候，一个蒟蒻OIer的一年多OI生涯已经结束了，其实已经结束很久了。我也本想在生涯的末期完成这些文字，但是就这么一直拖到了2023年7月，在我即将将这些文章整理上传到我的博客上时，我终于把这一段补上了。当然，作为退役回忆，已另写了一篇文章，附在下面。</p>\n<p>已经快要一年了。noip之后的日子如飞一般过去。整个高二对于我来说，是先摆烂前一半，再用剩下的一半拼命追赶，从结果上来说，亏盈自平，努力一个学期终于回到了高一下期末的那个原点。那么，向前的每一步，都是惊喜了。往事如过眼云烟，一去不回，但我始终珍视着这段别样的时光，那段<del>超爽停课</del>疯狂而不顾一切的时光，并且尝试着继续完善这份资料。我坚信，<del>虽然时至今日我还是个彩笔</del>，总有一天，我会和算法竞赛再会的。</p>\n<p><span class=\"citation\" data-cites=\"皎月半洒花是一位著名OIer\">@皎月半洒花是一位著名OIer</span>，同时也是济南老乡。除了详细的dp和Hash教程给我了很大的启发外，花花飞扬的文采同样给我留下了深刻的印象。OIer们大多都是很有才情的，比如wqy的拉丁舞，某位连载在洛谷上的小说，还有EI、花花等神触的随笔，他们无不提醒我们生而为人本身无限的可能性。我想，人们并不总是要拘泥于普遍的看法，更不用因为「自己应该是个什么样的人」这样的想法而畏葸不前。请记住，你从不本该成为怎样的人，只有跨出一步试一试，才知道你会成为怎样的人。</p>\n<p>所以，今天我又向着一个新的目标进发了。再见，为了再见。</p>\n<p>2023年7月20日午夜</p>\n<h1 id=\"鸣谢\">鸣谢</h1>\n<p>这些笔记参考了编程兔、qbxt、sdwc/sdsc的相关线下资料以及OIwiki、深进、紫书、yxc算法系列课程以及数不胜数的OI博客的相关内容，并参考<a href=\"https://www.luogu.com.cn/training/9391\">能力全面提升综合题单</a>制定了知识提纲。我要感谢这些资料以及在其背后为此付出努力的所有人，并向他们致以最真挚的敬意。这些资料中有许多是免费供大家学习的，这是属于OIer们的、不同于其他竞赛的宝贵财富，闪耀着互联网精神的光辉。我还要特别感谢鹿秀娥老师以及郭龙举、赵一鸣、冯光耀和李俊翰四位同学，没有你们共同的陪伴和支持，就没有这篇笔记和我在OI生涯中的一切。</p>\n<p>再往下，是一些自顾自的啰嗦。这一部分是考完noip当晚写的，作为单独的一篇文章在洛谷上发过。</p>\n<h1 id=\"一个幽默的故事\">一个幽默的故事</h1>\n<h2 id=\"回首\">回首</h2>\n<h5 id=\"一个微不足道的开始\">一个微不足道的开始</h5>\n<p>抛开再之前乱点的那些乱七八糟的技能树不谈，我第一次听闻OI，大概是在初二的时候。作为SDFZ的某个卑微分校，在水群时偶然加入了一个名为<code>sdfz计算机交流群</code>的QQ群,从而结识了qyc椰叶等一大批神犇（然而人家并不认识我就是了）。那个时候好像正值dalao们备战CSP2019，于是我就这么正式结识了OI。大概在同一时间，我观摩了wqy的退役回忆，于是对于OIer这个神秘而炫酷的群体又有了更多的一点印象，不过直到那个时候，我对于OI的认识，都是模糊而浅薄的。</p>\n<p>2020年初，我在洛谷注册了这个账号，并利用当时仅会的一点半吊子python在洛谷主题库中尝试做题，不过由于孱弱的码力和理解能力只是浅尝辄止。我当年的最后一个提交记录定格在不久之后的2020年2月22日，是不高兴的津津这道题，之后我又告别了洛谷。</p>\n<h5 id=\"再拾\">再拾</h5>\n<p>现在想来，之所以在2020年年初会想起来在洛谷上做题，大概也是因为疫情居家实在闲的没事干，于是就想起来了。正如那时的我料不到这轰轰烈烈的疫情会一直持续到2022年干碎SD的CSP，我更料不到我会在2020那年之后再一次入门OI。</p>\n<p>时间来到2021年，中考结束的我又闲了下来。于是闲的没事干的我又一次盘算起了自己的未来。</p>\n<p>我可能是一个想得比较多的人，经常在一些同龄人不太会考虑的问题上绞尽脑汁、纠缠不清——然而因为大问题想不明白，该做的事情却也不愿意去塌下心来做，所以才成了今天这个一事无成的我，不过这是后话了。——总之，在对一顿未来的人生大思考之后，我把书架上那本几年前就买回来却一直没碰过的C++primer又抽了出来。</p>\n<p>直到那个时候，我也并没有学OI的打算，只是想着从C++早日入门编程，然后就去学unity 3D，然后利用高中时间开发点自己喜欢的小玩意。后来中考成绩并不尽如人意，也就沉寂下去了。就这样一直到了高中开学信竞招新的时候，因为一些奇奇怪怪的爱好统计，我被班主任劝着去试试，我也就忽然有了尝试一下的念头。</p>\n<p>现在来看，至少入门编程这件事，做得还是比较成功的。我想学会运用一门语言的一个很好的方式，就是用它去敲算法题。</p>\n<p>于是我去信息处找了负责的老师记下了名字，等待着后面的消息。</p>\n<h5 id=\"方长\">方长</h5>\n<p>第一次去上课的时候，人还是相当多的，几乎撑满了六十人的机房，不过大半大概都是隔壁某特色班被其班主任硬拉过来的。我选了一台背对窗户的机器坐下，然后发现隔壁的隔壁的一个老哥正在摆弄他放在U盘里的galgame，然后我就谔谔了。这位老哥还是后来机房中自带笔记本的唯一的人（我和某另几个人用的是wintogo），一直陪我到了2021年暑假，不过在最后的几个月还是放弃了，也没有报名csp。和他一样，在第一次上课之后的两三个月以内，机房的人数再以肉眼可见的速度减少，甚至还有跑路到隔壁生竞的……不过我校的生竞还是要比OI强，祝他好运吧。到NOIP2021的时候，机房里只剩下了不到20人。</p>\n<p>当然，一年级生的我自然是无法参加NOIP2021的。看着放出的自测的题目，顿时感觉自己要走的路还有很多很多。这个时候的我是什么水平呢？</p>\n<p>我被P7398这一道红题暴打了。在那之前，还有三打口算练习题，五交笨小猴，秒切小书童的光辉战绩，这个时候的代码全是感情，没有一点算法的痕迹。学校的竞赛课一周只有一节，还有就是周日的晚上，那时的我自然是不敢在其余时间往机房乱窜的。所以时间就在无尽的摸鱼和偶尔的刷题中一晃而过，时间已经来到了2022年。</p>\n<p>这个时候，SDWC来了。我从未参与类似的活动，因此立即决定报名参加。SDWC2022在lcez举办，于是我就获得了一张lcez7天体验卡。每天讲课测试的日子忙碌而又充实，除了课也听不懂，题也不会做以外。不过还是要说我是有进步的，比如说第一次参加了模拟赛。另外就是结交了几位OIer，基本都是同龄人或是初中生，直到NOIP2022前夕还互有联系，祝他们生涯顺利吧。我还在SDWC遇到了那位wqy大佬，我之所以知道之前那篇文章是他所作，正是因为有人在wqy回忆自己的生涯时，把他的文章发到了群里。他在WC跳拉丁舞的事迹令我印象深刻。</p>\n<p>后来还找到了视频膜拜（</p>\n<h5 id=\"雾\">雾</h5>\n<p>转过年来到了新学期，因为疫情和高考，我们连续居家网课了极长的时间，而这段时间无疑被我荒废了。居家期间我的进步极其缓慢，这一点从我在2022年3到5月间只交同一道单源最短路模板交两页，以及四月份一题未做中都能看出。这个时候whk也不如以往，令人心烦，我好像把OI忘了。</p>\n<p>无疑，我断送了一段大好的时光，最终自吞苦果。</p>\n<p>学习竞赛无疑是需要强大的意志力和自控力的，尤其是在那时学校帮不上你的忙，大量知识都得靠自学的情况下。而很显然我缺的就是这个。这种混乱的日子一直到暑假。</p>\n<h5 id=\"怎么办\">怎么办？</h5>\n<p>SDSC如期而至，但这次是在日照。日照的酷暑和暴雨，山外的电动滑板车，以及神必食堂，神必网络，神必空调和神必宿管都给我留下了极其深刻而不可磨灭的印象，不过好在至少你可以选择花钱吃顿好的，我也命硬没有感冒。SC回来以后又到了补whk的时间，这导致实际上暑假进度也远没有达到我的计划，且这个时候已经临近CSP一轮了。</p>\n<p>怎么办？以我现在的水平，csp能不能过还是个未知数，要消耗的时间却是实实在在的。这么来到了九月份。</p>\n<p>怎么办？哪怕我现在放弃，前面花费的时间也完全不算多，就当是培养爱好了。而接下来停课的牺牲，可是不能不考虑的。既然想要更进一步早已无望，就算能拿到2=哪怕1=，是否真的值得呢？</p>\n<p>结果，在csp笔试前的周五晚，我的焦虑在整个机房扩散开来。此时整个高二已经仅有5人还在坚持，机房中充满了沉闷的空气。</p>\n<p>不过幸好，一天后的csp笔试还是贴着线过了。</p>\n<h5 id=\"冲刺\">冲刺</h5>\n<p>那个时候还有一件事，就是月考，我毫无疑问地摆烂了，烂得非常彻底。这也促使我不得不逃离whk的琐事，开始了第一轮停课。</p>\n<p>之所以说是第一轮，是因为csp二轮取消以后，我又回去补了两周whk。过程实在是有点痛苦，也给我留下了不可磨灭的回忆。我和我父母的关系大概也在这个时候降至冰点，不过既然如此，我也就有什么活就敞开了说了。结果到了两周结束的时候，家庭的阻力反而小了不少，我也就可以再一次回到OI中来。</p>\n<p>停课的日子确实是独特的。除了害怕体测挂科而不得不去上体育以外，我们五个中的三个于住约等于住进了机房，还有一位直接回了家。每天默默听着上课铃和下课铃交替敲响，自己心底里也有一根弦在一点一点绷起来。我真的想给这些时间一个满意的回答。这期间我们几个的午觉全是躺在拼起的木凳子上睡的，机位四周也经常摆着大包小包<del>甚至whk资料</del>。不过这个机房还有包括我自己班在内的很多班级的信息课，所以大概也没有敢那么放肆。</p>\n<p>隔壁高一的纳新这时候也已结束了。感觉新一届明显实力强劲，有吊打我们几个零基础草根的趋势，当然后来至少是把我吊打了。希望我们学校的OI能够越来越强，早日脱离弱校的苦海吧。</p>\n<p>另一个心思这时候也渐渐浮现。这么值得纪念的时光，或许我也应该留下些什么？所以我开始留心写题解、记笔记，大概也有一些成效，已积累了数万字了。同时，也有了下面这一段日志。</p>\n<hr />\n<blockquote>\n<p>下面的文字本是我的OI笔记中的一栏，用类似日记的方式记录了我的停课生活和心路历程，摘录至此遂得。或将是本文最为格格不入的一段活泼的文字。</p>\n</blockquote>\n<p>当我在停课时。</p>\n<p>写完这个标题之后我发现，我好像没有什么资格给予各位文化课上的任何建议，于是，就当我是在记录自己的停课生涯吧。</p>\n<p><del>（我在创建这个标题的时候实际上还没有停课）</del></p>\n<p>10.8 UPD：濒临<del>月赛</del>月考，不过月考基本摆栏了</p>\n<p>值得一提的是，CSP二轮时间是10.29，正好是期中考试前一天……</p>\n<p>10.9 UPD：正在考虑接下来的停课事宜</p>\n<p>目前的建议是，停课前一定不要随意开摆，不然复课以后可能会非常难受</p>\n<p>10.11 UPD：确认月考后停课</p>\n<p>10.12 UPD：找班主任签字力。预计于10.13日正式停课，带着月考爆炸的忐忑心情出发了。希望不久后的自己，能够感谢现在的一切付出。</p>\n<p>10.13 UPD：停课第一天。上午开始整理政治思维导图<del>（当作早读）</del>，之后完善了笔记知识点的大纲，然后开始继续学习背包dp，线性dp以及区间dp的知识。下午做ljh出的模拟题，晚上颓废补题</p>\n<p>10.14 UPD：停课第二天。上午继续补题，下午继续学习dp。晚上回家颓废。</p>\n<p>10.15-16 UPD：周末回家。周六上午有课，下午打了模拟赛（然而起晚了，Div.2 130pts滚粗），晚上听网课。周日上午学习图的连通性问题 <del>（没听懂）</del> 以及kmp，终于弄懂了nlogn的LIS怎么写。</p>\n<p>10.17 UPD：颓了。<del>整了一小会novelAI</del>，下午去体测跑1000<del>差点是爬着回来的</del>，写了三道最短路的题，看到了SPFA的离谱优化（</p>\n<p>看报名系统的时候发现缴费突然关闭了，吓了我一大跳，<del>差点原地退役</del></p>\n<p>10.18 UPD：上午做翰哥出的四道题 <del>（好毒瘤）</del> 并学习KMP，下午学会KMP了！！晚上复习ST表，继续看DP……最后二十分钟开了一道新题</p>\n<p>10.19 UPD：昨天晚上睡觉时想到了题目的一个离谱做法，今天一早过来居然把题切了……上午做了合并果子加强版（<del>被狗数据气晕.jpg</del>），然后图论，中间乱搞系统字体被制裁了……下午图论，晚上终于过了NOIP2021 T1。晚上还复健了数学，明天继续。今天过了7个题，<del>下了好多毒瘤数据</del></p>\n<p>10.20 UPD：晨起看云。今天天气不错，云像奔袭的白马。上午中午鼓捣快速幂，gcd，筛法，下午生成树，晚上LCA</p>\n<p>10.21 UPD：上午继续图论，看二分图，二叉搜索树入了个小门，看了一道LCA的题 <del>（没做出来）</del> ，复习了一下kruskal重构树，然后被树链剖分和tarjan分别血虐……上午还把sdwc的ppt拿出来看了一看（果然有卡车运输）。下午又去体测了，结果测的是引体向上，于是去打了一节课乒乓球。于是今天一个题也没做，最后晚上几分钟看了看区间dp。图论好难。</p>\n<p>10.22 UPD：向日葵。向日葵。向日葵。向日葵。向日葵。向日葵……</p>\n<p>10.23 UPD：是得多做点题了，一天模拟赛给干爆了……接下来几天要向高强度做题过渡了。又过了两道拓扑排序的题，<del>排水系统真的好毒瘤啊</del></p>\n<p>10.26 UPD：低迷。持续模拟赛中，分数不及预期，焦虑倍增。有消息说济南考点会换成xcsy？</p>\n<p>10.27 UPD：上午9时41分，在s/x组已经确认推迟（取消）之后，CSP-S SD最终确认取消，留下了许多需要考虑的问题。</p>\n<p>你说的对，但是《天天爱跑步》是由小c同学自主研发的一款全新开放世界养成类游戏。游戏发生在一个被称作「树」的幻想世界，在这里，被小c选中的人将被授予「观察员之眼」，导引计数之力‌……你将扮演一位名为「OIer」的神秘角色，在自由的跑步中邂逅性格各异、能力独特的测试点们，和他们一起骗分，找回失散的最短路——同时，逐步发掘「AC」的真相。</p>\n<p>2022.11.14 UPD：消失了两个多星期，补课去了。CSP之后在家长的建议下，在不确定NOIP能不能按时进行的前提下，不再继续停课。于是开始了一对一高强度补课，一直到上周五lpy基本确认了NOIP的按时举行，我才结束了浮沉的整整两周，又回到了机房。如同梦一般。</p>\n<p>这可能是最近以来压力最大的一段时间，不过好在都过去了。期中考试正好延后了一周，在许多原因的作用下，我去参加了期中考试，和预料的一样烂。坐在从学校回家的车上，我承认自己确实有点绷不住了。</p>\n<p>事实就是，在一个OI不受关注的弱校，在一个家长并没给予多少支持的家庭中，学习OI的路上，能靠的只有自己。我不禁觉得，我为那些自以为无比珍重的东西所背负的东西，其实早已超过了自己当初的设想。那一点点可怜的热情，到什么时候会消散呢？</p>\n<p>就在昨天，因为学校所在区的疫情，网课又回来了。所以我就坐在这里，把这份日记补完。我不准备给自己留下任何借口了，水平不足四个字，就胜过一切困难的总和。除了我自己，没有人能够毁灭我。但我真的能把握好这最后的时光吗？</p>\n<p>但是无论如何，我回来了。</p>\n<p>11.15 UPD：开始补网课……说实话还真挺多</p>\n<p>11.16 UPD：开始上某某xt的冲刺课，第一天lxl没出数据结构（</p>\n<p>但还是险些爆零</p>\n<p>11.18 UPD：今天是戚队讲课。为什么戚队一个威海人会有东北口音呢（</p>\n<p>这两天还是有点颓废，一整天做啥都没啥动力的感觉。清醒一点啊Kora！明天开始决不能再这样了！</p>\n<p>11.19 UPD：赞美良心出题人（ 于是今天模拟赛得到了还过得去的分数。</p>\n<p>11.20 UPD：这开始两天在微信群打卡核酸。JN疫情开始有点严重了，有一点担心SD NOIP会不会再取消</p>\n<p>于是时间里便在模拟赛之中度过了。随着日子一天又一天临近，对分数的焦虑也愈加明显。</p>\n<p>11.24 模拟赛的最后一天。题好难。于是颓废了，下午三点才起。</p>\n<p>剩下的时间看了看树形dp和线段树的应用，感觉漏洞还是挺大的。</p>\n<p>果然有地区NOIP取消了……北方各省中SD出人意料的坚挺。</p>\n<p>11.25 UPD：所以时间来到了最后一天。上午起的有点晚，起来之后开始补题，把各种dp又拿出来看了一遍。后来发现效率似乎并不高，然后开始背板子。</p>\n<p>之后默写各种板子到晚上，不死磕题目了。之后又把自己笔记看了看。夜晚在群友的互相rp++中度过。</p>\n<p>十点多就睡了。那么，来吧。</p>\n<h2 id=\"恍惚的noip2022\">恍惚的NOIP2022</h2>\n<p>当天早上起来精神状态还可以，早饭害怕中午会饿吃的不少（</p>\n<p>在车上还在看kmp的板子，七点多一点就到了省实验门口。之后和同校的几位神犇汇合进去了，等待时间小于预期。没有面基到任何人，左右两边都是同校的，另外还有一个初中同学NOIP前就退役了，自己初中的一位初二神牛也没有见到。之后爬五楼去了11考场4号机（要素察觉），非常平凡。</p>\n<p>键盘有点脏但是没坏，问题不大。有搜狗输入法，可以用双拼好耶（虽然根本没打几个中文）。开考前摸了一颗线段树，然后没调过，rp--。</p>\n<p>解压压缩包就出问题了，密码是错的，rp又--。</p>\n<p>解压密码是biu#2019，pdf密码是solo@2022，并未看懂与2019有何干系</p>\n<p>于是看题。</p>\n<p>然后就炸了。感觉四个题都不好做，感觉这把是完了。</p>\n<p>考点要求戴N95口罩，加之心理作用影响，我感觉自己甚至有点呼吸困难的感觉</p>\n<p>但是还是试着摸了一下T3，后来发现似乎不可做，于是回来老老实实做T1。一开始完全没有思路，回过神来后发现可以递推求出连续0的个数，然后遂迅速摸了一个<span class=\"math inline\">\\(n^3\\)</span>做法，正确性似乎问题不大。但是写得比较慢，状态回来过拍已经九点四五十了。但是显然可以轻松卡掉，不过还是先往后做了。</p>\n<p>感觉T2完全不可做，写了半个DFS后弃疗。这时发现T4询问结构比较简单，遂尝试用ST表暴力维护。然后发现实暴力枚举区间确实太劣，大样例过不去，预期得分20-&gt;8。</p>\n<p>然后又滚回去看T2了，一直在T2T3之间来回看，但是始终不得头绪。</p>\n<p>尝试模拟T2的两个栈情况，发现题意理解不正确，然后模拟不出来了。想再回去优化T1，结果还是什么都想不到。</p>\n<p>然后就快要到时间了。绝望了，看着代码不知所措十多分钟后打铃交卷。</p>\n<p>出来以后简单讨论了一下，但是好像也没什么好讨论的。本想在实验的登攀杯前合影留念，不过最后因为没人给拍照便放弃了。做了核酸后滚出了实验。</p>\n<p>然后发现前一天复习的内容基本都没用上。计数类做的不多，还想着不会考这么多，结果悲剧了。然后就这么像是做了一场梦一般，我就回家了，OI生涯就此告终。</p>\n<h2 id=\"最后的最后\">最后的最后</h2>\n<p>走出考场的那一刻，我的心情纷繁而复杂。一方面和同学在一起，消极的情绪没有完全地显露，但另一方面却确有一种怅然若失之感。</p>\n<p>再看看我曾经写下的这么多日志和笔记，顿时觉得有一点滑稽。接近一个月的总停课时长里面，似乎学了不少东西，记了不少笔记，但结果却是什么都不会。</p>\n<p>csp前夕我在机房迷茫的时候，我教练问我，既然如此，隔壁生竞比你们还卷，比赛也比你们晚多了，他们怎么就能挺住的？</p>\n<p>我当时想都没想就直接说：他们很多人也没想明白。</p>\n<p>但是毕竟生物是高考学科，无论如何都是能直接作用于高考分数的，而说出这句话的我，虽然依然和机房中的五个人苟到了最后，但是比起那些选择放弃的人来说，不过是多苟了若干日子而已，反倒显得自不量力。看我日志的内容也能发现，我欠的实在是太多了，用惨不忍睹来形容都算是一种夸奖，菜就是菜，又有什么脸面长篇大论呢？</p>\n<p>这短暂的一年OI生涯，就是这么断断而续续，走走又停停的一段时光。高一时未将OI放在心上，远没有做好觉悟，到后来兵临城下，又仓促决断，拼上所谓一切来应战，真的是一个很有我自己风格的诙谐故事。</p>\n<p>之后笔试勉强擦线飞过，SD CSP二轮又取消，使我的NOIP前参赛经验彻底变成了零，那些没有在CSP集中暴露的问题，最终彻底让我的OI生涯走向了一个失败的终局。</p>\n<p>“你是一个OIer吗？”</p>\n<p>如果说你半年之前这样问我，我应该会直接回答：不是。</p>\n<p>我将这篇博客的URL标识符定为<span class=\"math inline\">\\(One\\; last\\; kiss\\)</span> ，在SD csp二轮取消之后，NOIP2022就是我的<span class=\"math inline\">\\(One\\; last\\; NOIP\\)</span>。NOIP2022是我的第一场正式比赛，同时也是最后一场，OI与我而言如同过客，好像并未在我的人生中留下足够的分量。于我来说，我的身份大概只是一个普通高中生，在之前人生的15年里都没怎么写过代码，但又总是怀抱一种可悲的虚荣心，时不时用这种身份暗示自己。我没有扎实的代码功底，没有缜密的逻辑思维，也没有敏锐的洞察能力，直到今天，我也远远称不上一个合格的OIer。更不用说那些缠绕我身的弊病并没有因OI隐去，并反过来继续影响着包括OI的我的一切。</p>\n<p>但即便如此，OI依然使我受益良多。</p>\n<p>但就像我在我上交代码里的那些注释所说的，我并不后悔。</p>\n<p>我深知自己能力的不足，也知道即将迎来的高二生活会有多么辛苦，更知道哪怕最终能够冲击1=（省选属于痴人说梦）， 带来的回报也并不多。在我父母看来，我的选择并不理智，纯属于浪费时间和金钱，尤其是在这NOIP结束以后。但我至今唯一后悔的一件事，反而是为什么没有早点开始接触OI。</p>\n<p>我曾经在一篇随笔里写，将自己的青春投入到OI之中，我不会后悔，直到今天我也这么认为。在我OI生涯的前半年我选择摆烂，但后半年我所取得的进步，可能会令当时在SDWC望洋兴叹的我不敢相信，更不用说初中时的那个稚嫩的我。它引导我专注，教会我知识，培养我思维，开拓我眼界，给予我历练，让我结识无数有趣的人，教我如何平衡虚渺的理想和平凡的现实，变得更会交涉、更有韧性。即使从最功利的角度说，它也赋予我利用科技改造世界的最基本的可能性。我坚信这段经历会改变我，这会是我人生中的一笔别样的宝藏。去年的这个时候，我曾郁郁寡欢地在一篇文章中写：“那些好像要伴着高中生活应允而来美好事物，只不过是虚幻的想象。”而我如今居然能用这热烈的年华做一两点自己热爱的事情，把那想象变现，到目前为止大概也算是没有白活。</p>\n<p>OI的山峰从不属于我，那今日便当是黄粱梦醒吧。未来的山峰仍有许多要去登攀，相信这些越过大风大浪的经历，能在下一个关键时刻继续带领我向前。</p>\n<p>我喜欢隔三差五地看OIerdb，看往年的分数线，在一场场比赛的分数之间见证一个个选手浮沉各异的征战历程，也曾想象着在那上面留下自己的名字。现在名字可能留下了，只不过带着一个颓然的分数，而作为OIer的我也成为了记录在案的历史，NOIP2023正式开始倒计时。但我觉得OI带给了当下这个正在码字的我许多可能性，让我不禁有些期待下一个自己的样子。不过紧接下来，我要先和whk正面决一死战，这次我无路可逃。</p>\n<p>好，我矫情完了。用这一年的时间，写就了一个滑稽戏谑、不伦不类的故事。如果这段故事能给以后人警醒，或是能博得读者的两声嘲笑，那就算是没有白费我的笔墨。</p>\n<h2 id=\"最后的最后-1\">最后的最后？</h2>\n<p>这一段，交由我的未来续写。也许明年，也许待高考之后，也许到我大学毕业，它将迎来它的完全。</p>\n<p>待续。</p>\n<p>2022年11月27至28日</p>\n<h1 id=\"最后之后-1\">最后之后</h1>\n<p>今天，我有资格续写它了吗？</p>\n<p>也许还早吧。</p>\n<p>最近学到了一个词：如一。</p>\n<p>我的确认为，如一是一个难能可贵的品质。跨越那千山万水，不靠一鼓作气，不靠天降鸿运，我只希望：如一。</p>\n<p>能做到吗？</p>\n<p>起码要试试吧。</p>\n<p>到这里，确实是最后之后了。太多的情绪都已经表达完了，已经可以了。</p>\n"},{"title":"csp-noip备战日志2-基础算法","date":"2023-07-21T13:23:12.000Z","_content":"","source":"_posts/csp-noip备战日志2-基础算法.md","raw":"---\ntitle: csp-noip备战日志2-基础算法\ndate: 2023-07-21 21:23:12\ntags:\n---\n","slug":"csp-noip备战日志2-基础算法","published":1,"updated":"2023-07-21T13:23:12.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vh00072agwh7z1c4lh","content":"\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"\n"},{"title":"csp-noip备战日志3-搜索","date":"2023-07-21T13:25:18.000Z","_content":"","source":"_posts/csp-noip备战日志3-搜索.md","raw":"---\ntitle: csp-noip备战日志3-搜索\ndate: 2023-07-21 21:25:18\ntags:\n---\n","slug":"csp-noip备战日志3-搜索","published":1,"updated":"2023-07-21T13:25:18.158Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vi00092agwb6uq7py3","content":"\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"\n"},{"title":"csp-noip备战日志4-字符串","date":"2023-07-21T13:25:34.000Z","_content":"","source":"_posts/csp-noip备战日志4-字符串.md","raw":"---\ntitle: csp-noip备战日志4-字符串\ndate: 2023-07-21 21:25:34\ntags:\n---\n","slug":"csp-noip备战日志4-字符串","published":1,"updated":"2023-07-21T13:25:34.783Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vj000a2agw9rsmgh1o","content":"\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"\n"},{"title":"csp-noip备战日志5-数据结构","date":"2023-07-21T13:25:43.000Z","_content":"","source":"_posts/csp-noip备战日志5-数据结构.md","raw":"---\ntitle: csp-noip备战日志5-数据结构\ndate: 2023-07-21 21:25:43\ntags:\n---\n","slug":"csp-noip备战日志5-数据结构","published":1,"updated":"2023-07-21T13:25:43.987Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vj000c2agw12ug827a","content":"\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"\n"},{"title":"csp-noip备战日志6-图论","date":"2023-07-21T13:25:55.000Z","_content":"","source":"_posts/csp-noip备战日志6-图论.md","raw":"---\ntitle: csp-noip备战日志6-图论\ndate: 2023-07-21 21:25:55\ntags:\n---\n","slug":"csp-noip备战日志6-图论","published":1,"updated":"2023-07-21T13:25:55.019Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vk000d2agwcvcp535o","content":"\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"\n"},{"title":"csp-noip备战日志7-动态规划","date":"2023-07-21T13:26:23.000Z","_content":"","source":"_posts/csp-noip备战日志7-动态规划.md","raw":"---\ntitle: csp-noip备战日志7-动态规划\ndate: 2023-07-21 21:26:23\ntags:\n---\n","slug":"csp-noip备战日志7-动态规划","published":1,"updated":"2023-07-21T13:26:23.899Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vl000f2agwca60aeu3","content":"\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"\n"},{"title":"csp-noip备战日志8-数学","date":"2023-07-21T13:26:35.000Z","_content":"","source":"_posts/csp-noip备战日志8-数学.md","raw":"---\ntitle: csp-noip备战日志8-数学\ndate: 2023-07-21 21:26:35\ntags:\n---\n","slug":"csp-noip备战日志8-数学","published":1,"updated":"2023-07-21T13:26:35.920Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vm000h2agwgrwqedd7","content":"\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"\n"},{"title":"csp-noip备战日志9-杂项","date":"2023-07-21T13:26:50.000Z","_content":"","source":"_posts/csp-noip备战日志9-杂项.md","raw":"---\ntitle: csp-noip备战日志9-杂项\ndate: 2023-07-21 21:26:50\ntags:\n---\n","slug":"csp-noip备战日志9-杂项","published":1,"updated":"2023-07-21T13:26:50.564Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vm000k2agw55xkemx3","content":"\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2023-07-16T18:15:03.597Z","updated":"2023-07-16T18:15:03.597Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vn000m2agwegjidosu","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\">Quick Start</h2>\n<h3 id=\"create-a-new-post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"quick-start\">Quick Start</h2>\n<h3 id=\"create-a-new-post\">Create a new post</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"run-server\">Run server</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"generate-static-files\">Generate static files</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"deploy-to-remote-sites\">Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"【音mad101】1.1-AE快速上手","date":"2023-07-20T12:00:29.000Z","_content":"","source":"_posts/【音mad101】1.1-AE快速上手.md","raw":"---\ntitle: 【音mad101】1.1-AE快速上手\ndate: 2023-07-20 20:00:29\ntags: [学习手记,音mad101,音mad101第一节,AE]\n---\n","slug":"【音mad101】1.1-AE快速上手","published":1,"updated":"2023-07-20T12:17:07.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vn000o2agwgg1tfa33","content":"\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"\n"},{"title":"【音mad101】第0节：前言","date":"2023-07-20T11:56:53.000Z","_content":"\n今天是2023年7月20日，我下定了决心，要系统化提升自己的音mad水准了。\n\n和原来的习惯一样，我决定利用写博客的方式留下笔记，也记录下学习的心得，所以，音mad101计划开始了。\n\n做音mader最需要什么？曾经我觉得的是技术力。但其实，热情，才是支持者无数音mader将自己的心血和才思投入作品的动力，才是高超技术力的源泉，才是音mad这种鬼畜形式生生不息至今的奥秘，才是成为一名音mader真正需要的东西。这里有审美，有创想，有遐思，希望有一天，这里有我。\n\n感谢富有责任心的先辈们，搭建了[中文音MAD维基](otomad.wiki)的平台，得以让我有计划系统性地精进我的水平。音mad101的主要学习线路将参照wiki给出的视频资料。\n\n让我们开始吧。\n","source":"_posts/【音mad101】第0节：前言.md","raw":"---\ntitle: 【音mad101】第0节：前言\ndate: 2023-07-20 19:56:53\ntags: [学习手记,时隙随思,音mad101]\n---\n\n今天是2023年7月20日，我下定了决心，要系统化提升自己的音mad水准了。\n\n和原来的习惯一样，我决定利用写博客的方式留下笔记，也记录下学习的心得，所以，音mad101计划开始了。\n\n做音mader最需要什么？曾经我觉得的是技术力。但其实，热情，才是支持者无数音mader将自己的心血和才思投入作品的动力，才是高超技术力的源泉，才是音mad这种鬼畜形式生生不息至今的奥秘，才是成为一名音mader真正需要的东西。这里有审美，有创想，有遐思，希望有一天，这里有我。\n\n感谢富有责任心的先辈们，搭建了[中文音MAD维基](otomad.wiki)的平台，得以让我有计划系统性地精进我的水平。音mad101的主要学习线路将参照wiki给出的视频资料。\n\n让我们开始吧。\n","slug":"【音mad101】第0节：前言","published":1,"updated":"2023-07-20T12:41:04.533Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vo000p2agwhg31g9ri","content":"<p>今天是2023年7月20日，我下定了决心，要系统化提升自己的音mad水准了。</p>\n<p>和原来的习惯一样，我决定利用写博客的方式留下笔记，也记录下学习的心得，所以，音mad101计划开始了。</p>\n<p>做音mader最需要什么？曾经我觉得的是技术力。但其实，热情，才是支持者无数音mader将自己的心血和才思投入作品的动力，才是高超技术力的源泉，才是音mad这种鬼畜形式生生不息至今的奥秘，才是成为一名音mader真正需要的东西。这里有审美，有创想，有遐思，希望有一天，这里有我。</p>\n<p>感谢富有责任心的先辈们，搭建了<a href=\"otomad.wiki\">中文音MAD维基</a>的平台，得以让我有计划系统性地精进我的水平。音mad101的主要学习线路将参照wiki给出的视频资料。</p>\n<p>让我们开始吧。</p>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"<p>今天是2023年7月20日，我下定了决心，要系统化提升自己的音mad水准了。</p>\n<p>和原来的习惯一样，我决定利用写博客的方式留下笔记，也记录下学习的心得，所以，音mad101计划开始了。</p>\n<p>做音mader最需要什么？曾经我觉得的是技术力。但其实，热情，才是支持者无数音mader将自己的心血和才思投入作品的动力，才是高超技术力的源泉，才是音mad这种鬼畜形式生生不息至今的奥秘，才是成为一名音mader真正需要的东西。这里有审美，有创想，有遐思，希望有一天，这里有我。</p>\n<p>感谢富有责任心的先辈们，搭建了<a href=\"otomad.wiki\">中文音MAD维基</a>的平台，得以让我有计划系统性地精进我的水平。音mad101的主要学习线路将参照wiki给出的视频资料。</p>\n<p>让我们开始吧。</p>\n"},{"title":"【音mad101】第1节：AfterEffects","date":"2023-07-20T11:58:28.000Z","_content":"\n第一部分被设置为AE，倒不是因为这一部分在音mad工程中有多么重要，纯粹是因为~~最近我想学AE了~~\n\n但另一方面来讲，AE的确是我最陌生的一个软件，而作为一个泛用性极强的视频处理软件，学习AE本身就很有价值。所以我想借此机会正式向AE发起进攻。\n\n在接下来的章节中，预计将会介绍AE的基本操作和常用的特效处理手法，总的来说还处在构思阶段，走一步看一步了。我会尽量将所使用到的材料列明。\n\n事实上，Vegas，AviUtl甚至Reaper在内的大量软件都可以胜任pv的制作工作，后续也可能考虑更新。\n\n本章目录（待完善）：\n\n- 1.1 基本操作快速上手\n- 1.2 \n","source":"_posts/【音mad101】第1节：AfterEffects.md","raw":"---\ntitle: 【音mad101】第1节：AfterEffects\ndate: 2023-07-20 19:58:28\ntags: [学习手记,音mad101,音mad101第1节,AE]\n---\n\n第一部分被设置为AE，倒不是因为这一部分在音mad工程中有多么重要，纯粹是因为~~最近我想学AE了~~\n\n但另一方面来讲，AE的确是我最陌生的一个软件，而作为一个泛用性极强的视频处理软件，学习AE本身就很有价值。所以我想借此机会正式向AE发起进攻。\n\n在接下来的章节中，预计将会介绍AE的基本操作和常用的特效处理手法，总的来说还处在构思阶段，走一步看一步了。我会尽量将所使用到的材料列明。\n\n事实上，Vegas，AviUtl甚至Reaper在内的大量软件都可以胜任pv的制作工作，后续也可能考虑更新。\n\n本章目录（待完善）：\n\n- 1.1 基本操作快速上手\n- 1.2 \n","slug":"【音mad101】第1节：AfterEffects","published":1,"updated":"2023-07-20T12:54:26.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vo000r2agw9wc6honm","content":"<p>第一部分被设置为AE，倒不是因为这一部分在音mad工程中有多么重要，纯粹是因为<del>最近我想学AE了</del></p>\n<p>但另一方面来讲，AE的确是我最陌生的一个软件，而作为一个泛用性极强的视频处理软件，学习AE本身就很有价值。所以我想借此机会正式向AE发起进攻。</p>\n<p>在接下来的章节中，预计将会介绍AE的基本操作和常用的特效处理手法，总的来说还处在构思阶段，走一步看一步了。我会尽量将所使用到的材料列明。</p>\n<p>事实上，Vegas，AviUtl甚至Reaper在内的大量软件都可以胜任pv的制作工作，后续也可能考虑更新。</p>\n<p>本章目录（待完善）：</p>\n<ul>\n<li>1.1 基本操作快速上手</li>\n<li>1.2</li>\n</ul>\n","site":{"data":{}},"cover":"https://i.loli.net/2020/05/01/gkihqEjXxJ5UZ1C.jpg","cover_type":"img","excerpt":"","more":"<p>第一部分被设置为AE，倒不是因为这一部分在音mad工程中有多么重要，纯粹是因为<del>最近我想学AE了</del></p>\n<p>但另一方面来讲，AE的确是我最陌生的一个软件，而作为一个泛用性极强的视频处理软件，学习AE本身就很有价值。所以我想借此机会正式向AE发起进攻。</p>\n<p>在接下来的章节中，预计将会介绍AE的基本操作和常用的特效处理手法，总的来说还处在构思阶段，走一步看一步了。我会尽量将所使用到的材料列明。</p>\n<p>事实上，Vegas，AviUtl甚至Reaper在内的大量软件都可以胜任pv的制作工作，后续也可能考虑更新。</p>\n<p>本章目录（待完善）：</p>\n<ul>\n<li>1.1 基本操作快速上手</li>\n<li>1.2</li>\n</ul>\n"},{"title":"无折腾，不linux：关于Ventoy-Linux，Kubuntu和系统配置的心得","date":"2023-07-17T15:37:58.000Z","cover":"2023/07/17/无折腾，不linux：关于Ventoy-Linux，Kubuntu和系统配置的心得/cover.jpg","_content":"\n## *本文正在施工中*\n\n# 前言\n\n一切的一切都要从两年前开始讲起。\n\n2021年暑假，我知晓了wintogo这种系统形式的存在。心血来潮，在网上购入了一块三星的U盘。\n\n那时候对wtg的性能要求没什么概念，也并没有也不知道选择带有wtg认证的设备。这是一个后来令我十分痛苦的决定。\n\n之后不短的一段时间，我在学校机房使用的一直是自己的wtg。期间windows11推出，就升级到了win11。但是，由于U盘孱弱的4k读写性能（另一方面，我一直怀疑我盘的4k性能尤其糟糕，不知道与前期格盘过多是否有关），恼人的迟滞和卡顿一直伴随在从开机到关机的每一个过程中，即使关闭windows update、使用内存盘也难以缓解，windows较大的系统体积也使64G的有限空间更加捉襟见肘。考虑到没有必要~~也没有钱~~再买一块新的固态硬盘，在一次失手（这就牵扯到了另一个有关于学校大屏的狗血故事，有空可以写写）搞炸了自己的wintogo之后，我决定投入linux的怀抱。\n\n但这其实并不是我第一次接触linux。在学校机房时，我就在另一位dalao的帮助下，和老师一起给两三台电脑安装过ubuntu 22.04，并在其上部署了oj。当时就吃了不少苦头，走了不少弯路。于是，在开始我的折腾之路的时候，我非常自信，以为这一次能够快速拿下，之后就被打脸了。人是不长记性的动物，尤其是我这种，记性尤其差。当时配置的很多细节现在都忘了，结果还是要从头再来，文档也要重翻一边，何况又出现了巨量的新问题。所以，这次我决定写点东西记下来，一方面保证下次不再走弯路，另一方面大概也可以让后来人也少走一点弯路。总之，让我们开始吧！\n\n# Ventoy的配置\n\n## Ventoy本体的安装和配置\n\nVentoy的使用体验还是非常愉快的。有清晰的中文资料，安装配置也不算复杂，只是当时配置安全启动证书的过程让我十分摸不到头脑。殊不知，安全启动这个噩梦还会在后来继续折磨我。\n\n要使用Ventoy安装虚拟磁盘系统，可以参考[这篇文档](https://www.ventoy.net/cn/plugin_vtoyboot.html)。\n\n需要注意的是，ventoy官方文档中提到，virtualbox中生成的虚拟硬盘文件必须是固定大小（即预先分配全部空间），对于一个较大的虚拟磁盘，这的确有一定的不便，但是，如果使用动态大小，根据另外一位同学的经验，可能会导致虚拟磁盘文件的实际大小不受控制地增加，但具体情况需要进一步实践来验证。\n\nventoy只支持vdi和vhd文件，不支持vhdx。如果你使用vdi作为虚拟磁盘格式，且需要复制虚拟磁盘文件，请**使用virtualbox自带的VBoxManage工具，否则将会在注册虚拟磁盘时报错。**在windows中它会位于virtualbox的根目录下。如果你不幸已经使用这种方式复制了一个超大容量的静态大小虚拟磁盘，为了节省时间，可以直接重设新磁盘的uuid，达到一样的效果。\n\n要复制，可以在virtualbox的根目录下使用：\n\n```powershell\nVBoxManager clonevdi [原文件路径] [新文件路径]\n```\n\n要重新分配uuid。可以输入：\n\n```powershell\nVBoxManage internalcommands sethduuid [文件路径]\n```\n\n来改变虚拟磁盘的uuid。\n\n令人无语的是，当你直接复制vdi文件并尝试注册复制出的文件时，virtual box并不会向你指出导致错误的具体原因（当然也可能是因为日志标注过于抽象导致我看不懂），只能凭借自行搜索来解决。\n\n## 发行版大乱斗\n\n在使用萝卜头论坛的wtg制作工具的时候，对系统的选择是有限的，并且更换系统就需要再次格盘，而Ventoy的存在，让整个过程得以更为灵活自由。我先后尝试了Manjaro，fedora和ubuntu。需要注意，在virtualbox中配置Manjaro时，需要分配比较高的内存，否则可能会导致开机卡死或黑屏。~~当时折腾了好长时间也没找出原因~~。\n\nVentoy默认将U盘的主分区格式化为exFAT格式，这个分区可以手动格式化为NTFS，不过安装linux不建议改变，不确定是否会影响。\n\n还有一点，每次遇到系统内核或驱动更新时，都要重新安装vtoyboost插件。不知道为什么，fedora在我的一次开机时突然进入自动更新，~~之后就成功把我的引导干碎了~~，需要注意。\n\n## 安全启动\n\n> so fuck you, Microsoft.\n\nArch系系统默认不支持安全启动。要使用安全启动，可以参考这两篇文章:\n\n[2023 archlinux 启用 Secure Boot (安全启动) 的最简单方法 -- sbctl](https://zhuanlan.zhihu.com/p/616940828?utm_id=0)\n\n[在Arch Linux中配置安全启动（Secure Boot)](https://zhuanlan.zhihu.com/p/620568516)\n\n虽然fedora和ubuntu（debian）通过shim理论上支持安全启动，但在我的设备（联想小新Pro16 2021ACH锐龙版）上，始终无法在安全启动启用下成功引导系统。但令人诧异的是，Ventoy的选择菜单是可以正常使用的。\n\n# 一些系统配置的细节\n\n## KDE的安装\n\n我一开始打算装Manjaro的原因，按照我尚浅薄的linux使用经验，说是完全因为喜爱pacman，那是一点也不诚实的。另外的重要的原因，是Manjaro有社区维护的KDE版本，而在之前和gnome的接触，使我萌生了换换口味的想法。于是，我试图在ubuntu上手动安装KDE。是的，那个时候我还不知道Kubuntu的存在。\n\n对于ubuntu用户来说，可以使用\n\n```bash\nsudo apt-get install kubuntu-desktop\n```\n\n来安装KDE桌面，理论上来说，这与直接安装kubuntu没有区别。\n\n## 配置静态ip\n\n在机房使用时，\n\n我可以确定的是，gnome下的普通ubuntu并没有这个问题，这很大可能是KDE的问题。\n\n通过搜索发现，这似乎是kubuntu的一个老bug。在很早的时候，就有人在网络上提出这个问题。解决方法是直接使用命令行配置。\n\nubuntu从17.01开始使用netplan（而非/etc/network/interfaces）配置网络设置。总体流程可参考：[Ubuntu Server20.04 静态ip配置（netplan）](https://blog.csdn.net/qq_45949008/article/details/118862854)\n\n网卡的名称可以利用`ip a`查询。\n\n应用配置之前，可以使用`sudo netplan try`测试配置是否存在问题。之后该配置可以在网络设置中正常显示。\n\n最简配置可以是这样的：\n\n```yaml\n# 01-network-manager-all.yaml\nnetwork:\n  version: 2\n  renderer: NetworkManager\n  ethernets:\n    enp2s0:\t\t#网卡名称\n      dhcp4: no\t\t#关闭dhcp\n      addresses: [10.160.219.43/24]\t\t#注意这里/后要填写子网掩码。如点分十进制255.255.255.0对应为24\n      gateway4: 10.160.219.254\n      nameservers:\n        addresses: [8.8.8.8]\n```\n\n/24的24指的是这个掩码由连续的24个1组成，按照点分二进制，表示为11111111.11111111.11111111.11111111.00000000，即255.255.255.0。有关掩码的一些的问题，有时间以后单独写。\n\n## 有关科学上网\n\n不知道为什么，在我的系统中qv2ray配置后切换节点将造成剧烈卡顿，切换后也无法正常工作，几分钟后报错崩溃。目前qv2ray已经停止维护，不再推荐使用。可以选择[qv2rayA](https://github.com/v2rayA/v2rayA)作为替代。\n\nclash方面，clash内核可以在linux下正常运行，注意配置开机启动即可。另外，在windows下非常流行的[clash for windows](https://github.com/Fndroid/clash_for_windows_pkg/releases) GUI终端在linux上同样可用。是的，你没看错。linux下还可以使用[clashy](https://github.com/SpongeNobody/Clashy)\n\nKDE的全局代理设置不一定可以在所有情况下使用，可以借助CFW的tun模式，或在软件中单独设置代理。clash的http(s)代理端口默认为7890，socks为7891。\n\n作为一个倒霉蛋，使用cfw时还碰到了这样两个问题。\n\n如果你的代理端口一直显示0且无法更改，可能是因为一些意外导致开启了多个clash内核。这个时候需要\n\n```bash\nsudo killall clash\n```\n\n再重启cfw客户端。\n\n如果你在一切配置都成功的时候仍然节点全部time out，记得低头看一下表是不是对的。\n\n如上文所说，我的ubuntu至今没有解决安全启动问题，导致目前我在家中在ubuntu与win之间切换只能频繁地开关安全启动（我的win上还有bitlocker……）。而在这个过程中，我的win可能出现时间错误，可能是bios时间不对导致的。\n\n## 关于rime\n配置rime真的花了很长的时间，吐血。如果觉得麻烦，感觉也可以试试搜狗的linux版本。\n\n### rime的安装\n\n首先，建议使用fcitx5来安装rime。命令行输入\n\n```bash\nsudo apt install fcitx5-rime\n```\n\n即可，理论上不需要安装其他组件了。\n\n安装完成之后，需要将fcitx5配置为默认输入法。命令行输入\n\n```bash\nim-config\n```\n\n进行配置。\n\n另外，虽然我没有遇到什么问题，但可以按照[Ubuntu22.04安装Fcitx5中文输入法（详细）](https://zhuanlan.zhihu.com/p/508797663)的方式注册输入法。\n\n如果你在安装ubuntu时一起安装的vscode有不能使用中文输入法的问题，删掉重新去官网下载重装即可。\n\n### 输入方案管理\n\nlinux下，可以使用[rime/plum](https://github.com/rime/plum)管理输入方案。安装fcitx5-rime后即可自带一个朙月拼音输入法，默认是繁体，可以按`ctrl` + `~`键打开设置切换为简体。按照指引使用\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash -s -- :preset\n```\n\n后，会自动在当前目录下载plum工具和自带方案，并安装在rime中。如果你像我以上是一个双拼用户，可以在plum目录下运行\n\n```bash\nrime-install double-pinyin\n```\n\n来安装双拼方案。\n\n### 词库和自定义\n\n注意，对于fcitx5-rime，要使用的所有词库文件、配置文件、方案，都**应当放置在~/.local/share/fcitx5/rime/处，而不是任何其他位置。**如果出现任何找不到文件的问题，可以手动复制到这里。\n\n在上述目录下手动建立`方案.custom.yaml`文件（如小鹤双拼的配置文件显示为`double_pinyin_flypy.schema.yaml`，对应的配置文件应命名为`double_pinyin_flypy.custom.yaml`），配置以下内容：\n\n```yaml\npatch:\n# 指定自定义词库位置\n    \"translator/dictionary\": luna_pinyin  #这里填写词库名称\n    \"menu/page_size\": 9\t\t#候选词数量，最大为9\n```\n\n注意，词库名称**不带有任何后缀**\n\n好像横显和竖显也可以在此配置，不过从fcitx5的配置选项中同样可以调整。\n\n对于词库配置，直接使用其它输入法的词库是一种比较省事的配置方法。可以使用[这个软件](https://github.com/studyzy/imewlconverter)来转换qq、搜狗等输入法的词库。不过这个工具需要.net环境支持，然后我就不出意外的在linux上配置.net时出了岔子……最后回到win下转换好的。\n\n对于转换好的词库文件，应当以.dict.yaml为后缀，且需要在文件开头手动添加类似这样的文件头：\n\n```yaml\n---\nname: sogo\nversion: \"2016.03.02\"\nsort: by_weight\nuse_preset_vocabulary: true\nimport_tables:\n    - luna_pinyin\n    - zhwiki\n...\n```\n\n其中，词库名称必须和文件名（去掉后缀）保持一致。\n\n词库之间支持import，这样只需在方案配置中使用一个词库，并在那个词库的文件头的`import_tables`中加入要引入的其它词库即可。\n\n还可以在[felixonmars/fcitx5-pinyin-zhwiki](https://github.com/studyzy/imewlconverter)找到利用维基百科制作的词库，但不建议只使用这一个词库。\n\n对rime作出任何改动后，需要右键fcitx重新部署输入法。如果出现问题，可以查阅相关日志。\n\nfcitx支持自定义皮肤。我的皮肤是deepin论坛里找的，源地址找不到了，但是网上应该挺多的。下载后将文件夹拖动到`.local/share/fcitx5/themes/`，之后即可在fcitx5设置中的附加组件-经典用户设置中设置主题。\n\n# 结语\n\n总结一下：\n\n1. 所有的更新操作都要慎重\n2. 有问题多搜索，就是别用百度。\n3. 搞事情之前一定要想好后果和挽救措施\n4. 善用官方文档，但是不要死磕官方文档。英文不好的情况下，csdn是很司马，但是内容还是很有价值的\n5. 先解决网络链接问题，不然啥都解决不了。包括各种国内镜像源和科学上网，不然但凡遇到需要github的步骤都要疯狂看人品。后期使用ubuntu配置hexo和github page更是这样，装node.js差点没把我逼疯……（对了，不要用sudo n来更新nodejs，而是用nvm，不然可能会变得不幸）\n","source":"_posts/无折腾，不linux：关于Ventoy-Linux，Kubuntu和系统配置的心得.md","raw":"---\ntitle: 无折腾，不linux：关于Ventoy-Linux，Kubuntu和系统配置的心得\ndate: 2023-07-17 23:37:58\ntags: [折腾不止,ubuntu,kubuntu,linux to go,ventoy]\ncover: cover.jpg\n---\n\n## *本文正在施工中*\n\n# 前言\n\n一切的一切都要从两年前开始讲起。\n\n2021年暑假，我知晓了wintogo这种系统形式的存在。心血来潮，在网上购入了一块三星的U盘。\n\n那时候对wtg的性能要求没什么概念，也并没有也不知道选择带有wtg认证的设备。这是一个后来令我十分痛苦的决定。\n\n之后不短的一段时间，我在学校机房使用的一直是自己的wtg。期间windows11推出，就升级到了win11。但是，由于U盘孱弱的4k读写性能（另一方面，我一直怀疑我盘的4k性能尤其糟糕，不知道与前期格盘过多是否有关），恼人的迟滞和卡顿一直伴随在从开机到关机的每一个过程中，即使关闭windows update、使用内存盘也难以缓解，windows较大的系统体积也使64G的有限空间更加捉襟见肘。考虑到没有必要~~也没有钱~~再买一块新的固态硬盘，在一次失手（这就牵扯到了另一个有关于学校大屏的狗血故事，有空可以写写）搞炸了自己的wintogo之后，我决定投入linux的怀抱。\n\n但这其实并不是我第一次接触linux。在学校机房时，我就在另一位dalao的帮助下，和老师一起给两三台电脑安装过ubuntu 22.04，并在其上部署了oj。当时就吃了不少苦头，走了不少弯路。于是，在开始我的折腾之路的时候，我非常自信，以为这一次能够快速拿下，之后就被打脸了。人是不长记性的动物，尤其是我这种，记性尤其差。当时配置的很多细节现在都忘了，结果还是要从头再来，文档也要重翻一边，何况又出现了巨量的新问题。所以，这次我决定写点东西记下来，一方面保证下次不再走弯路，另一方面大概也可以让后来人也少走一点弯路。总之，让我们开始吧！\n\n# Ventoy的配置\n\n## Ventoy本体的安装和配置\n\nVentoy的使用体验还是非常愉快的。有清晰的中文资料，安装配置也不算复杂，只是当时配置安全启动证书的过程让我十分摸不到头脑。殊不知，安全启动这个噩梦还会在后来继续折磨我。\n\n要使用Ventoy安装虚拟磁盘系统，可以参考[这篇文档](https://www.ventoy.net/cn/plugin_vtoyboot.html)。\n\n需要注意的是，ventoy官方文档中提到，virtualbox中生成的虚拟硬盘文件必须是固定大小（即预先分配全部空间），对于一个较大的虚拟磁盘，这的确有一定的不便，但是，如果使用动态大小，根据另外一位同学的经验，可能会导致虚拟磁盘文件的实际大小不受控制地增加，但具体情况需要进一步实践来验证。\n\nventoy只支持vdi和vhd文件，不支持vhdx。如果你使用vdi作为虚拟磁盘格式，且需要复制虚拟磁盘文件，请**使用virtualbox自带的VBoxManage工具，否则将会在注册虚拟磁盘时报错。**在windows中它会位于virtualbox的根目录下。如果你不幸已经使用这种方式复制了一个超大容量的静态大小虚拟磁盘，为了节省时间，可以直接重设新磁盘的uuid，达到一样的效果。\n\n要复制，可以在virtualbox的根目录下使用：\n\n```powershell\nVBoxManager clonevdi [原文件路径] [新文件路径]\n```\n\n要重新分配uuid。可以输入：\n\n```powershell\nVBoxManage internalcommands sethduuid [文件路径]\n```\n\n来改变虚拟磁盘的uuid。\n\n令人无语的是，当你直接复制vdi文件并尝试注册复制出的文件时，virtual box并不会向你指出导致错误的具体原因（当然也可能是因为日志标注过于抽象导致我看不懂），只能凭借自行搜索来解决。\n\n## 发行版大乱斗\n\n在使用萝卜头论坛的wtg制作工具的时候，对系统的选择是有限的，并且更换系统就需要再次格盘，而Ventoy的存在，让整个过程得以更为灵活自由。我先后尝试了Manjaro，fedora和ubuntu。需要注意，在virtualbox中配置Manjaro时，需要分配比较高的内存，否则可能会导致开机卡死或黑屏。~~当时折腾了好长时间也没找出原因~~。\n\nVentoy默认将U盘的主分区格式化为exFAT格式，这个分区可以手动格式化为NTFS，不过安装linux不建议改变，不确定是否会影响。\n\n还有一点，每次遇到系统内核或驱动更新时，都要重新安装vtoyboost插件。不知道为什么，fedora在我的一次开机时突然进入自动更新，~~之后就成功把我的引导干碎了~~，需要注意。\n\n## 安全启动\n\n> so fuck you, Microsoft.\n\nArch系系统默认不支持安全启动。要使用安全启动，可以参考这两篇文章:\n\n[2023 archlinux 启用 Secure Boot (安全启动) 的最简单方法 -- sbctl](https://zhuanlan.zhihu.com/p/616940828?utm_id=0)\n\n[在Arch Linux中配置安全启动（Secure Boot)](https://zhuanlan.zhihu.com/p/620568516)\n\n虽然fedora和ubuntu（debian）通过shim理论上支持安全启动，但在我的设备（联想小新Pro16 2021ACH锐龙版）上，始终无法在安全启动启用下成功引导系统。但令人诧异的是，Ventoy的选择菜单是可以正常使用的。\n\n# 一些系统配置的细节\n\n## KDE的安装\n\n我一开始打算装Manjaro的原因，按照我尚浅薄的linux使用经验，说是完全因为喜爱pacman，那是一点也不诚实的。另外的重要的原因，是Manjaro有社区维护的KDE版本，而在之前和gnome的接触，使我萌生了换换口味的想法。于是，我试图在ubuntu上手动安装KDE。是的，那个时候我还不知道Kubuntu的存在。\n\n对于ubuntu用户来说，可以使用\n\n```bash\nsudo apt-get install kubuntu-desktop\n```\n\n来安装KDE桌面，理论上来说，这与直接安装kubuntu没有区别。\n\n## 配置静态ip\n\n在机房使用时，\n\n我可以确定的是，gnome下的普通ubuntu并没有这个问题，这很大可能是KDE的问题。\n\n通过搜索发现，这似乎是kubuntu的一个老bug。在很早的时候，就有人在网络上提出这个问题。解决方法是直接使用命令行配置。\n\nubuntu从17.01开始使用netplan（而非/etc/network/interfaces）配置网络设置。总体流程可参考：[Ubuntu Server20.04 静态ip配置（netplan）](https://blog.csdn.net/qq_45949008/article/details/118862854)\n\n网卡的名称可以利用`ip a`查询。\n\n应用配置之前，可以使用`sudo netplan try`测试配置是否存在问题。之后该配置可以在网络设置中正常显示。\n\n最简配置可以是这样的：\n\n```yaml\n# 01-network-manager-all.yaml\nnetwork:\n  version: 2\n  renderer: NetworkManager\n  ethernets:\n    enp2s0:\t\t#网卡名称\n      dhcp4: no\t\t#关闭dhcp\n      addresses: [10.160.219.43/24]\t\t#注意这里/后要填写子网掩码。如点分十进制255.255.255.0对应为24\n      gateway4: 10.160.219.254\n      nameservers:\n        addresses: [8.8.8.8]\n```\n\n/24的24指的是这个掩码由连续的24个1组成，按照点分二进制，表示为11111111.11111111.11111111.11111111.00000000，即255.255.255.0。有关掩码的一些的问题，有时间以后单独写。\n\n## 有关科学上网\n\n不知道为什么，在我的系统中qv2ray配置后切换节点将造成剧烈卡顿，切换后也无法正常工作，几分钟后报错崩溃。目前qv2ray已经停止维护，不再推荐使用。可以选择[qv2rayA](https://github.com/v2rayA/v2rayA)作为替代。\n\nclash方面，clash内核可以在linux下正常运行，注意配置开机启动即可。另外，在windows下非常流行的[clash for windows](https://github.com/Fndroid/clash_for_windows_pkg/releases) GUI终端在linux上同样可用。是的，你没看错。linux下还可以使用[clashy](https://github.com/SpongeNobody/Clashy)\n\nKDE的全局代理设置不一定可以在所有情况下使用，可以借助CFW的tun模式，或在软件中单独设置代理。clash的http(s)代理端口默认为7890，socks为7891。\n\n作为一个倒霉蛋，使用cfw时还碰到了这样两个问题。\n\n如果你的代理端口一直显示0且无法更改，可能是因为一些意外导致开启了多个clash内核。这个时候需要\n\n```bash\nsudo killall clash\n```\n\n再重启cfw客户端。\n\n如果你在一切配置都成功的时候仍然节点全部time out，记得低头看一下表是不是对的。\n\n如上文所说，我的ubuntu至今没有解决安全启动问题，导致目前我在家中在ubuntu与win之间切换只能频繁地开关安全启动（我的win上还有bitlocker……）。而在这个过程中，我的win可能出现时间错误，可能是bios时间不对导致的。\n\n## 关于rime\n配置rime真的花了很长的时间，吐血。如果觉得麻烦，感觉也可以试试搜狗的linux版本。\n\n### rime的安装\n\n首先，建议使用fcitx5来安装rime。命令行输入\n\n```bash\nsudo apt install fcitx5-rime\n```\n\n即可，理论上不需要安装其他组件了。\n\n安装完成之后，需要将fcitx5配置为默认输入法。命令行输入\n\n```bash\nim-config\n```\n\n进行配置。\n\n另外，虽然我没有遇到什么问题，但可以按照[Ubuntu22.04安装Fcitx5中文输入法（详细）](https://zhuanlan.zhihu.com/p/508797663)的方式注册输入法。\n\n如果你在安装ubuntu时一起安装的vscode有不能使用中文输入法的问题，删掉重新去官网下载重装即可。\n\n### 输入方案管理\n\nlinux下，可以使用[rime/plum](https://github.com/rime/plum)管理输入方案。安装fcitx5-rime后即可自带一个朙月拼音输入法，默认是繁体，可以按`ctrl` + `~`键打开设置切换为简体。按照指引使用\n\n```bash\ncurl -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash -s -- :preset\n```\n\n后，会自动在当前目录下载plum工具和自带方案，并安装在rime中。如果你像我以上是一个双拼用户，可以在plum目录下运行\n\n```bash\nrime-install double-pinyin\n```\n\n来安装双拼方案。\n\n### 词库和自定义\n\n注意，对于fcitx5-rime，要使用的所有词库文件、配置文件、方案，都**应当放置在~/.local/share/fcitx5/rime/处，而不是任何其他位置。**如果出现任何找不到文件的问题，可以手动复制到这里。\n\n在上述目录下手动建立`方案.custom.yaml`文件（如小鹤双拼的配置文件显示为`double_pinyin_flypy.schema.yaml`，对应的配置文件应命名为`double_pinyin_flypy.custom.yaml`），配置以下内容：\n\n```yaml\npatch:\n# 指定自定义词库位置\n    \"translator/dictionary\": luna_pinyin  #这里填写词库名称\n    \"menu/page_size\": 9\t\t#候选词数量，最大为9\n```\n\n注意，词库名称**不带有任何后缀**\n\n好像横显和竖显也可以在此配置，不过从fcitx5的配置选项中同样可以调整。\n\n对于词库配置，直接使用其它输入法的词库是一种比较省事的配置方法。可以使用[这个软件](https://github.com/studyzy/imewlconverter)来转换qq、搜狗等输入法的词库。不过这个工具需要.net环境支持，然后我就不出意外的在linux上配置.net时出了岔子……最后回到win下转换好的。\n\n对于转换好的词库文件，应当以.dict.yaml为后缀，且需要在文件开头手动添加类似这样的文件头：\n\n```yaml\n---\nname: sogo\nversion: \"2016.03.02\"\nsort: by_weight\nuse_preset_vocabulary: true\nimport_tables:\n    - luna_pinyin\n    - zhwiki\n...\n```\n\n其中，词库名称必须和文件名（去掉后缀）保持一致。\n\n词库之间支持import，这样只需在方案配置中使用一个词库，并在那个词库的文件头的`import_tables`中加入要引入的其它词库即可。\n\n还可以在[felixonmars/fcitx5-pinyin-zhwiki](https://github.com/studyzy/imewlconverter)找到利用维基百科制作的词库，但不建议只使用这一个词库。\n\n对rime作出任何改动后，需要右键fcitx重新部署输入法。如果出现问题，可以查阅相关日志。\n\nfcitx支持自定义皮肤。我的皮肤是deepin论坛里找的，源地址找不到了，但是网上应该挺多的。下载后将文件夹拖动到`.local/share/fcitx5/themes/`，之后即可在fcitx5设置中的附加组件-经典用户设置中设置主题。\n\n# 结语\n\n总结一下：\n\n1. 所有的更新操作都要慎重\n2. 有问题多搜索，就是别用百度。\n3. 搞事情之前一定要想好后果和挽救措施\n4. 善用官方文档，但是不要死磕官方文档。英文不好的情况下，csdn是很司马，但是内容还是很有价值的\n5. 先解决网络链接问题，不然啥都解决不了。包括各种国内镜像源和科学上网，不然但凡遇到需要github的步骤都要疯狂看人品。后期使用ubuntu配置hexo和github page更是这样，装node.js差点没把我逼疯……（对了，不要用sudo n来更新nodejs，而是用nvm，不然可能会变得不幸）\n","slug":"无折腾，不linux：关于Ventoy-Linux，Kubuntu和系统配置的心得","published":1,"updated":"2023-07-20T12:01:24.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clkdom9vt001n2agwfiuy0d6c","content":"<h2 id=\"本文正在施工中\"><em>本文正在施工中</em></h2>\n<h1 id=\"前言\">前言</h1>\n<p>一切的一切都要从两年前开始讲起。</p>\n<p>2021年暑假，我知晓了wintogo这种系统形式的存在。心血来潮，在网上购入了一块三星的U盘。</p>\n<p>那时候对wtg的性能要求没什么概念，也并没有也不知道选择带有wtg认证的设备。这是一个后来令我十分痛苦的决定。</p>\n<p>之后不短的一段时间，我在学校机房使用的一直是自己的wtg。期间windows11推出，就升级到了win11。但是，由于U盘孱弱的4k读写性能（另一方面，我一直怀疑我盘的4k性能尤其糟糕，不知道与前期格盘过多是否有关），恼人的迟滞和卡顿一直伴随在从开机到关机的每一个过程中，即使关闭windows update、使用内存盘也难以缓解，windows较大的系统体积也使64G的有限空间更加捉襟见肘。考虑到没有必要<del>也没有钱</del>再买一块新的固态硬盘，在一次失手（这就牵扯到了另一个有关于学校大屏的狗血故事，有空可以写写）搞炸了自己的wintogo之后，我决定投入linux的怀抱。</p>\n<p>但这其实并不是我第一次接触linux。在学校机房时，我就在另一位dalao的帮助下，和老师一起给两三台电脑安装过ubuntu 22.04，并在其上部署了oj。当时就吃了不少苦头，走了不少弯路。于是，在开始我的折腾之路的时候，我非常自信，以为这一次能够快速拿下，之后就被打脸了。人是不长记性的动物，尤其是我这种，记性尤其差。当时配置的很多细节现在都忘了，结果还是要从头再来，文档也要重翻一边，何况又出现了巨量的新问题。所以，这次我决定写点东西记下来，一方面保证下次不再走弯路，另一方面大概也可以让后来人也少走一点弯路。总之，让我们开始吧！</p>\n<h1 id=\"ventoy的配置\">Ventoy的配置</h1>\n<h2 id=\"ventoy本体的安装和配置\">Ventoy本体的安装和配置</h2>\n<p>Ventoy的使用体验还是非常愉快的。有清晰的中文资料，安装配置也不算复杂，只是当时配置安全启动证书的过程让我十分摸不到头脑。殊不知，安全启动这个噩梦还会在后来继续折磨我。</p>\n<p>要使用Ventoy安装虚拟磁盘系统，可以参考<a href=\"https://www.ventoy.net/cn/plugin_vtoyboot.html\">这篇文档</a>。</p>\n<p>需要注意的是，ventoy官方文档中提到，virtualbox中生成的虚拟硬盘文件必须是固定大小（即预先分配全部空间），对于一个较大的虚拟磁盘，这的确有一定的不便，但是，如果使用动态大小，根据另外一位同学的经验，可能会导致虚拟磁盘文件的实际大小不受控制地增加，但具体情况需要进一步实践来验证。</p>\n<p>ventoy只支持vdi和vhd文件，不支持vhdx。如果你使用vdi作为虚拟磁盘格式，且需要复制虚拟磁盘文件，请<strong>使用virtualbox自带的VBoxManage工具，否则将会在注册虚拟磁盘时报错。</strong>在windows中它会位于virtualbox的根目录下。如果你不幸已经使用这种方式复制了一个超大容量的静态大小虚拟磁盘，为了节省时间，可以直接重设新磁盘的uuid，达到一样的效果。</p>\n<p>要复制，可以在virtualbox的根目录下使用：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManager clonevdi [原文件路径] [新文件路径]</span><br></pre></td></tr></table></figure>\n<p>要重新分配uuid。可以输入：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManage internalcommands sethduuid [文件路径]</span><br></pre></td></tr></table></figure>\n<p>来改变虚拟磁盘的uuid。</p>\n<p>令人无语的是，当你直接复制vdi文件并尝试注册复制出的文件时，virtual box并不会向你指出导致错误的具体原因（当然也可能是因为日志标注过于抽象导致我看不懂），只能凭借自行搜索来解决。</p>\n<h2 id=\"发行版大乱斗\">发行版大乱斗</h2>\n<p>在使用萝卜头论坛的wtg制作工具的时候，对系统的选择是有限的，并且更换系统就需要再次格盘，而Ventoy的存在，让整个过程得以更为灵活自由。我先后尝试了Manjaro，fedora和ubuntu。需要注意，在virtualbox中配置Manjaro时，需要分配比较高的内存，否则可能会导致开机卡死或黑屏。<del>当时折腾了好长时间也没找出原因</del>。</p>\n<p>Ventoy默认将U盘的主分区格式化为exFAT格式，这个分区可以手动格式化为NTFS，不过安装linux不建议改变，不确定是否会影响。</p>\n<p>还有一点，每次遇到系统内核或驱动更新时，都要重新安装vtoyboost插件。不知道为什么，fedora在我的一次开机时突然进入自动更新，<del>之后就成功把我的引导干碎了</del>，需要注意。</p>\n<h2 id=\"安全启动\">安全启动</h2>\n<blockquote>\n<p>so fuck you, Microsoft.</p>\n</blockquote>\n<p>Arch系系统默认不支持安全启动。要使用安全启动，可以参考这两篇文章:</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/616940828?utm_id=0\">2023 archlinux 启用 Secure Boot (安全启动) 的最简单方法 -- sbctl</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/620568516\">在Arch Linux中配置安全启动（Secure Boot)</a></p>\n<p>虽然fedora和ubuntu（debian）通过shim理论上支持安全启动，但在我的设备（联想小新Pro16 2021ACH锐龙版）上，始终无法在安全启动启用下成功引导系统。但令人诧异的是，Ventoy的选择菜单是可以正常使用的。</p>\n<h1 id=\"一些系统配置的细节\">一些系统配置的细节</h1>\n<h2 id=\"kde的安装\">KDE的安装</h2>\n<p>我一开始打算装Manjaro的原因，按照我尚浅薄的linux使用经验，说是完全因为喜爱pacman，那是一点也不诚实的。另外的重要的原因，是Manjaro有社区维护的KDE版本，而在之前和gnome的接触，使我萌生了换换口味的想法。于是，我试图在ubuntu上手动安装KDE。是的，那个时候我还不知道Kubuntu的存在。</p>\n<p>对于ubuntu用户来说，可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install kubuntu-desktop</span><br></pre></td></tr></table></figure>\n<p>来安装KDE桌面，理论上来说，这与直接安装kubuntu没有区别。</p>\n<h2 id=\"配置静态ip\">配置静态ip</h2>\n<p>在机房使用时，</p>\n<p>我可以确定的是，gnome下的普通ubuntu并没有这个问题，这很大可能是KDE的问题。</p>\n<p>通过搜索发现，这似乎是kubuntu的一个老bug。在很早的时候，就有人在网络上提出这个问题。解决方法是直接使用命令行配置。</p>\n<p>ubuntu从17.01开始使用netplan（而非/etc/network/interfaces）配置网络设置。总体流程可参考：<a href=\"https://blog.csdn.net/qq_45949008/article/details/118862854\">Ubuntu Server20.04 静态ip配置（netplan）</a></p>\n<p>网卡的名称可以利用<code>ip a</code>查询。</p>\n<p>应用配置之前，可以使用<code>sudo netplan try</code>测试配置是否存在问题。之后该配置可以在网络设置中正常显示。</p>\n<p>最简配置可以是这样的：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 01-network-manager-all.yaml</span></span><br><span class=\"line\"><span class=\"attr\">network:</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">renderer:</span> <span class=\"string\">NetworkManager</span></span><br><span class=\"line\">  <span class=\"attr\">ethernets:</span></span><br><span class=\"line\">    <span class=\"attr\">enp2s0:</span>\t\t<span class=\"comment\">#网卡名称</span></span><br><span class=\"line\">      <span class=\"attr\">dhcp4:</span> <span class=\"literal\">no</span>\t\t<span class=\"comment\">#关闭dhcp</span></span><br><span class=\"line\">      <span class=\"attr\">addresses:</span> [<span class=\"number\">10.160</span><span class=\"number\">.219</span><span class=\"number\">.43</span><span class=\"string\">/24</span>]\t\t<span class=\"comment\">#注意这里/后要填写子网掩码。如点分十进制255.255.255.0对应为24</span></span><br><span class=\"line\">      <span class=\"attr\">gateway4:</span> <span class=\"number\">10.160</span><span class=\"number\">.219</span><span class=\"number\">.254</span></span><br><span class=\"line\">      <span class=\"attr\">nameservers:</span></span><br><span class=\"line\">        <span class=\"attr\">addresses:</span> [<span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span>]</span><br></pre></td></tr></table></figure>\n<p>/24的24指的是这个掩码由连续的24个1组成，按照点分二进制，表示为11111111.11111111.11111111.11111111.00000000，即255.255.255.0。有关掩码的一些的问题，有时间以后单独写。</p>\n<h2 id=\"有关科学上网\">有关科学上网</h2>\n<p>不知道为什么，在我的系统中qv2ray配置后切换节点将造成剧烈卡顿，切换后也无法正常工作，几分钟后报错崩溃。目前qv2ray已经停止维护，不再推荐使用。可以选择<a href=\"https://github.com/v2rayA/v2rayA\">qv2rayA</a>作为替代。</p>\n<p>clash方面，clash内核可以在linux下正常运行，注意配置开机启动即可。另外，在windows下非常流行的<a href=\"https://github.com/Fndroid/clash_for_windows_pkg/releases\">clash for windows</a> GUI终端在linux上同样可用。是的，你没看错。linux下还可以使用<a href=\"https://github.com/SpongeNobody/Clashy\">clashy</a></p>\n<p>KDE的全局代理设置不一定可以在所有情况下使用，可以借助CFW的tun模式，或在软件中单独设置代理。clash的http(s)代理端口默认为7890，socks为7891。</p>\n<p>作为一个倒霉蛋，使用cfw时还碰到了这样两个问题。</p>\n<p>如果你的代理端口一直显示0且无法更改，可能是因为一些意外导致开启了多个clash内核。这个时候需要</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo killall clash</span><br></pre></td></tr></table></figure>\n<p>再重启cfw客户端。</p>\n<p>如果你在一切配置都成功的时候仍然节点全部time out，记得低头看一下表是不是对的。</p>\n<p>如上文所说，我的ubuntu至今没有解决安全启动问题，导致目前我在家中在ubuntu与win之间切换只能频繁地开关安全启动（我的win上还有bitlocker……）。而在这个过程中，我的win可能出现时间错误，可能是bios时间不对导致的。</p>\n<h2 id=\"关于rime\">关于rime</h2>\n<p>配置rime真的花了很长的时间，吐血。如果觉得麻烦，感觉也可以试试搜狗的linux版本。</p>\n<h3 id=\"rime的安装\">rime的安装</h3>\n<p>首先，建议使用fcitx5来安装rime。命令行输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install fcitx5-rime</span><br></pre></td></tr></table></figure>\n<p>即可，理论上不需要安装其他组件了。</p>\n<p>安装完成之后，需要将fcitx5配置为默认输入法。命令行输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">im-config</span><br></pre></td></tr></table></figure>\n<p>进行配置。</p>\n<p>另外，虽然我没有遇到什么问题，但可以按照<a href=\"https://zhuanlan.zhihu.com/p/508797663\">Ubuntu22.04安装Fcitx5中文输入法（详细）</a>的方式注册输入法。</p>\n<p>如果你在安装ubuntu时一起安装的vscode有不能使用中文输入法的问题，删掉重新去官网下载重装即可。</p>\n<h3 id=\"输入方案管理\">输入方案管理</h3>\n<p>linux下，可以使用<a href=\"https://github.com/rime/plum\">rime/plum</a>管理输入方案。安装fcitx5-rime后即可自带一个朙月拼音输入法，默认是繁体，可以按<code>ctrl</code> + <code>~</code>键打开设置切换为简体。按照指引使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash -s -- :preset</span><br></pre></td></tr></table></figure>\n<p>后，会自动在当前目录下载plum工具和自带方案，并安装在rime中。如果你像我以上是一个双拼用户，可以在plum目录下运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rime-install double-pinyin</span><br></pre></td></tr></table></figure>\n<p>来安装双拼方案。</p>\n<h3 id=\"词库和自定义\">词库和自定义</h3>\n<p>注意，对于fcitx5-rime，要使用的所有词库文件、配置文件、方案，都<strong>应当放置在~/.local/share/fcitx5/rime/处，而不是任何其他位置。</strong>如果出现任何找不到文件的问题，可以手动复制到这里。</p>\n<p>在上述目录下手动建立<code>方案.custom.yaml</code>文件（如小鹤双拼的配置文件显示为<code>double_pinyin_flypy.schema.yaml</code>，对应的配置文件应命名为<code>double_pinyin_flypy.custom.yaml</code>），配置以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\"><span class=\"comment\"># 指定自定义词库位置</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;translator/dictionary&quot;:</span> <span class=\"string\">luna_pinyin</span>  <span class=\"comment\">#这里填写词库名称</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;menu/page_size&quot;:</span> <span class=\"number\">9</span>\t\t<span class=\"comment\">#候选词数量，最大为9</span></span><br></pre></td></tr></table></figure>\n<p>注意，词库名称<strong>不带有任何后缀</strong></p>\n<p>好像横显和竖显也可以在此配置，不过从fcitx5的配置选项中同样可以调整。</p>\n<p>对于词库配置，直接使用其它输入法的词库是一种比较省事的配置方法。可以使用<a href=\"https://github.com/studyzy/imewlconverter\">这个软件</a>来转换qq、搜狗等输入法的词库。不过这个工具需要.net环境支持，然后我就不出意外的在linux上配置.net时出了岔子……最后回到win下转换好的。</p>\n<p>对于转换好的词库文件，应当以.dict.yaml为后缀，且需要在文件开头手动添加类似这样的文件头：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">sogo</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;2016.03.02&quot;</span></span><br><span class=\"line\"><span class=\"attr\">sort:</span> <span class=\"string\">by_weight</span></span><br><span class=\"line\"><span class=\"attr\">use_preset_vocabulary:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">import_tables:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">luna_pinyin</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">zhwiki</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n<p>其中，词库名称必须和文件名（去掉后缀）保持一致。</p>\n<p>词库之间支持import，这样只需在方案配置中使用一个词库，并在那个词库的文件头的<code>import_tables</code>中加入要引入的其它词库即可。</p>\n<p>还可以在<a href=\"https://github.com/studyzy/imewlconverter\">felixonmars/fcitx5-pinyin-zhwiki</a>找到利用维基百科制作的词库，但不建议只使用这一个词库。</p>\n<p>对rime作出任何改动后，需要右键fcitx重新部署输入法。如果出现问题，可以查阅相关日志。</p>\n<p>fcitx支持自定义皮肤。我的皮肤是deepin论坛里找的，源地址找不到了，但是网上应该挺多的。下载后将文件夹拖动到<code>.local/share/fcitx5/themes/</code>，之后即可在fcitx5设置中的附加组件-经典用户设置中设置主题。</p>\n<h1 id=\"结语\">结语</h1>\n<p>总结一下：</p>\n<ol type=\"1\">\n<li>所有的更新操作都要慎重</li>\n<li>有问题多搜索，就是别用百度。</li>\n<li>搞事情之前一定要想好后果和挽救措施</li>\n<li>善用官方文档，但是不要死磕官方文档。英文不好的情况下，csdn是很司马，但是内容还是很有价值的</li>\n<li>先解决网络链接问题，不然啥都解决不了。包括各种国内镜像源和科学上网，不然但凡遇到需要github的步骤都要疯狂看人品。后期使用ubuntu配置hexo和github page更是这样，装node.js差点没把我逼疯……（对了，不要用sudo n来更新nodejs，而是用nvm，不然可能会变得不幸）</li>\n</ol>\n","site":{"data":{}},"cover_type":"img","excerpt":"","more":"<h2 id=\"本文正在施工中\"><em>本文正在施工中</em></h2>\n<h1 id=\"前言\">前言</h1>\n<p>一切的一切都要从两年前开始讲起。</p>\n<p>2021年暑假，我知晓了wintogo这种系统形式的存在。心血来潮，在网上购入了一块三星的U盘。</p>\n<p>那时候对wtg的性能要求没什么概念，也并没有也不知道选择带有wtg认证的设备。这是一个后来令我十分痛苦的决定。</p>\n<p>之后不短的一段时间，我在学校机房使用的一直是自己的wtg。期间windows11推出，就升级到了win11。但是，由于U盘孱弱的4k读写性能（另一方面，我一直怀疑我盘的4k性能尤其糟糕，不知道与前期格盘过多是否有关），恼人的迟滞和卡顿一直伴随在从开机到关机的每一个过程中，即使关闭windows update、使用内存盘也难以缓解，windows较大的系统体积也使64G的有限空间更加捉襟见肘。考虑到没有必要<del>也没有钱</del>再买一块新的固态硬盘，在一次失手（这就牵扯到了另一个有关于学校大屏的狗血故事，有空可以写写）搞炸了自己的wintogo之后，我决定投入linux的怀抱。</p>\n<p>但这其实并不是我第一次接触linux。在学校机房时，我就在另一位dalao的帮助下，和老师一起给两三台电脑安装过ubuntu 22.04，并在其上部署了oj。当时就吃了不少苦头，走了不少弯路。于是，在开始我的折腾之路的时候，我非常自信，以为这一次能够快速拿下，之后就被打脸了。人是不长记性的动物，尤其是我这种，记性尤其差。当时配置的很多细节现在都忘了，结果还是要从头再来，文档也要重翻一边，何况又出现了巨量的新问题。所以，这次我决定写点东西记下来，一方面保证下次不再走弯路，另一方面大概也可以让后来人也少走一点弯路。总之，让我们开始吧！</p>\n<h1 id=\"ventoy的配置\">Ventoy的配置</h1>\n<h2 id=\"ventoy本体的安装和配置\">Ventoy本体的安装和配置</h2>\n<p>Ventoy的使用体验还是非常愉快的。有清晰的中文资料，安装配置也不算复杂，只是当时配置安全启动证书的过程让我十分摸不到头脑。殊不知，安全启动这个噩梦还会在后来继续折磨我。</p>\n<p>要使用Ventoy安装虚拟磁盘系统，可以参考<a href=\"https://www.ventoy.net/cn/plugin_vtoyboot.html\">这篇文档</a>。</p>\n<p>需要注意的是，ventoy官方文档中提到，virtualbox中生成的虚拟硬盘文件必须是固定大小（即预先分配全部空间），对于一个较大的虚拟磁盘，这的确有一定的不便，但是，如果使用动态大小，根据另外一位同学的经验，可能会导致虚拟磁盘文件的实际大小不受控制地增加，但具体情况需要进一步实践来验证。</p>\n<p>ventoy只支持vdi和vhd文件，不支持vhdx。如果你使用vdi作为虚拟磁盘格式，且需要复制虚拟磁盘文件，请<strong>使用virtualbox自带的VBoxManage工具，否则将会在注册虚拟磁盘时报错。</strong>在windows中它会位于virtualbox的根目录下。如果你不幸已经使用这种方式复制了一个超大容量的静态大小虚拟磁盘，为了节省时间，可以直接重设新磁盘的uuid，达到一样的效果。</p>\n<p>要复制，可以在virtualbox的根目录下使用：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManager clonevdi [原文件路径] [新文件路径]</span><br></pre></td></tr></table></figure>\n<p>要重新分配uuid。可以输入：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VBoxManage internalcommands sethduuid [文件路径]</span><br></pre></td></tr></table></figure>\n<p>来改变虚拟磁盘的uuid。</p>\n<p>令人无语的是，当你直接复制vdi文件并尝试注册复制出的文件时，virtual box并不会向你指出导致错误的具体原因（当然也可能是因为日志标注过于抽象导致我看不懂），只能凭借自行搜索来解决。</p>\n<h2 id=\"发行版大乱斗\">发行版大乱斗</h2>\n<p>在使用萝卜头论坛的wtg制作工具的时候，对系统的选择是有限的，并且更换系统就需要再次格盘，而Ventoy的存在，让整个过程得以更为灵活自由。我先后尝试了Manjaro，fedora和ubuntu。需要注意，在virtualbox中配置Manjaro时，需要分配比较高的内存，否则可能会导致开机卡死或黑屏。<del>当时折腾了好长时间也没找出原因</del>。</p>\n<p>Ventoy默认将U盘的主分区格式化为exFAT格式，这个分区可以手动格式化为NTFS，不过安装linux不建议改变，不确定是否会影响。</p>\n<p>还有一点，每次遇到系统内核或驱动更新时，都要重新安装vtoyboost插件。不知道为什么，fedora在我的一次开机时突然进入自动更新，<del>之后就成功把我的引导干碎了</del>，需要注意。</p>\n<h2 id=\"安全启动\">安全启动</h2>\n<blockquote>\n<p>so fuck you, Microsoft.</p>\n</blockquote>\n<p>Arch系系统默认不支持安全启动。要使用安全启动，可以参考这两篇文章:</p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/616940828?utm_id=0\">2023 archlinux 启用 Secure Boot (安全启动) 的最简单方法 -- sbctl</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/620568516\">在Arch Linux中配置安全启动（Secure Boot)</a></p>\n<p>虽然fedora和ubuntu（debian）通过shim理论上支持安全启动，但在我的设备（联想小新Pro16 2021ACH锐龙版）上，始终无法在安全启动启用下成功引导系统。但令人诧异的是，Ventoy的选择菜单是可以正常使用的。</p>\n<h1 id=\"一些系统配置的细节\">一些系统配置的细节</h1>\n<h2 id=\"kde的安装\">KDE的安装</h2>\n<p>我一开始打算装Manjaro的原因，按照我尚浅薄的linux使用经验，说是完全因为喜爱pacman，那是一点也不诚实的。另外的重要的原因，是Manjaro有社区维护的KDE版本，而在之前和gnome的接触，使我萌生了换换口味的想法。于是，我试图在ubuntu上手动安装KDE。是的，那个时候我还不知道Kubuntu的存在。</p>\n<p>对于ubuntu用户来说，可以使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install kubuntu-desktop</span><br></pre></td></tr></table></figure>\n<p>来安装KDE桌面，理论上来说，这与直接安装kubuntu没有区别。</p>\n<h2 id=\"配置静态ip\">配置静态ip</h2>\n<p>在机房使用时，</p>\n<p>我可以确定的是，gnome下的普通ubuntu并没有这个问题，这很大可能是KDE的问题。</p>\n<p>通过搜索发现，这似乎是kubuntu的一个老bug。在很早的时候，就有人在网络上提出这个问题。解决方法是直接使用命令行配置。</p>\n<p>ubuntu从17.01开始使用netplan（而非/etc/network/interfaces）配置网络设置。总体流程可参考：<a href=\"https://blog.csdn.net/qq_45949008/article/details/118862854\">Ubuntu Server20.04 静态ip配置（netplan）</a></p>\n<p>网卡的名称可以利用<code>ip a</code>查询。</p>\n<p>应用配置之前，可以使用<code>sudo netplan try</code>测试配置是否存在问题。之后该配置可以在网络设置中正常显示。</p>\n<p>最简配置可以是这样的：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 01-network-manager-all.yaml</span></span><br><span class=\"line\"><span class=\"attr\">network:</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"attr\">renderer:</span> <span class=\"string\">NetworkManager</span></span><br><span class=\"line\">  <span class=\"attr\">ethernets:</span></span><br><span class=\"line\">    <span class=\"attr\">enp2s0:</span>\t\t<span class=\"comment\">#网卡名称</span></span><br><span class=\"line\">      <span class=\"attr\">dhcp4:</span> <span class=\"literal\">no</span>\t\t<span class=\"comment\">#关闭dhcp</span></span><br><span class=\"line\">      <span class=\"attr\">addresses:</span> [<span class=\"number\">10.160</span><span class=\"number\">.219</span><span class=\"number\">.43</span><span class=\"string\">/24</span>]\t\t<span class=\"comment\">#注意这里/后要填写子网掩码。如点分十进制255.255.255.0对应为24</span></span><br><span class=\"line\">      <span class=\"attr\">gateway4:</span> <span class=\"number\">10.160</span><span class=\"number\">.219</span><span class=\"number\">.254</span></span><br><span class=\"line\">      <span class=\"attr\">nameservers:</span></span><br><span class=\"line\">        <span class=\"attr\">addresses:</span> [<span class=\"number\">8.8</span><span class=\"number\">.8</span><span class=\"number\">.8</span>]</span><br></pre></td></tr></table></figure>\n<p>/24的24指的是这个掩码由连续的24个1组成，按照点分二进制，表示为11111111.11111111.11111111.11111111.00000000，即255.255.255.0。有关掩码的一些的问题，有时间以后单独写。</p>\n<h2 id=\"有关科学上网\">有关科学上网</h2>\n<p>不知道为什么，在我的系统中qv2ray配置后切换节点将造成剧烈卡顿，切换后也无法正常工作，几分钟后报错崩溃。目前qv2ray已经停止维护，不再推荐使用。可以选择<a href=\"https://github.com/v2rayA/v2rayA\">qv2rayA</a>作为替代。</p>\n<p>clash方面，clash内核可以在linux下正常运行，注意配置开机启动即可。另外，在windows下非常流行的<a href=\"https://github.com/Fndroid/clash_for_windows_pkg/releases\">clash for windows</a> GUI终端在linux上同样可用。是的，你没看错。linux下还可以使用<a href=\"https://github.com/SpongeNobody/Clashy\">clashy</a></p>\n<p>KDE的全局代理设置不一定可以在所有情况下使用，可以借助CFW的tun模式，或在软件中单独设置代理。clash的http(s)代理端口默认为7890，socks为7891。</p>\n<p>作为一个倒霉蛋，使用cfw时还碰到了这样两个问题。</p>\n<p>如果你的代理端口一直显示0且无法更改，可能是因为一些意外导致开启了多个clash内核。这个时候需要</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo killall clash</span><br></pre></td></tr></table></figure>\n<p>再重启cfw客户端。</p>\n<p>如果你在一切配置都成功的时候仍然节点全部time out，记得低头看一下表是不是对的。</p>\n<p>如上文所说，我的ubuntu至今没有解决安全启动问题，导致目前我在家中在ubuntu与win之间切换只能频繁地开关安全启动（我的win上还有bitlocker……）。而在这个过程中，我的win可能出现时间错误，可能是bios时间不对导致的。</p>\n<h2 id=\"关于rime\">关于rime</h2>\n<p>配置rime真的花了很长的时间，吐血。如果觉得麻烦，感觉也可以试试搜狗的linux版本。</p>\n<h3 id=\"rime的安装\">rime的安装</h3>\n<p>首先，建议使用fcitx5来安装rime。命令行输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install fcitx5-rime</span><br></pre></td></tr></table></figure>\n<p>即可，理论上不需要安装其他组件了。</p>\n<p>安装完成之后，需要将fcitx5配置为默认输入法。命令行输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">im-config</span><br></pre></td></tr></table></figure>\n<p>进行配置。</p>\n<p>另外，虽然我没有遇到什么问题，但可以按照<a href=\"https://zhuanlan.zhihu.com/p/508797663\">Ubuntu22.04安装Fcitx5中文输入法（详细）</a>的方式注册输入法。</p>\n<p>如果你在安装ubuntu时一起安装的vscode有不能使用中文输入法的问题，删掉重新去官网下载重装即可。</p>\n<h3 id=\"输入方案管理\">输入方案管理</h3>\n<p>linux下，可以使用<a href=\"https://github.com/rime/plum\">rime/plum</a>管理输入方案。安装fcitx5-rime后即可自带一个朙月拼音输入法，默认是繁体，可以按<code>ctrl</code> + <code>~</code>键打开设置切换为简体。按照指引使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash -s -- :preset</span><br></pre></td></tr></table></figure>\n<p>后，会自动在当前目录下载plum工具和自带方案，并安装在rime中。如果你像我以上是一个双拼用户，可以在plum目录下运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rime-install double-pinyin</span><br></pre></td></tr></table></figure>\n<p>来安装双拼方案。</p>\n<h3 id=\"词库和自定义\">词库和自定义</h3>\n<p>注意，对于fcitx5-rime，要使用的所有词库文件、配置文件、方案，都<strong>应当放置在~/.local/share/fcitx5/rime/处，而不是任何其他位置。</strong>如果出现任何找不到文件的问题，可以手动复制到这里。</p>\n<p>在上述目录下手动建立<code>方案.custom.yaml</code>文件（如小鹤双拼的配置文件显示为<code>double_pinyin_flypy.schema.yaml</code>，对应的配置文件应命名为<code>double_pinyin_flypy.custom.yaml</code>），配置以下内容：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">patch:</span></span><br><span class=\"line\"><span class=\"comment\"># 指定自定义词库位置</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;translator/dictionary&quot;:</span> <span class=\"string\">luna_pinyin</span>  <span class=\"comment\">#这里填写词库名称</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;menu/page_size&quot;:</span> <span class=\"number\">9</span>\t\t<span class=\"comment\">#候选词数量，最大为9</span></span><br></pre></td></tr></table></figure>\n<p>注意，词库名称<strong>不带有任何后缀</strong></p>\n<p>好像横显和竖显也可以在此配置，不过从fcitx5的配置选项中同样可以调整。</p>\n<p>对于词库配置，直接使用其它输入法的词库是一种比较省事的配置方法。可以使用<a href=\"https://github.com/studyzy/imewlconverter\">这个软件</a>来转换qq、搜狗等输入法的词库。不过这个工具需要.net环境支持，然后我就不出意外的在linux上配置.net时出了岔子……最后回到win下转换好的。</p>\n<p>对于转换好的词库文件，应当以.dict.yaml为后缀，且需要在文件开头手动添加类似这样的文件头：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">sogo</span></span><br><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&quot;2016.03.02&quot;</span></span><br><span class=\"line\"><span class=\"attr\">sort:</span> <span class=\"string\">by_weight</span></span><br><span class=\"line\"><span class=\"attr\">use_preset_vocabulary:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">import_tables:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">luna_pinyin</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">zhwiki</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br></pre></td></tr></table></figure>\n<p>其中，词库名称必须和文件名（去掉后缀）保持一致。</p>\n<p>词库之间支持import，这样只需在方案配置中使用一个词库，并在那个词库的文件头的<code>import_tables</code>中加入要引入的其它词库即可。</p>\n<p>还可以在<a href=\"https://github.com/studyzy/imewlconverter\">felixonmars/fcitx5-pinyin-zhwiki</a>找到利用维基百科制作的词库，但不建议只使用这一个词库。</p>\n<p>对rime作出任何改动后，需要右键fcitx重新部署输入法。如果出现问题，可以查阅相关日志。</p>\n<p>fcitx支持自定义皮肤。我的皮肤是deepin论坛里找的，源地址找不到了，但是网上应该挺多的。下载后将文件夹拖动到<code>.local/share/fcitx5/themes/</code>，之后即可在fcitx5设置中的附加组件-经典用户设置中设置主题。</p>\n<h1 id=\"结语\">结语</h1>\n<p>总结一下：</p>\n<ol type=\"1\">\n<li>所有的更新操作都要慎重</li>\n<li>有问题多搜索，就是别用百度。</li>\n<li>搞事情之前一定要想好后果和挽救措施</li>\n<li>善用官方文档，但是不要死磕官方文档。英文不好的情况下，csdn是很司马，但是内容还是很有价值的</li>\n<li>先解决网络链接问题，不然啥都解决不了。包括各种国内镜像源和科学上网，不然但凡遇到需要github的步骤都要疯狂看人品。后期使用ubuntu配置hexo和github page更是这样，装node.js差点没把我逼疯……（对了，不要用sudo n来更新nodejs，而是用nvm，不然可能会变得不幸）</li>\n</ol>\n"}],"PostAsset":[{"_id":"source/_posts/无折腾，不linux：关于Ventoy-Linux，Kubuntu和系统配置的心得/cover.jpg","post":"clkdom9vt001n2agwfiuy0d6c","slug":"cover.jpg","modified":1,"renderable":1},{"_id":"source/_posts/无折腾，不linux：关于Ventoy-Linux，Kubuntu和系统配置的心得/test.png","post":"clkdom9vt001n2agwfiuy0d6c","slug":"test.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"clkdom9vc00012agw4gf91ll3","tag_id":"clkdom9vf00042agw4vxdaf0p","_id":"clkdom9vl000g2agwe2f60pb8"},{"post_id":"clkdom9vc00012agw4gf91ll3","tag_id":"clkdom9vi00082agwhts5gohr","_id":"clkdom9vm000i2agw7t7zeak2"},{"post_id":"clkdom9vc00012agw4gf91ll3","tag_id":"clkdom9vj000b2agw3hs72736","_id":"clkdom9vn000l2agwe1nn2d0a"},{"post_id":"clkdom9ve00032agw46fh8y0g","tag_id":"clkdom9vf00042agw4vxdaf0p","_id":"clkdom9vp000s2agwccq08boi"},{"post_id":"clkdom9ve00032agw46fh8y0g","tag_id":"clkdom9vm000j2agwar6dcphw","_id":"clkdom9vp000t2agwggo2axh1"},{"post_id":"clkdom9ve00032agw46fh8y0g","tag_id":"clkdom9vj000b2agw3hs72736","_id":"clkdom9vp000v2agw30ike8k6"},{"post_id":"clkdom9vg00052agwboaoe9cm","tag_id":"clkdom9vf00042agw4vxdaf0p","_id":"clkdom9vq000y2agw2iosdhdl"},{"post_id":"clkdom9vg00052agwboaoe9cm","tag_id":"clkdom9vj000b2agw3hs72736","_id":"clkdom9vq000z2agw8cubgr2n"},{"post_id":"clkdom9vg00052agwboaoe9cm","tag_id":"clkdom9vi00082agwhts5gohr","_id":"clkdom9vq00112agwbm1nfg8r"},{"post_id":"clkdom9vh00062agw864f0j59","tag_id":"clkdom9vf00042agw4vxdaf0p","_id":"clkdom9vq00132agw3mk3e03t"},{"post_id":"clkdom9vh00062agw864f0j59","tag_id":"clkdom9vm000j2agwar6dcphw","_id":"clkdom9vq00142agw84lbcouv"},{"post_id":"clkdom9vh00062agw864f0j59","tag_id":"clkdom9vj000b2agw3hs72736","_id":"clkdom9vr00162agwaa8bhnqo"},{"post_id":"clkdom9vn000o2agwgg1tfa33","tag_id":"clkdom9vi00082agwhts5gohr","_id":"clkdom9vr00192agw46cg8n55"},{"post_id":"clkdom9vn000o2agwgg1tfa33","tag_id":"clkdom9vq00122agw5u9vcbek","_id":"clkdom9vr001a2agw0oboe3b0"},{"post_id":"clkdom9vn000o2agwgg1tfa33","tag_id":"clkdom9vq00152agwf7pb7oor","_id":"clkdom9vr001c2agwgygp5tx5"},{"post_id":"clkdom9vn000o2agwgg1tfa33","tag_id":"clkdom9vr00172agwby8r0omg","_id":"clkdom9vr001d2agw1l3xhwnh"},{"post_id":"clkdom9vo000p2agwhg31g9ri","tag_id":"clkdom9vi00082agwhts5gohr","_id":"clkdom9vs001f2agwf9s9gr66"},{"post_id":"clkdom9vo000p2agwhg31g9ri","tag_id":"clkdom9vm000j2agwar6dcphw","_id":"clkdom9vs001g2agwfpz476s0"},{"post_id":"clkdom9vo000p2agwhg31g9ri","tag_id":"clkdom9vq00122agw5u9vcbek","_id":"clkdom9vs001i2agw29hih8l3"},{"post_id":"clkdom9vo000r2agw9wc6honm","tag_id":"clkdom9vi00082agwhts5gohr","_id":"clkdom9vs001j2agw0p7f7jin"},{"post_id":"clkdom9vo000r2agw9wc6honm","tag_id":"clkdom9vq00122agw5u9vcbek","_id":"clkdom9vs001k2agwdg4q19fx"},{"post_id":"clkdom9vo000r2agw9wc6honm","tag_id":"clkdom9vr001e2agwau9cbh2x","_id":"clkdom9vs001l2agw2mtpcnet"},{"post_id":"clkdom9vo000r2agw9wc6honm","tag_id":"clkdom9vr00172agwby8r0omg","_id":"clkdom9vs001m2agwdu3d36ak"},{"post_id":"clkdom9vt001n2agwfiuy0d6c","tag_id":"clkdom9vu001o2agwg6zo6903","_id":"clkdom9vu001t2agwdo8h2r0w"},{"post_id":"clkdom9vt001n2agwfiuy0d6c","tag_id":"clkdom9vu001p2agwg52n1ell","_id":"clkdom9vv001u2agwfu7wgrn1"},{"post_id":"clkdom9vt001n2agwfiuy0d6c","tag_id":"clkdom9vu001q2agwa4cnejyf","_id":"clkdom9vv001v2agw4ld9785r"},{"post_id":"clkdom9vt001n2agwfiuy0d6c","tag_id":"clkdom9vu001r2agw5eid5ajk","_id":"clkdom9vv001w2agwczje37ve"},{"post_id":"clkdom9vt001n2agwfiuy0d6c","tag_id":"clkdom9vu001s2agw4ykv5w2j","_id":"clkdom9vv001x2agwd9na4c55"}],"Tag":[{"name":"csp-noip备战日志","_id":"clkdom9vf00042agw4vxdaf0p"},{"name":"学习手记","_id":"clkdom9vi00082agwhts5gohr"},{"name":"OI","_id":"clkdom9vj000b2agw3hs72736"},{"name":"时隙随思","_id":"clkdom9vm000j2agwar6dcphw"},{"name":"音mad101","_id":"clkdom9vq00122agw5u9vcbek"},{"name":"音mad101第一节","_id":"clkdom9vq00152agwf7pb7oor"},{"name":"AE","_id":"clkdom9vr00172agwby8r0omg"},{"name":"音mad101第1节","_id":"clkdom9vr001e2agwau9cbh2x"},{"name":"折腾不止","_id":"clkdom9vu001o2agwg6zo6903"},{"name":"ubuntu","_id":"clkdom9vu001p2agwg52n1ell"},{"name":"kubuntu","_id":"clkdom9vu001q2agwa4cnejyf"},{"name":"linux to go","_id":"clkdom9vu001r2agw5eid5ajk"},{"name":"ventoy","_id":"clkdom9vu001s2agw4ykv5w2j"}]}}